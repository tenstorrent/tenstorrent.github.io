<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="eltwise__binary_8h" kind="file" language="C++">
    <compoundname>eltwise_binary.h</compoundname>
    <includes local="yes">compute_kernel_api/common.h</includes>
    <incdepgraph>
      <node id="1">
        <label>tt_metal/include/compute_kernel_api/eltwise_binary.h</label>
        <link refid="eltwise__binary_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>compute_kernel_api/common.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceckernel">ckernel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>Â©<sp/>2023<sp/>Tenstorrent<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compute_kernel_api/common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRISC_MATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_math_binary_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRISC_UNPACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_unpack_AB_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_unpack_A_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ckernel<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>binary_op_init_common(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>ocb=16)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_hw_configure_disaggregated&lt;DST_ACCUM_MODE&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::NONE&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_pack_sync_init&lt;DST_ACCUM_MODE&gt;()<sp/>));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_hw_configure_disaggregated()<sp/>));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_hw_configure_disaggregated&lt;false,<sp/>DST_ACCUM_MODE&gt;(ocb)<sp/>));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_init(ocb)<sp/>));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_dest_init&lt;false,<sp/>DST_ACCUM_MODE&gt;()<sp/>));</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_init_f()<sp/>{<sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWMUL,<sp/>NONE,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_init(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWMUL,<sp/>NONE,<sp/>MATH_FIDELITY&gt;()<sp/>));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::NONE&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_init_nof()<sp/>{<sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWADD,<sp/>NONE&gt;()<sp/>));<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_init(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acc_to_dest<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWADD,<sp/>NONE&gt;(0</highlight><highlight class="comment">/*transpose*/</highlight><highlight class="normal">,<sp/>acc_to_dest)<sp/>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::NONE&gt;(icb0,<sp/>icb1,<sp/>0</highlight><highlight class="comment">/*transpose*/</highlight><highlight class="normal">,<sp/>acc_to_dest)<sp/>));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_init_nof()<sp/>{<sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWSUB,<sp/>NONE&gt;()<sp/>));<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_init(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acc_to_dest<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWSUB,<sp/>NONE&gt;(0</highlight><highlight class="comment">/*transpose*/</highlight><highlight class="normal">,<sp/>acc_to_dest)<sp/>));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::NONE&gt;(icb0,<sp/>icb1,<sp/>0</highlight><highlight class="comment">/*transpose*/</highlight><highlight class="normal">,<sp/>acc_to_dest)<sp/>));</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles(<sp/>uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>first<sp/>=<sp/>true;<sp/>//<sp/>TODO(AP):<sp/>static<sp/>initializer<sp/>causes<sp/>a<sp/>hang,<sp/>possibly<sp/>investigate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>possible<sp/>solution<sp/>is<sp/>to<sp/>add<sp/>a<sp/>local<sp/>context<sp/>in<sp/>the<sp/>kernel,<sp/>pass<sp/>it<sp/>around<sp/>and<sp/>store<sp/>init<sp/>flags<sp/>in<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>way<sp/>the<sp/>compiler<sp/>should<sp/>be<sp/>able<sp/>to<sp/>perform<sp/>loop<sp/>hoisting<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>might<sp/>need<sp/>to<sp/>add<sp/>__attribute__((pure))<sp/>to<sp/>init<sp/>calls<sp/>for<sp/>this<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>pass<sp/>-fmove-loop-invariants<sp/>to<sp/>g++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mul_tiles_initf();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/><sp/>));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;ELWMUL,<sp/>NONE,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles(<sp/>uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/><sp/>));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;ELWADD,<sp/>NONE,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles(<sp/>uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/><sp/>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;ELWSUB,<sp/>NONE,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full_init<sp/>=<sp/>false,<sp/>EltwiseBinaryType<sp/>eltwise_binary_op_type<sp/>=<sp/>ELWADD&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>binary_op_specific_init()<sp/></highlight><highlight class="comment">//<sp/>TODO(AP):<sp/>better<sp/>naming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(full_init)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWADD)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_tiles_init();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWSUB)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_tiles_init();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWMUL)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul_tiles_init();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWADD)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_tiles_init_nof();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWSUB)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_tiles_init_nof();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(eltwise_binary_op_type<sp/>==<sp/>ELWMUL)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mul_tiles_init_f();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">EltwiseBinaryType<sp/>eltwise_binary_type<sp/>=<sp/>ELWADD,</highlight></codeline>
<codeline lineno="210"><highlight class="normal">EltwiseBinaryReuseDestType<sp/>binary_reuse_dest<sp/>=<sp/>EltwiseBinaryReuseDestType::NONE&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>binary_dest_reuse_tiles_init(uint32_t<sp/>icb0)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_A_init&lt;BroadcastType::NONE,<sp/>true,<sp/>binary_reuse_dest&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>icb0)<sp/>));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;eltwise_binary_type,<sp/>NONE,<sp/>MATH_FIDELITY,<sp/>binary_reuse_dest&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>));</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">EltwiseBinaryType<sp/>eltwise_binary_type<sp/>=<sp/>ELWADD,</highlight></codeline>
<codeline lineno="240"><highlight class="normal">EltwiseBinaryReuseDestType<sp/>binary_reuse_dest<sp/>=<sp/>EltwiseBinaryReuseDestType::NONE&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>binary_dest_reuse_tiles(<sp/>uint32_t<sp/>in_cb_id,<sp/>uint32_t<sp/>in_tile_index,<sp/>uint32_t<sp/>dst_tile_index)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_A&lt;BroadcastType::NONE,<sp/>true,<sp/>binary_reuse_dest&gt;(in_cb_id,<sp/>in_tile_index)<sp/><sp/>));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;eltwise_binary_type,<sp/>NONE,<sp/>MATH_FIDELITY,<sp/>binary_reuse_dest,<sp/>DST_ACCUM_MODE&gt;(in_tile_index,<sp/>in_tile_index,<sp/>dst_tile_index)<sp/>));</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ckernel</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tt_metal/include/compute_kernel_api/eltwise_binary.h"/>
  </compounddef>
</doxygen>
