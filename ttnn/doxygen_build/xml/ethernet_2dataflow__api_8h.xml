<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="ethernet_2dataflow__api_8h" kind="file" language="C++">
    <compoundname>dataflow_api.h</compoundname>
    <includes local="yes">risc_common.h</includes>
    <includes local="yes">dev_msgs.h</includes>
    <includes local="yes">eth_l1_address_map.h</includes>
    <includes local="yes">tt_eth_api.h</includes>
    <includes local="yes">erisc.h</includes>
    <includes local="yes">tools/profiler/kernel_profiler.hpp</includes>
    <includes local="yes">noc_nonblocking_api.h</includes>
    <includes refid="dataflow__api_8h" local="yes">../dataflow_api.h</includes>
    <includes local="yes">tunneling.h</includes>
    <incdepgraph>
      <node id="9">
        <label>../dataflow_api.h</label>
        <link refid="dataflow__api_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tt_metal/hw/inc/ethernet/dataflow_api.h</label>
        <link refid="ethernet_2dataflow__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>circular_buffer.h</label>
      </node>
      <node id="11">
        <label>core_config.h</label>
      </node>
      <node id="18">
        <label>debug/assert.h</label>
      </node>
      <node id="13">
        <label>debug/sanitize_noc.h</label>
      </node>
      <node id="14">
        <label>debug/waypoint.h</label>
      </node>
      <node id="3">
        <label>dev_msgs.h</label>
      </node>
      <node id="6">
        <label>erisc.h</label>
      </node>
      <node id="4">
        <label>eth_l1_address_map.h</label>
      </node>
      <node id="15">
        <label>hostdevcommon/common_values.hpp</label>
      </node>
      <node id="8">
        <label>noc_nonblocking_api.h</label>
      </node>
      <node id="16">
        <label>risc_attribs.h</label>
      </node>
      <node id="2">
        <label>risc_common.h</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="17">
        <label>third_party/umd/device/tt_silicon_driver_common.hpp</label>
      </node>
      <node id="7">
        <label>tools/profiler/kernel_profiler.hpp</label>
      </node>
      <node id="5">
        <label>tt_eth_api.h</label>
      </node>
      <node id="19">
        <label>tunneling.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a9d454f81bcb8875f528a900fa9326bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eth_txq_is_busy</definition>
        <argsstring>()</argsstring>
        <name>eth_txq_is_busy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates if the ethernet transaction queue is busy ingesting a command at this moment,</para>
<para>Return value: bool: true if the queue is ingesting a command and cannot accept a new one at this specific moment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="26" column="7" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a651e015fbc27db86a39aeab1eea57958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wait_for_eth_txq_cmd_space</definition>
        <argsstring>(uint32_t wait_min=0)</argsstring>
        <name>wait_for_eth_txq_cmd_space</name>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until the ethernet transaction queue is no longer busy ingesting a command</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="39" column="7" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="39" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1afe0921cad600041ff9a1eff295697d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_noc_semaphore_wait</definition>
        <argsstring>(volatile uint32_t *sem_addr, uint32_t val, uint32_t wait_min=0)</argsstring>
        <name>eth_noc_semaphore_wait</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>sem_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits until the value of a local L1 memory address on the Tensix core executing this function becomes equal to a target value. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism. Also, see <emphasis>noc_semaphore_set</emphasis>.</para>
<para>Return value: None</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>sem_addr   </para>
</entry><entry thead="no"><para>Semaphore address in local L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..1MB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>val   </para>
</entry><entry thead="no"><para>The target value of the semaphore   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="70" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="70" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a743b107f28868db5a3af175957fd2fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_noc_semaphore_wait_min</definition>
        <argsstring>(volatile uint32_t *sem_addr, uint32_t val, uint32_t wait_min=0)</argsstring>
        <name>eth_noc_semaphore_wait_min</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>sem_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits until the value of a local L1 memory address on the Tensix core executing this function becomes equal to or greater than a target value. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism. Also, see <emphasis>noc_semaphore_set</emphasis>.</para>
<para>Return value: None</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>sem_addr   </para>
</entry><entry thead="no"><para>Semaphore address in local L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..1MB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>val   </para>
</entry><entry thead="no"><para>The target value of the semaphore   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="99" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="99" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1ae23f90aed9456576bb85b298a1ce877b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_noc_async_read_barrier</definition>
        <argsstring>()</argsstring>
        <name>eth_noc_async_read_barrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This blocking call waits for all the outstanding enqueued <emphasis>noc_async_read</emphasis> calls issued on the current Tensix core to complete. After returning from this call the <emphasis>noc_async_read</emphasis> queue will be empty for the current Tensix core.</para>
<para>Return value: None </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="122" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a9d47f0940202285a7f23982692e20f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_noc_async_write_barrier</definition>
        <argsstring>()</argsstring>
        <name>eth_noc_async_write_barrier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This blocking call waits for all the outstanding enqueued <emphasis>noc_async_write</emphasis> calls issued on the current Tensix core to complete. After returning from this call the <emphasis>noc_async_write</emphasis> queue will be empty for the current Tensix core.</para>
<para>Return value: None </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="137" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a5b57f8d14c6a15d3680d7284582a786c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_send_bytes</definition>
        <argsstring>(uint32_t src_addr, uint32_t dst_addr, uint32_t num_bytes, uint32_t num_bytes_per_send=16, uint32_t num_bytes_per_send_word_size=1)</argsstring>
        <name>eth_send_bytes</name>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send_word_size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the local ethernet core to L1 of the connected remote ethernet core. Also, see <emphasis>eth_wait_for_receiver_done</emphasis> and <emphasis>eth_wait_for_bytes</emphasis>.</para>
<para>Return value: None</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>src_addr   </para>
</entry><entry thead="no"><para>Source address in local eth core L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>dst_addr   </para>
</entry><entry thead="no"><para>Destination address in remote eth core L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes   </para>
</entry><entry thead="no"><para>Size of data transfer in bytes, must be multiple of 16   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="156" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="156" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a5cb3e75736223670aaf5dcbc23d91471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_send_bytes_over_channel_payload_only</definition>
        <argsstring>(uint32_t src_addr, uint32_t dst_addr, uint32_t num_bytes, uint32_t num_bytes_per_send=16, uint32_t num_bytes_per_send_word_size=1)</argsstring>
        <name>eth_send_bytes_over_channel_payload_only</name>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send_word_size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the local ethernet core to L1 of the connected remote ethernet core. However, this is only the first half of the sender&apos;s part of then transaction. It does not include the sending of the write completion signature to the receiver.</para>
<para>Non-blocking</para>
<para>Return value: None</para>
<para><table rows="8" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>src_addr   </para>
</entry><entry thead="no"><para>Source address in local eth core L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>dst_addr   </para>
</entry><entry thead="no"><para>Destination address in remote eth core L1 memory   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes   </para>
</entry><entry thead="no"><para>Size of data transfer in bytes, must be multiple of 16   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to use. Corresponds to   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>channels in erisc_info_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes_per_send   </para>
</entry><entry thead="no"><para>Number of bytes to send per packet   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>16..1MB   </para>
</entry><entry thead="no"><para>False    </para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes_per_send_word_size   </para>
</entry><entry thead="no"><para>num_bytes_per_send shifted right 4   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>1..256kB   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="191" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a912b2c36c968ad797b313fa3468666f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_send_bytes_over_channel_payload_only_unsafe</definition>
        <argsstring>(uint32_t src_addr, uint32_t dst_addr, uint32_t num_bytes, uint32_t num_bytes_per_send=16, uint32_t num_bytes_per_send_word_size=1)</argsstring>
        <name>eth_send_bytes_over_channel_payload_only_unsafe</name>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send_word_size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="209" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="209" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a781562a3dd147fc9d9430ce037a1e3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_send_payload_complete_signal_over_channel</definition>
        <argsstring>(uint32_t channel, uint32_t num_bytes)</argsstring>
        <name>eth_send_payload_complete_signal_over_channel</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="228" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="228" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1af8a3f69ac60c29d201771f16f6498cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_send_bytes_over_channel</definition>
        <argsstring>(uint32_t src_addr, uint32_t dst_addr, uint32_t num_bytes, uint32_t channel, uint32_t num_bytes_per_send=16, uint32_t num_bytes_per_send_word_size=1)</argsstring>
        <name>eth_send_bytes_over_channel</name>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes_per_send_word_size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="240" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="240" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1aae485db00b351232851e5e43f5cbd0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_write_remote_reg</definition>
        <argsstring>(uint32_t reg_addr, uint32_t value)</argsstring>
        <name>eth_write_remote_reg</name>
        <param>
          <type>uint32_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from the local ethernet core to a register of the connected remote ethernet core.</para>
<para>Return value: None</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>reg_addr   </para>
</entry><entry thead="no"><para>Destination address in remote eth core reg space   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0xFF000000+   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>value   </para>
</entry><entry thead="no"><para>Value to be written   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any value   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="277" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a48d73eaaa1ed9d986a96a7bef2c9531f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_for_receiver_done</definition>
        <argsstring>(uint32_t wait_min=0)</argsstring>
        <name>eth_wait_for_receiver_done</name>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits for receiver to acknowledge that all data sent with eth_send_bytes since the last reset_erisc_info call is no longer being used. Also, see <emphasis><ref refid="ethernet_2dataflow__api_8h_1af27bb42b34afb388a0994da0f2b73c54" kindref="member">eth_receiver_done()</ref></emphasis>.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="292" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="292" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a02966d06f690ca2d85533b5e6ce80809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eth_is_receiver_channel_send_acked</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>eth_is_receiver_channel_send_acked</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be sender side. Indicates to caller that the receiver has received the last payload sent, and that the local sender buffer can be cleared safely</para>
<para>Non-blocking</para>
<para>Return value: bool: true if the receiver has acked</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to check. Corresponds to   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>channels in erisc_info_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="324" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a1a37dd512972c4e57bbe6e0b198a3941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eth_is_receiver_channel_send_done</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>eth_is_receiver_channel_send_done</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be sender side. Tells caller that the receiver has both received the last payload sent, and also that it has cleared it to its consumers. If true, indicates that caller (sender) send safely send more data.</para>
<para>Non-blocking</para>
<para>Return value: bool: true if the receiver has acked and forwarded the payload.</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to check. Corresponds to   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>channels in erisc_info_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="342" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a3ff986b2dd8f65e01aca7867bb166e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_for_receiver_channel_done</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>eth_wait_for_receiver_channel_done</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be sender side. This call will block until receiver sends both levels of ack</para>
<para>Blocking</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to block on   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="358" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a18b56aac8ce0c479e1e5e1009908f7a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_receiver_done</definition>
        <argsstring>(uint32_t wait_min=0)</argsstring>
        <name>eth_wait_receiver_done</name>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be sender side. This call will block until receiver sends both levels of ack</para>
<para>Blocking</para>
<para>Return value: None</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to block on   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="384" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="384" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a5544279ed9fdd9fe6ce2f4d2315e0072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_for_bytes</definition>
        <argsstring>(uint32_t num_bytes, uint32_t wait_min=0)</argsstring>
        <name>eth_wait_for_bytes</name>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits for num_bytes of data to be sent from the remote sender ethernet core using any number of eth_send_byte. User must ensure that num_bytes is equal to the total number of bytes sent. Example 1: eth_send_bytes(32), eth_wait_for_bytes(32). Example 2: eth_send_bytes(16), eth_send_bytes(32), eth_wait_for_bytes(48).</para>
<para>Return value: None</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes   </para>
</entry><entry thead="no"><para>Size of data transfer in bytes, must be multiple of 16   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..256kB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>wait_min   </para>
</entry><entry thead="no"><para>The number of cycles to wait before performing run_routing()   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Any uint32_t value   </para>
</entry><entry thead="no"><para>False   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="410" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="410" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1af738caa9901266b6b58f0fa0b5ee779f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eth_bytes_are_available_on_channel</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>eth_bytes_are_available_on_channel</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be receiver side. This call will tell the receiver whether or not there is payload data to in the local buffer</para>
<para>Non-blocking</para>
<para>Return value: bool: True if payload data was sent (and not yet cleared) on the channel</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to check   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="435" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1adedc3100f41c4d1fca3f2ef234985bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_for_bytes_on_channel_sync_addr</definition>
        <argsstring>(uint32_t num_bytes, volatile eth_channel_sync_t *eth_channel_syncs, uint32_t wait_min=1000000)</argsstring>
        <name>eth_wait_for_bytes_on_channel_sync_addr</name>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>volatile eth_channel_sync_t *</type>
          <declname>eth_channel_syncs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>1000000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be receiver side. This call block until there is payload data in the local buffer associated with the channel</para>
<para>Blocking</para>
<para>Return value: None</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>num_bytes   </para>
</entry><entry thead="no"><para>Number of bytes to receive before returning to caller   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..1MB   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to check   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="453" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="453" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1aa0026b0696cbbada2f46119c30c850af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_for_bytes_on_channel</definition>
        <argsstring>(uint32_t num_bytes, uint8_t channel, uint32_t wait_min=1000000)</argsstring>
        <name>eth_wait_for_bytes_on_channel</name>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wait_min</declname>
          <defval>1000000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="473" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1af27bb42b34afb388a0994da0f2b73c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_receiver_done</definition>
        <argsstring>()</argsstring>
        <name>eth_receiver_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous call from receiver ethernet core to tell remote sender ethernet core that data sent via eth_send_bytes is no longer being used. Also, see <emphasis>eth_wait_for_receiver_done</emphasis>. Sends over channel 0</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------------------------<mdash/>|------------------------------------------------------<mdash/>|-------<mdash/>|----------<mdash/>|-------<mdash/>| </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="488" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="488" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1ae1583ac42a8f9f11794a096506d954a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_eth_receiver_channel_done</definition>
        <argsstring>(volatile eth_channel_sync_t *channel_sync)</argsstring>
        <name>send_eth_receiver_channel_done</name>
        <param>
          <type>volatile eth_channel_sync_t *</type>
          <declname>channel_sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be receiver side. This call sends the second (and first) level ack to sender, indicating that the receiver flushed its buffer and is able to accept more data</para>
<para>Non-nlocking</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to ack   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="511" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="511" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1acd35fe4c1c09f60fc53d21a4bccbb71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_receiver_channel_done</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>eth_receiver_channel_done</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="522" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a32a1ef34f66d78ba3934c321595ff40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_clear_sender_channel_ack</definition>
        <argsstring>(uint32_t channel)</argsstring>
        <name>eth_clear_sender_channel_ack</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be sender side. This clears the local first level ack field. Useful when resetting on sender side in preparation for next send</para>
<para>Non-blocking</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to check   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="540" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a4ff4de9ce3be69c64f017b1b1facc090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_receiver_channel_ack</definition>
        <argsstring>(uint32_t channel, uint32_t eth_transaction_ack_word_addr)</argsstring>
        <name>eth_receiver_channel_ack</name>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eth_transaction_ack_word_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Caller is expected to be receiver side. This sends the first level ack to sender, indicating that the last payload sent on the channel was received and that sender is free to clear its buffer</para>
<para>Non-blocking</para>
<para>Return value: None</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>channel   </para>
</entry><entry thead="no"><para>Which transaction channel to ack   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0..7   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>eth_transaction_ack_word_addr   </para>
</entry><entry thead="no"><para>Address of 16B memory (also 16B aligned) segment with   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>L1 address   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>to send the eth_channel_sync_t to sender for first level   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>L1 address   </para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>ack. Must <emphasis>not</emphasis> alias erisc_info-&gt;channels[channel]   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>L1 address   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="561" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="561" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a5d550f7bf6d486b386ddea8c81ad0a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_receiver_acknowledge</definition>
        <argsstring>(uint8_t channel=0)</argsstring>
        <name>eth_receiver_acknowledge</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="587" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="587" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="ethernet_2dataflow__api_8h_1a4f1763214451d751d920191f201b2e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eth_wait_receiver_acknowledge</definition>
        <argsstring>(uint8_t channel=0)</argsstring>
        <name>eth_wait_receiver_acknowledge</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/ethernet/dataflow_api.h" line="597" column="6" bodyfile="tt_metal/hw/inc/ethernet/dataflow_api.h" bodystart="597" bodyend="601"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>©<sp/>2023<sp/>Tenstorrent<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;risc_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dev_msgs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eth_l1_address_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;risc_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tt_eth_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;erisc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/profiler/kernel_profiler.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;noc_nonblocking_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../dataflow_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tunneling.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="ethernet_2dataflow__api_8h_1a9d454f81bcb8875f528a900fa9326bc6" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a9d454f81bcb8875f528a900fa9326bc6" kindref="member">eth_txq_is_busy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_::eth_txq_is_busy(0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="ethernet_2dataflow__api_8h_1a651e015fbc27db86a39aeab1eea57958" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a651e015fbc27db86a39aeab1eea57958" kindref="member">wait_for_eth_txq_cmd_space</ref>(<sp/>uint32_t<sp/>wait_min<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="ethernet_2dataflow__api_8h_1a9d454f81bcb8875f528a900fa9326bc6" kindref="member">eth_txq_is_busy</ref>())</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="70" refid="ethernet_2dataflow__api_8h_1afe0921cad600041ff9a1eff295697d3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1afe0921cad600041ff9a1eff295697d3b" kindref="member">eth_noc_semaphore_wait</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>uint32_t*<sp/>sem_addr,<sp/>uint32_t<sp/>val,<sp/>uint32_t<sp/>wait_min=0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*sem_addr)<sp/>!=<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>++;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="99" refid="ethernet_2dataflow__api_8h_1a743b107f28868db5a3af175957fd2fa2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a743b107f28868db5a3af175957fd2fa2" kindref="member">eth_noc_semaphore_wait_min</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>uint32_t*<sp/>sem_addr,<sp/>uint32_t<sp/>val,<sp/>uint32_t<sp/>wait_min<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*sem_addr)<sp/>&lt;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>++;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="122" refid="ethernet_2dataflow__api_8h_1ae23f90aed9456576bb85b298a1ce877b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1ae23f90aed9456576bb85b298a1ce877b" kindref="member">eth_noc_async_read_barrier</ref>()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_reads_flushed(<ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="137" refid="ethernet_2dataflow__api_8h_1a9d47f0940202285a7f23982692e20f59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a9d47f0940202285a7f23982692e20f59" kindref="member">eth_noc_async_write_barrier</ref>()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_nonposted_writes_flushed(<ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>))<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="156" refid="ethernet_2dataflow__api_8h_1a5b57f8d14c6a15d3680d7284582a786c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a5b57f8d14c6a15d3680d7284582a786c" kindref="member">eth_send_bytes</ref>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_addr,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send_word_size<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes_sent<sp/>&lt;<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>((num_bytes_sent<sp/>+<sp/>src_addr)<sp/>&gt;&gt;<sp/>4),<sp/>((num_bytes_sent<sp/>+<sp/>dst_addr)<sp/>&gt;&gt;<sp/>4),<sp/>num_bytes_per_send_word_size);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes_sent<sp/>+=<sp/>num_bytes_per_send;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[0].bytes_sent<sp/>+=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="191" refid="ethernet_2dataflow__api_8h_1a5cb3e75736223670aaf5dcbc23d91471" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a5cb3e75736223670aaf5dcbc23d91471" kindref="member">eth_send_bytes_over_channel_payload_only</ref>(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_addr,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send_word_size<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes_sent<sp/>&lt;<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>((num_bytes_sent<sp/>+<sp/>src_addr)<sp/>&gt;&gt;<sp/>4),<sp/>((num_bytes_sent<sp/>+<sp/>dst_addr)<sp/>&gt;&gt;<sp/>4),<sp/>num_bytes_per_send_word_size);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes_sent<sp/>+=<sp/>num_bytes_per_send;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>the<sp/>unsafe<sp/>variant<sp/>of<sp/>eth_send_packet<sp/>under<sp/>the<sp/>hood<sp/>which<sp/>is<sp/>guaranteed<sp/>not<sp/>to<sp/>context<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>this<sp/>for<sp/>code<sp/>size<sp/>reasons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="209" refid="ethernet_2dataflow__api_8h_1a912b2c36c968ad797b313fa3468666f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a912b2c36c968ad797b313fa3468666f9" kindref="member">eth_send_bytes_over_channel_payload_only_unsafe</ref>(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_addr,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send_word_size<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes_sent<sp/>&lt;<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal_::eth_send_packet_unsafe(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>((num_bytes_sent<sp/>+<sp/>src_addr)<sp/>&gt;&gt;<sp/>4),<sp/>((num_bytes_sent<sp/>+<sp/>dst_addr)<sp/>&gt;&gt;<sp/>4),<sp/>num_bytes_per_send_word_size);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes_sent<sp/>+=<sp/>num_bytes_per_send;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>Sends<sp/>the<sp/>write<sp/>completion<sp/>signal<sp/>to<sp/>the<sp/>receiver<sp/>ethernet<sp/>core,<sp/>for<sp/>transfers<sp/>where<sp/>the<sp/>payload<sp/>was<sp/>already<sp/>sent.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>The<sp/>second<sp/>half<sp/>of<sp/>a<sp/>full<sp/>ethernet<sp/>send.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="228" refid="ethernet_2dataflow__api_8h_1a781562a3dd147fc9d9430ce037a1e3da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a781562a3dd147fc9d9430ce037a1e3da" kindref="member">eth_send_payload_complete_signal_over_channel</ref>(uint32_t<sp/>channel,<sp/>uint32_t<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].bytes_sent<sp/>=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].receiver_ack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].bytes_sent)))<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="240" refid="ethernet_2dataflow__api_8h_1af8a3f69ac60c29d201771f16f6498cda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1af8a3f69ac60c29d201771f16f6498cda" kindref="member">eth_send_bytes_over_channel</ref>(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_addr,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>channel,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_per_send_word_size<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes_sent<sp/>&lt;<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>((num_bytes_sent<sp/>+<sp/>src_addr)<sp/>&gt;&gt;<sp/>4),<sp/>((num_bytes_sent<sp/>+<sp/>dst_addr)<sp/>&gt;&gt;<sp/>4),<sp/>num_bytes_per_send_word_size);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes_sent<sp/>+=<sp/>num_bytes_per_send;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].bytes_sent<sp/>=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].receiver_ack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].bytes_sent)))<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="277" refid="ethernet_2dataflow__api_8h_1aae485db00b351232851e5e43f5cbd0f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1aae485db00b351232851e5e43f5cbd0f8" kindref="member">eth_write_remote_reg</ref>(uint32_t<sp/>reg_addr,<sp/>uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_write_remote_reg(0,<sp/>reg_addr,<sp/>value);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="292" refid="ethernet_2dataflow__api_8h_1a48d73eaaa1ed9d986a96a7bef2c9531f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a48d73eaaa1ed9d986a96a7bef2c9531f" kindref="member">eth_wait_for_receiver_done</ref>(uint32_t<sp/>wait_min<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[0].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[0].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(erisc_info-&gt;channels[0].bytes_sent<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="324" refid="ethernet_2dataflow__api_8h_1a02966d06f690ca2d85533b5e6ce80809" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a02966d06f690ca2d85533b5e6ce80809" kindref="member">eth_is_receiver_channel_send_acked</ref>(uint32_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>erisc_info-&gt;channels[channel].receiver_ack<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="342" refid="ethernet_2dataflow__api_8h_1a1a37dd512972c4e57bbe6e0b198a3941" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a1a37dd512972c4e57bbe6e0b198a3941" kindref="member">eth_is_receiver_channel_send_done</ref>(uint32_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>erisc_info-&gt;channels[channel].bytes_sent<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="358" refid="ethernet_2dataflow__api_8h_1a3ff986b2dd8f65e01aca7867bb166e96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a3ff986b2dd8f65e01aca7867bb166e96" kindref="member">eth_wait_for_receiver_channel_done</ref>(uint32_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>max<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="ethernet_2dataflow__api_8h_1a1a37dd512972c4e57bbe6e0b198a3941" kindref="member">eth_is_receiver_channel_send_done</ref>(channel))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="384" refid="ethernet_2dataflow__api_8h_1a18b56aac8ce0c479e1e5e1009908f7a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a18b56aac8ce0c479e1e5e1009908f7a2" kindref="member">eth_wait_receiver_done</ref>(uint32_t<sp/>wait_min<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(erisc_info-&gt;channels[0].bytes_sent<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="410" refid="ethernet_2dataflow__api_8h_1a5544279ed9fdd9fe6ce2f4d2315e0072" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a5544279ed9fdd9fe6ce2f4d2315e0072" kindref="member">eth_wait_for_bytes</ref>(uint32_t<sp/>num_bytes,<sp/>uint32_t<sp/>wait_min<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(erisc_info-&gt;channels[0].bytes_sent<sp/>!=<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="435" refid="ethernet_2dataflow__api_8h_1af738caa9901266b6b58f0fa0b5ee779f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1af738caa9901266b6b58f0fa0b5ee779f" kindref="member">eth_bytes_are_available_on_channel</ref>(uint8_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>erisc_info-&gt;channels[channel].bytes_sent<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="453" refid="ethernet_2dataflow__api_8h_1adedc3100f41c4d1fca3f2ef234985bda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1adedc3100f41c4d1fca3f2ef234985bda" kindref="member">eth_wait_for_bytes_on_channel_sync_addr</ref>(uint32_t<sp/>num_bytes,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>eth_channel_sync_t*<sp/>eth_channel_syncs,<sp/>uint32_t<sp/>wait_min<sp/>=<sp/>1000000)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes_sent<sp/>=<sp/>eth_channel_syncs-&gt;bytes_sent;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bytes_sent<sp/>!=<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>received_this_iter<sp/>=<sp/>eth_channel_syncs-&gt;bytes_sent;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_this_iter<sp/>!=<sp/>num_bytes_sent)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>currently<sp/>in<sp/>the<sp/>process<sp/>of<sp/>receiving<sp/>data<sp/>on<sp/>this<sp/>channel,<sp/>so<sp/>we<sp/>just<sp/>just<sp/>wait<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>longer<sp/>instead<sp/>of<sp/>initiating<sp/>a<sp/>context<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes_sent<sp/>=<sp/>received_this_iter;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>wait_min)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="473" refid="ethernet_2dataflow__api_8h_1aa0026b0696cbbada2f46119c30c850af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1aa0026b0696cbbada2f46119c30c850af" kindref="member">eth_wait_for_bytes_on_channel</ref>(uint32_t<sp/>num_bytes,<sp/>uint8_t<sp/>channel,<sp/>uint32_t<sp/>wait_min<sp/>=<sp/>1000000)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ethernet_2dataflow__api_8h_1adedc3100f41c4d1fca3f2ef234985bda" kindref="member">eth_wait_for_bytes_on_channel_sync_addr</ref>(num_bytes,<sp/>&amp;(erisc_info-&gt;channels[channel]),wait_min);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="488" refid="ethernet_2dataflow__api_8h_1af27bb42b34afb388a0994da0f2b73c54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1af27bb42b34afb388a0994da0f2b73c54" kindref="member">eth_receiver_done</ref>()<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[0].bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[0].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[0].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="511" refid="ethernet_2dataflow__api_8h_1ae1583ac42a8f9f11794a096506d954a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1ae1583ac42a8f9f11794a096506d954a6" kindref="member">send_eth_receiver_channel_done</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>eth_channel_sync_t<sp/>*channel_sync)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>channel_sync-&gt;bytes_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>channel_sync-&gt;receiver_ack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(channel_sync-&gt;bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(channel_sync-&gt;bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="522" refid="ethernet_2dataflow__api_8h_1acd35fe4c1c09f60fc53d21a4bccbb71e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1acd35fe4c1c09f60fc53d21a4bccbb71e" kindref="member">eth_receiver_channel_done</ref>(uint32_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ethernet_2dataflow__api_8h_1ae1583ac42a8f9f11794a096506d954a6" kindref="member">send_eth_receiver_channel_done</ref>(&amp;(erisc_info-&gt;channels[channel]));</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="540" refid="ethernet_2dataflow__api_8h_1a32a1ef34f66d78ba3934c321595ff40d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a32a1ef34f66d78ba3934c321595ff40d" kindref="member">eth_clear_sender_channel_ack</ref>(uint32_t<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].receiver_ack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="561" refid="ethernet_2dataflow__api_8h_1a4ff4de9ce3be69c64f017b1b1facc090" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a4ff4de9ce3be69c64f017b1b1facc090" kindref="member">eth_receiver_channel_ack</ref>(uint32_t<sp/>channel,<sp/>uint32_t<sp/>eth_transaction_ack_word_addr)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(channel<sp/>&lt;<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].receiver_ack<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eth_transaction_ack_word_addr)[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">volatile<sp/></highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eth_transaction_ack_word_addr)[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>alias<sp/>the<sp/>erisc_info<sp/>eth_channel_sync_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(eth_transaction_ack_word_addr<sp/>!=<sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].receiver_ack)))<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eth_transaction_ack_word_addr<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].receiver_ack)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>Initiates<sp/>an<sp/>asynchronous<sp/>call<sp/>from<sp/>receiver<sp/>ethernet<sp/>core<sp/>to<sp/>tell<sp/>remote<sp/>sender<sp/>ethernet<sp/>core<sp/>that<sp/>data<sp/>sent</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>via<sp/>eth_send_bytes<sp/>has<sp/>been<sp/>received.<sp/>Also,<sp/>see<sp/>\a<sp/>eth_wait_for_receiver_done</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>Return<sp/>value:<sp/>None</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/>|<sp/>Argument<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Type<sp/><sp/><sp/><sp/><sp/>|<sp/>Valid<sp/>Range<sp/>|<sp/>Required<sp/>|</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>|-------------------|---------------------------------------------------------|----------|-------------|----------|</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="587" refid="ethernet_2dataflow__api_8h_1a5d550f7bf6d486b386ddea8c81ad0a82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a5d550f7bf6d486b386ddea8c81ad0a82" kindref="member">eth_receiver_acknowledge</ref>(uint8_t<sp/>channel<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>erisc_info-&gt;channels[channel].bytes_sent<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_::eth_send_packet(</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(&amp;(erisc_info-&gt;channels[channel].bytes_sent)))<sp/>&gt;&gt;<sp/>4,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="597" refid="ethernet_2dataflow__api_8h_1a4f1763214451d751d920191f201b2e1f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ethernet_2dataflow__api_8h_1a4f1763214451d751d920191f201b2e1f" kindref="member">eth_wait_receiver_acknowledge</ref>(uint8_t<sp/>channel<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(erisc_info-&gt;channels[channel].bytes_sent<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_routing();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tt_metal/hw/inc/ethernet/dataflow_api.h"/>
  </compounddef>
</doxygen>
