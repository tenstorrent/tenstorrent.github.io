<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespacett_1_1tt__metal_1_1v1" kind="namespace" language="C++">
    <compoundname>tt::tt_metal::v1</compoundname>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" prot="public">tt::tt_metal::v1::BufferHandle</innerclass>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" prot="public">tt::tt_metal::v1::CircularBufferHandle</innerclass>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" prot="public">tt::tt_metal::v1::CommandQueueHandle</innerclass>
    <innerclass refid="structtt_1_1tt__metal_1_1v1_1_1CreateDeviceOptions" prot="public">tt::tt_metal::v1::CreateDeviceOptions</innerclass>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1EventHandle" prot="public">tt::tt_metal::v1::EventHandle</innerclass>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" prot="public">tt::tt_metal::v1::KernelHandle</innerclass>
    <innerclass refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" prot="public">tt::tt_metal::v1::TraceHandle</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" prot="public" static="no">
        <type>v0::Program</type>
        <definition>using tt::tt_metal::v1::ProgramHandle = typedef v0::Program</definition>
        <argsstring></argsstring>
        <name>ProgramHandle</name>
        <qualifiedname>tt::tt_metal::v1::ProgramHandle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/types.hpp" line="13" column="1" bodyfile="tt_metal/include/tt_metal/types.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacett_1_1tt__metal_1_1v1_1a41efe832ede2a68be6a45168f51dd5ae" prot="public" static="no">
        <type>tt::stl::Span&lt; const std::uint32_t &gt;</type>
        <definition>using tt::tt_metal::v1::RuntimeArgs = typedef tt::stl::Span&lt;const std::uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>RuntimeArgs</name>
        <qualifiedname>tt::tt_metal::v1::RuntimeArgs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/types.hpp" line="93" column="1" bodyfile="tt_metal/include/tt_metal/types.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a4ff4aaaef152608a56467ac85d05a8d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
        <definition>BufferHandle tt::tt_metal::v1::CreateBuffer</definition>
        <argsstring>(InterleavedBufferConfig config)</argsstring>
        <name>CreateBuffer</name>
        <qualifiedname>tt::tt_metal::v1::CreateBuffer</qualifiedname>
        <param>
          <type>InterleavedBufferConfig</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Allocates an interleaved DRAM or L1 buffer on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration for the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Buffer handle to the allocated buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/buffer.hpp" line="22" column="14" declfile="tt_metal/include/tt_metal/buffer.hpp" declline="22" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1ab8878e4e772b19708f2ffb47aef88b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::DeallocateBuffer</definition>
        <argsstring>(BufferHandle buffer)</argsstring>
        <name>DeallocateBuffer</name>
        <qualifiedname>tt::tt_metal::v1::DeallocateBuffer</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Deallocates a buffer from the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to deallocate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/buffer.hpp" line="29" column="6" declfile="tt_metal/include/tt_metal/buffer.hpp" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a9fdc03261b0164072b9e30fad9e36099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::WriteToBuffer</definition>
        <argsstring>(BufferHandle buffer, stl::Span&lt; const std::byte &gt; host_buffer)</argsstring>
        <name>WriteToBuffer</name>
        <qualifiedname>tt::tt_metal::v1::WriteToBuffer</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stl::Span&lt; const std::byte &gt;</type>
          <declname>host_buffer</declname>
        </param>
        <briefdescription>
<para>Copies data from a host buffer into the specified device buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Host buffer containing data to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/buffer.hpp" line="37" column="6" declfile="tt_metal/include/tt_metal/buffer.hpp" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a549dc0b0bd173491b5b67ec9efa599b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::ReadFromBuffer</definition>
        <argsstring>(BufferHandle buffer, stl::Span&lt; std::byte &gt; host_buffer, bool shard_order=false)</argsstring>
        <name>ReadFromBuffer</name>
        <qualifiedname>tt::tt_metal::v1::ReadFromBuffer</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stl::Span&lt; std::byte &gt;</type>
          <declname>host_buffer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shard_order</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copies data from a device buffer into a host buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to read data from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Host buffer to copy data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shard_order</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, reads data in shard order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/buffer.hpp" line="46" column="6" declfile="tt_metal/include/tt_metal/buffer.hpp" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a44af81fe6c86b0d4f2e3c5cd414cf836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::ReadFromShard</definition>
        <argsstring>(BufferHandle buffer, stl::Span&lt; std::byte &gt; host_buffer, std::uint32_t core_id)</argsstring>
        <name>ReadFromShard</name>
        <qualifiedname>tt::tt_metal::v1::ReadFromShard</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stl::Span&lt; std::byte &gt;</type>
          <declname>host_buffer</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>core_id</declname>
        </param>
        <briefdescription>
<para>Copies data from a specific shard of a device buffer into a host buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to read data from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Host buffer to copy data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the core shard to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/buffer.hpp" line="55" column="6" declfile="tt_metal/include/tt_metal/buffer.hpp" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a104050cb8afe039d4b233e5fde691377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
        <definition>CommandQueueHandle tt::tt_metal::v1::GetCommandQueue</definition>
        <argsstring>(DeviceHandle device, std::uint8_t cq_id)</argsstring>
        <name>GetCommandQueue</name>
        <qualifiedname>tt::tt_metal::v1::GetCommandQueue</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>cq_id</declname>
        </param>
        <briefdescription>
<para>Retrieves a command queue from the device for a given queue ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CommandQueue handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="24" column="20" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="24" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a1d776f4c482bfa8ff8d5ce8950a02f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
        <definition>CommandQueueHandle tt::tt_metal::v1::GetDefaultCommandQueue</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetDefaultCommandQueue</name>
        <qualifiedname>tt::tt_metal::v1::GetDefaultCommandQueue</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the default command queue for the given device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CommandQueue handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="32" column="20" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="32" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a3de050e4a431b4dbcbd8e29f2ccd0fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnqueueReadBuffer</definition>
        <argsstring>(CommandQueueHandle cq, BufferHandle buffer, std::byte *dst, bool blocking)</argsstring>
        <name>EnqueueReadBuffer</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueReadBuffer</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Reads a buffer from the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue used to dispatch the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The device buffer to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the destination memory where data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation is blocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="42" column="6" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a175d287310173ef03a2e6bd2b1b0cfa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnqueueWriteBuffer</definition>
        <argsstring>(CommandQueueHandle cq, BufferHandle buffer, const std::byte *src, bool blocking)</argsstring>
        <name>EnqueueWriteBuffer</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueWriteBuffer</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Writes data to a buffer on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue used to dispatch the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The device buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source data vector to write to the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation is blocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="56" column="6" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a2e9787d7e5eaaeb6b838a9c6889c5626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnqueueProgram</definition>
        <argsstring>(CommandQueueHandle cq, ProgramHandle &amp;program, bool blocking)</argsstring>
        <name>EnqueueProgram</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueProgram</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Writes a program to the device and launches it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue used to dispatch the command. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to execute on the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation is blocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="70" column="6" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a4749871772050bc38af4887d3543328b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::Finish</definition>
        <argsstring>(CommandQueueHandle cq, tt::stl::Span&lt; const SubDeviceId &gt; sub_device_ids={})</argsstring>
        <name>Finish</name>
        <qualifiedname>tt::tt_metal::v1::Finish</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <param>
          <type>tt::stl::Span&lt; const SubDeviceId &gt;</type>
          <declname>sub_device_ids</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Blocks until all previously dispatched commands on the device have completed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue to wait on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sub_device_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-device ids to wait for completion on. If empty, waits for all sub-devices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="78" column="6" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a6688cd88bb6474148452821a821e8730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::SetLazyCommandQueueMode</definition>
        <argsstring>(bool lazy)</argsstring>
        <name>SetLazyCommandQueueMode</name>
        <qualifiedname>tt::tt_metal::v1::SetLazyCommandQueueMode</qualifiedname>
        <param>
          <type>bool</type>
          <declname>lazy</declname>
        </param>
        <briefdescription>
<para>Sets the command queue mode to lazy or immediate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lazy</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, sets the command queue to lazy mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="86" column="6" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aec81775023e516ef4b34eb5e973da3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DeviceHandle</type>
        <definition>DeviceHandle tt::tt_metal::v1::GetDevice</definition>
        <argsstring>(CommandQueueHandle cq)</argsstring>
        <name>GetDevice</name>
        <qualifiedname>tt::tt_metal::v1::GetDevice</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <briefdescription>
<para>Retrieves the device associated with the command queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle associated with the command queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="95" column="14" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="95" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a8f206a4436d4dd2b00feb80e362759a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t tt::tt_metal::v1::GetId</definition>
        <argsstring>(CommandQueueHandle cq)</argsstring>
        <name>GetId</name>
        <qualifiedname>tt::tt_metal::v1::GetId</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <briefdescription>
<para>Retrieves the ID of the command queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of the command queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/command_queue.hpp" line="103" column="14" declfile="tt_metal/include/tt_metal/command_queue.hpp" declline="103" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1ad490d6283121ce887c6209a0ca28265d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t tt::tt_metal::v1::GetNumAvailableDevices</definition>
        <argsstring>()</argsstring>
        <name>GetNumAvailableDevices</name>
        <qualifiedname>tt::tt_metal::v1::GetNumAvailableDevices</qualifiedname>
        <briefdescription>
<para>Returns the number of Tenstorrent devices that can be targeted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size_t representing the number of available devices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="25" column="13" declfile="tt_metal/include/tt_metal/device.hpp" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aea09ea2671460caa9fa47b65c8490ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t tt::tt_metal::v1::GetNumPCIeDevices</definition>
        <argsstring>()</argsstring>
        <name>GetNumPCIeDevices</name>
        <qualifiedname>tt::tt_metal::v1::GetNumPCIeDevices</qualifiedname>
        <briefdescription>
<para>Returns the number of Tenstorrent devices connected via PCIe. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size_t representing the number of PCIe devices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="32" column="13" declfile="tt_metal/include/tt_metal/device.hpp" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a05ecee1b9528084c6e7d4c3cf371f047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>chip_id_t</type>
        <definition>chip_id_t tt::tt_metal::v1::GetPCIeDeviceID</definition>
        <argsstring>(chip_id_t device_id)</argsstring>
        <name>GetPCIeDeviceID</name>
        <qualifiedname>tt::tt_metal::v1::GetPCIeDeviceID</qualifiedname>
        <param>
          <type>chip_id_t</type>
          <declname>device_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the PCIe device ID for a given device ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Chip ID of the PCIe device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="40" column="11" declfile="tt_metal/include/tt_metal/device.hpp" declline="40" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a4cd4414bf13ee2acb9b2c6b8c546ee6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DeviceHandle</type>
        <definition>DeviceHandle tt::tt_metal::v1::CreateDevice</definition>
        <argsstring>(chip_id_t device_id, CreateDeviceOptions options={})</argsstring>
        <name>CreateDevice</name>
        <qualifiedname>tt::tt_metal::v1::CreateDevice</qualifiedname>
        <param>
          <type>chip_id_t</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type><ref refid="structtt_1_1tt__metal_1_1v1_1_1CreateDeviceOptions" kindref="compound">CreateDeviceOptions</ref></type>
          <declname>options</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Instantiates a Device object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameter for requested device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device handle to the created device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="74" column="14" declfile="tt_metal/include/tt_metal/device.hpp" declline="74" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a2631b7757fe06ad7c10b8ba599b1e074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tt::tt_metal::v1::CloseDevice</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>CloseDevice</name>
        <qualifiedname>tt::tt_metal::v1::CloseDevice</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Resets and closes the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the device to close. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the device was successfully closed; otherwise, false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="82" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a7d62fcb4cb9f38f4bb66ac7ec545dd1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::DeallocateBuffers</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>DeallocateBuffers</name>
        <qualifiedname>tt::tt_metal::v1::DeallocateBuffers</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Deallocates all buffers on the device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="87" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a6af2edef85ff9e04ef2a45eda2148f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::DumpDeviceProfileResults</definition>
        <argsstring>(DeviceHandle device, const CoreRangeSet &amp;worker_cores, bool last_dump=false)</argsstring>
        <name>DumpDeviceProfileResults</name>
        <qualifiedname>tt::tt_metal::v1::DumpDeviceProfileResults</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>worker_cores</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>last_dump</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dumps device-side profiler data to a CSV log. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device holding the program being profiled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker_cores</parametername>
</parameternamelist>
<parameterdescription>
<para>CoreRangeSet of worker cores being profiled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_dump</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, indicates the last dump before process termination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="96" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1acd0244ed7bf2507b8299a555c2bbe3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH</type>
        <definition>ARCH tt::tt_metal::v1::GetArch</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetArch</name>
        <qualifiedname>tt::tt_metal::v1::GetArch</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the architecture of the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ARCH representing the device architecture. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="104" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aecef2596d64d30b530d2013d69ee31c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>chip_id_t</type>
        <definition>chip_id_t tt::tt_metal::v1::GetId</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetId</name>
        <qualifiedname>tt::tt_metal::v1::GetId</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the ID of the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Chip ID of the device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="112" column="11" declfile="tt_metal/include/tt_metal/device.hpp" declline="112" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a6f8191bd3eecb0dde06682e0beee93e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tt::tt_metal::v1::GetNumDramChannels</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetNumDramChannels</name>
        <qualifiedname>tt::tt_metal::v1::GetNumDramChannels</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the number of DRAM channels on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of DRAM channels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="120" column="5" declfile="tt_metal/include/tt_metal/device.hpp" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a868592eea2fb3cd50e4de99591b1812e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t tt::tt_metal::v1::GetL1SizePerCore</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetL1SizePerCore</name>
        <qualifiedname>tt::tt_metal::v1::GetL1SizePerCore</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the available L1 size per worker core on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L1 size per core in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="128" column="15" declfile="tt_metal/include/tt_metal/device.hpp" declline="128" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a60255a3c8d626d836533ba15f6531aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CoreCoord</type>
        <definition>CoreCoord tt::tt_metal::v1::GetComputeWithStorageGridSize</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetComputeWithStorageGridSize</name>
        <qualifiedname>tt::tt_metal::v1::GetComputeWithStorageGridSize</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Computes the storage grid size for the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CoreCoord representing the storage grid size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="136" column="11" declfile="tt_metal/include/tt_metal/device.hpp" declline="136" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a41433cff493160e71b15c5d51e8898a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CoreCoord</type>
        <definition>CoreCoord tt::tt_metal::v1::GetDramGridSize</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetDramGridSize</name>
        <qualifiedname>tt::tt_metal::v1::GetDramGridSize</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the DRAM grid size for the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CoreCoord representing the DRAM grid size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="144" column="11" declfile="tt_metal/include/tt_metal/device.hpp" declline="144" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a987aad0700d6d5b2b80a48a2cb80bb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnableProgramCache</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>EnableProgramCache</name>
        <qualifiedname>tt::tt_metal::v1::EnableProgramCache</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Enables the program cache on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="151" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a52a74fef1f54b84399e622a704af37e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::DisableAndClearProgramCache</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>DisableAndClearProgramCache</name>
        <qualifiedname>tt::tt_metal::v1::DisableAndClearProgramCache</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Disables and clears the program cache on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to modify. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="158" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a0f9295aee290efd2c2330317353546c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::PushWork</definition>
        <argsstring>(DeviceHandle device, std::function&lt; void()&gt; work, bool blocking=false)</argsstring>
        <name>PushWork</name>
        <qualifiedname>tt::tt_metal::v1::PushWork</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>work</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Pushes a work function onto the device&apos;s work queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to which the work will be pushed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para>The work function to execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation should be blocking (default: false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="167" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a944a8406570b0998bcc7f92c4e3a352f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::Synchronize</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>Synchronize</name>
        <qualifiedname>tt::tt_metal::v1::Synchronize</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Synchronizes operations on the given device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to synchronize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="174" column="6" declfile="tt_metal/include/tt_metal/device.hpp" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1af5eb41116f1ba1dc14f8e74f11f47452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; CoreCoord &gt;</type>
        <definition>std::vector&lt; CoreCoord &gt; tt::tt_metal::v1::GetEthernetSockets</definition>
        <argsstring>(DeviceHandle device, chip_id_t connected_chip_id)</argsstring>
        <name>GetEthernetSockets</name>
        <qualifiedname>tt::tt_metal::v1::GetEthernetSockets</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>chip_id_t</type>
          <declname>connected_chip_id</declname>
        </param>
        <briefdescription>
<para>Retrieves a list of Ethernet socket coordinates connected to a specific chip ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_chip_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The connected chip ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of CoreCoord representing Ethernet socket coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="183" column="13" declfile="tt_metal/include/tt_metal/device.hpp" declline="183" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a8abc4ac0e93f258cec1908730e4a1622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t tt::tt_metal::v1::GetNumBanks</definition>
        <argsstring>(DeviceHandle device, BufferType buffer_type)</argsstring>
        <name>GetNumBanks</name>
        <qualifiedname>tt::tt_metal::v1::GetNumBanks</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>BufferType</type>
          <declname>buffer_type</declname>
        </param>
        <briefdescription>
<para>Returns the number of banks for a specific buffer type on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of banks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="192" column="15" declfile="tt_metal/include/tt_metal/device.hpp" declline="192" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a17d8dafe30fab56e5ff58b30e3e3629c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t tt::tt_metal::v1::GetBankOffset</definition>
        <argsstring>(DeviceHandle device, BufferType buffer_type, std::uint32_t bank_id)</argsstring>
        <name>GetBankOffset</name>
        <qualifiedname>tt::tt_metal::v1::GetBankOffset</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>BufferType</type>
          <declname>buffer_type</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>bank_id</declname>
        </param>
        <briefdescription>
<para>Computes the offset of a specific bank for a buffer type on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bank_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the bank. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Offset of the bank. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="202" column="14" declfile="tt_metal/include/tt_metal/device.hpp" declline="202" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aebcaa64de792f41f8f88d66192e93824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stl::Span&lt; const std::uint32_t &gt;</type>
        <definition>stl::Span&lt; const std::uint32_t &gt; tt::tt_metal::v1::BankIdsFromLogicalCore</definition>
        <argsstring>(DeviceHandle device, BufferType buffer_type, CoreCoord logical_core)</argsstring>
        <name>BankIdsFromLogicalCore</name>
        <qualifiedname>tt::tt_metal::v1::BankIdsFromLogicalCore</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <param>
          <type>BufferType</type>
          <declname>buffer_type</declname>
        </param>
        <param>
          <type>CoreCoord</type>
          <declname>logical_core</declname>
        </param>
        <briefdescription>
<para>Retrieves bank IDs associated with a logical core for a given buffer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logical_core</parametername>
</parameternamelist>
<parameterdescription>
<para>The logical core coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>span of const bank IDs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="212" column="11" declfile="tt_metal/include/tt_metal/device.hpp" declline="212" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1afcadd9379349203f6344281fec38c109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tt::tt_metal::v1::GetSfpuEps</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetSfpuEps</name>
        <qualifiedname>tt::tt_metal::v1::GetSfpuEps</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the machine epsilon for the SFPU on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SFPU machine epsilon. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="221" column="7" declfile="tt_metal/include/tt_metal/device.hpp" declline="221" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a9b48db93c5e56377e08242bc2ea406d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tt::tt_metal::v1::GetSfpuNan</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetSfpuNan</name>
        <qualifiedname>tt::tt_metal::v1::GetSfpuNan</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the representation of NaN for the SFPU on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SFPU NaN value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="229" column="7" declfile="tt_metal/include/tt_metal/device.hpp" declline="229" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a8527a71d31e9903b85c772747b68b192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tt::tt_metal::v1::GetSfpuInf</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetSfpuInf</name>
        <qualifiedname>tt::tt_metal::v1::GetSfpuInf</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the representation of infinity for the SFPU on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SFPU infinity value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="237" column="7" declfile="tt_metal/include/tt_metal/device.hpp" declline="237" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a9cfd296d42fffa2b911d130116273cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>WorkExecutorMode</type>
        <definition>WorkExecutorMode tt::tt_metal::v1::GetWorkerMode</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetWorkerMode</name>
        <qualifiedname>tt::tt_metal::v1::GetWorkerMode</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the current worker mode of the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WorkExecutorMode representing the current worker mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="245" column="18" declfile="tt_metal/include/tt_metal/device.hpp" declline="245" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aff8fd1c289715aad386c6ee40eda1638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t tt::tt_metal::v1::GetNumProgramCacheEntries</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>GetNumProgramCacheEntries</name>
        <qualifiedname>tt::tt_metal::v1::GetNumProgramCacheEntries</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Retrieves the number of entries in the program cache on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of program cache entries. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/device.hpp" line="253" column="13" declfile="tt_metal/include/tt_metal/device.hpp" declline="253" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1ac509df53069bbfb2423544bc4c1bda1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1EventHandle" kindref="compound">EventHandle</ref></type>
        <definition>EventHandle tt::tt_metal::v1::EnqueueRecordEvent</definition>
        <argsstring>(CommandQueueHandle cq)</argsstring>
        <name>EnqueueRecordEvent</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueRecordEvent</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <briefdescription>
<para>Enqueues a command to record an event on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue used to dispatch the command. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to the recorded Event object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="22" column="13" declfile="tt_metal/include/tt_metal/event.hpp" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a75cf4017da0353e17f493d15b43292e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnqueueWaitForEvent</definition>
        <argsstring>(CommandQueueHandle cq, EventHandle event)</argsstring>
        <name>EnqueueWaitForEvent</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueWaitForEvent</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1EventHandle" kindref="compound">EventHandle</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Enqueues a command to wait for an event to complete on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue that will wait for the event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the Event object to wait on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="30" column="6" declfile="tt_metal/include/tt_metal/event.hpp" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a5f0339728931f881b0642a8656e636f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EventSynchronize</definition>
        <argsstring>(EventHandle event)</argsstring>
        <name>EventSynchronize</name>
        <qualifiedname>tt::tt_metal::v1::EventSynchronize</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1EventHandle" kindref="compound">EventHandle</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Blocks the host until the specified event has completed on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the Event object to synchronize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="37" column="6" declfile="tt_metal/include/tt_metal/event.hpp" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a0931a52a892ca8bb955ce8084425536a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tt::tt_metal::v1::EventQuery</definition>
        <argsstring>(EventHandle event)</argsstring>
        <name>EventQuery</name>
        <qualifiedname>tt::tt_metal::v1::EventQuery</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1EventHandle" kindref="compound">EventHandle</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Queries the completion status of an event on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the Event object to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the event is completed; otherwise, false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="45" column="6" declfile="tt_metal/include/tt_metal/event.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a88371fc86019f3020c265456c559929b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::DeviceSynchronize</definition>
        <argsstring>(DeviceHandle device)</argsstring>
        <name>DeviceSynchronize</name>
        <qualifiedname>tt::tt_metal::v1::DeviceSynchronize</qualifiedname>
        <param>
          <type>DeviceHandle</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Synchronizes the device with the host by waiting for all operations to complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>device to synchronize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="53" column="6" declfile="tt_metal/include/tt_metal/event.hpp" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a7859c7b14b4045333f51dea3f6fae966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::CommandQueueSynchronize</definition>
        <argsstring>(CommandQueueHandle cq)</argsstring>
        <name>CommandQueueSynchronize</name>
        <qualifiedname>tt::tt_metal::v1::CommandQueueSynchronize</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <briefdescription>
<para>Synchronizes the command queue with the host by waiting for all operations to complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>command queue to synchronize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/event.hpp" line="61" column="6" declfile="tt_metal/include/tt_metal/event.hpp" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a5ee7734e47e504191e9c6711b40c5a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::SetRuntimeArgs</definition>
        <argsstring>(ProgramHandle &amp;program, KernelHandle kernel, const CoreRangeSet &amp;core_spec, RuntimeArgs runtime_args)</argsstring>
        <name>SetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::v1::SetRuntimeArgs</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1a41efe832ede2a68be6a45168f51dd5ae" kindref="member">RuntimeArgs</ref></type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
<para>Sets runtime arguments for a kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cores where the runtime arguments will be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runtime_args</parametername>
</parameternamelist>
<parameterdescription>
<para>The runtime arguments to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/kernel.hpp" line="24" column="6" declfile="tt_metal/include/tt_metal/kernel.hpp" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a18eef8efccb83fbe44e2ded7b0cc2c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::SetCommonRuntimeArgs</definition>
        <argsstring>(ProgramHandle &amp;program, KernelHandle kernel, RuntimeArgs runtime_args)</argsstring>
        <name>SetCommonRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::v1::SetCommonRuntimeArgs</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1a41efe832ede2a68be6a45168f51dd5ae" kindref="member">RuntimeArgs</ref></type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
<para>Sets common runtime arguments for a kernel, shared by all cores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runtime_args</parametername>
</parameternamelist>
<parameterdescription>
<para>The runtime arguments to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/kernel.hpp" line="34" column="6" declfile="tt_metal/include/tt_metal/kernel.hpp" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a87e7981e6346f3d538520f614e753151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacett_1_1tt__metal_1_1v1_1a41efe832ede2a68be6a45168f51dd5ae" kindref="member">RuntimeArgs</ref></type>
        <definition>RuntimeArgs tt::tt_metal::v1::GetRuntimeArgs</definition>
        <argsstring>(ProgramHandle &amp;program, KernelHandle kernel, CoreCoord logical_core)</argsstring>
        <name>GetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::v1::GetRuntimeArgs</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>CoreCoord</type>
          <declname>logical_core</declname>
        </param>
        <briefdescription>
<para>Gets the runtime arguments for a kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logical_core</parametername>
</parameternamelist>
<parameterdescription>
<para>The logical core coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Span of runtime arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/kernel.hpp" line="44" column="13" declfile="tt_metal/include/tt_metal/kernel.hpp" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a2909dc9be2ba6a1dc6011632e3444452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tt::tt_metal::v1::MAKE_ANY_RANGE</definition>
        <argsstring>(SizedCircularBufferRange, stl::AnySizedInputRange&lt; CircularBufferHandle, stl::default_any_range_capacity, 24 &gt;)</argsstring>
        <name>MAKE_ANY_RANGE</name>
        <qualifiedname>tt::tt_metal::v1::MAKE_ANY_RANGE</qualifiedname>
        <param>
          <type>SizedCircularBufferRange</type>
        </param>
        <param>
          <type>stl::AnySizedInputRange&lt; <ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref>, stl::default_any_range_capacity, 24 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="21" column="1" declfile="tt_metal/include/tt_metal/program.hpp" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a70ed6e34eb04904fe348d2a7afa8bc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tt::tt_metal::v1::MAKE_ANY_RANGE</definition>
        <argsstring>(CircularBufferRange, stl::AnyInputRange&lt; CircularBufferHandle, 96, 32 &gt;)</argsstring>
        <name>MAKE_ANY_RANGE</name>
        <qualifiedname>tt::tt_metal::v1::MAKE_ANY_RANGE</qualifiedname>
        <param>
          <type>CircularBufferRange</type>
        </param>
        <param>
          <type>stl::AnyInputRange&lt; <ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref>, 96, 32 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="23" column="1" declfile="tt_metal/include/tt_metal/program.hpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a00a5e549383bc80541272724fd1cf7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref></type>
        <definition>ProgramHandle tt::tt_metal::v1::CreateProgram</definition>
        <argsstring>()</argsstring>
        <name>CreateProgram</name>
        <qualifiedname>tt::tt_metal::v1::CreateProgram</qualifiedname>
        <briefdescription>
<para>Creates a Program object, which bundles kernels, circular buffers, and semaphores for execution on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Program handle to the created program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="30" column="15" declfile="tt_metal/include/tt_metal/program.hpp" declline="30" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a14b6ebd539e126b2795faaf14ecf0728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
        <definition>KernelHandle tt::tt_metal::v1::CreateKernel</definition>
        <argsstring>(ProgramHandle &amp;program, std::string_view file_name, const CoreRangeSet &amp;core_spec, const DataMovementConfig &amp;config)</argsstring>
        <name>CreateKernel</name>
        <qualifiedname>tt::tt_metal::v1::CreateKernel</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const DataMovementConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a data movement or compute kernel and adds it to the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to which this kernel will be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the kernel source file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cores on which the kernel will be placed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>DataMovementConfig for the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="42" column="14" declfile="tt_metal/include/tt_metal/program.hpp" declline="42" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a8ad4c0f98293c089f29e2264be6479c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
        <definition>KernelHandle tt::tt_metal::v1::CreateKernel</definition>
        <argsstring>(ProgramHandle &amp;program, std::string_view file_name, const CoreRangeSet &amp;core_spec, const ComputeConfig &amp;config)</argsstring>
        <name>CreateKernel</name>
        <qualifiedname>tt::tt_metal::v1::CreateKernel</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const ComputeConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a data movement or compute kernel and adds it to the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to which this kernel will be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the kernel source file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cores on which the kernel will be placed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>ComputeConfig for the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="57" column="14" declfile="tt_metal/include/tt_metal/program.hpp" declline="57" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a38764f3b0cb2ace3685c134171f6b0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref></type>
        <definition>KernelHandle tt::tt_metal::v1::CreateKernel</definition>
        <argsstring>(ProgramHandle &amp;program, std::string_view file_name, const CoreRangeSet &amp;core_spec, const EthernetConfig &amp;config)</argsstring>
        <name>CreateKernel</name>
        <qualifiedname>tt::tt_metal::v1::CreateKernel</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const EthernetConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a data movement or compute kernel and adds it to the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to which this kernel will be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the kernel source file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cores on which the kernel will be placed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>EthernetConfig for the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classtt_1_1tt__metal_1_1v1_1_1KernelHandle" kindref="compound">KernelHandle</ref> representing the kernel ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="72" column="14" declfile="tt_metal/include/tt_metal/program.hpp" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1ad5e43c40425409e8e18798ca4de93b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t tt::tt_metal::v1::CreateSemaphore</definition>
        <argsstring>(ProgramHandle &amp;program, const CoreRangeSet &amp;core_spec, std::uint32_t initial_value, CoreType core_type=CoreType::WORKER)</argsstring>
        <name>CreateSemaphore</name>
        <qualifiedname>tt::tt_metal::v1::CreateSemaphore</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>initial_value</declname>
        </param>
        <param>
          <type>CoreType</type>
          <declname>core_type</declname>
          <defval>CoreType::WORKER</defval>
        </param>
        <briefdescription>
<para>Initializes a semaphore on specified cores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to which the semaphore will be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of cores using the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of the semaphore. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Core type on which to create the semaphore (default: CoreType::WORKER). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Semaphore address as a uint32_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="88" column="10" declfile="tt_metal/include/tt_metal/program.hpp" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a3beb08329677f6e2f130a0381f5646b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref></type>
        <definition>CircularBufferHandle tt::tt_metal::v1::CreateCircularBuffer</definition>
        <argsstring>(ProgramHandle &amp;program, const CoreRangeSet &amp;core_spec, const CircularBufferConfig &amp;config)</argsstring>
        <name>CreateCircularBuffer</name>
        <qualifiedname>tt::tt_metal::v1::CreateCircularBuffer</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const CoreRangeSet &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const CircularBufferConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Creates a Circular Buffer in L1 memory of specified cores and adds it to the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to which the buffer will be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>core_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cores where the circular buffer will be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration for the circular buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CBHandle representing the Circular Buffer ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="103" column="22" declfile="tt_metal/include/tt_metal/program.hpp" declline="103" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a6ac21dc897d96d19e4aad97d1efcb239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const CircularBufferConfig &amp;</type>
        <definition>const CircularBufferConfig &amp; tt::tt_metal::v1::GetCircularBufferConfig</definition>
        <argsstring>(ProgramHandle &amp;program, CircularBufferHandle cb_handle)</argsstring>
        <name>GetCircularBufferConfig</name>
        <qualifiedname>tt::tt_metal::v1::GetCircularBufferConfig</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref></type>
          <declname>cb_handle</declname>
        </param>
        <briefdescription>
<para>Gets the configuration of a circular buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the circular buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the circular buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the CircularBufferConfig. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="115" column="28" declfile="tt_metal/include/tt_metal/program.hpp" declline="115" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a063a64ba780bddf2bd64b16748ee602b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SizedCircularBufferRange</type>
        <definition>SizedCircularBufferRange tt::tt_metal::v1::GetCircularBuffers</definition>
        <argsstring>(ProgramHandle &amp;program)</argsstring>
        <name>GetCircularBuffers</name>
        <qualifiedname>tt::tt_metal::v1::GetCircularBuffers</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <briefdescription>
<para>Retrieves the circular buffers associated with the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sized input range of <ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="123" column="26" declfile="tt_metal/include/tt_metal/program.hpp" declline="123" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a5a552dea5d7227a7805d72fb658f3d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CircularBufferRange</type>
        <definition>CircularBufferRange tt::tt_metal::v1::GetCircularBuffersOnCoreRange</definition>
        <argsstring>(ProgramHandle &amp;program, CoreRange cr)</argsstring>
        <name>GetCircularBuffersOnCoreRange</name>
        <qualifiedname>tt::tt_metal::v1::GetCircularBuffersOnCoreRange</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>CoreRange</type>
          <declname>cr</declname>
        </param>
        <briefdescription>
<para>Retrieves the circular buffers associated with the program on a specific core range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr</parametername>
</parameternamelist>
<parameterdescription>
<para>The core range to consider. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An input range of <ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref> on the given core range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="132" column="21" declfile="tt_metal/include/tt_metal/program.hpp" declline="132" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1af94866d5212ee53e90bbf8108e481011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::UpdateCircularBufferTotalSize</definition>
        <argsstring>(ProgramHandle &amp;program, CircularBufferHandle cb_handle, std::uint32_t total_size)</argsstring>
        <name>UpdateCircularBufferTotalSize</name>
        <qualifiedname>tt::tt_metal::v1::UpdateCircularBufferTotalSize</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref></type>
          <declname>cb_handle</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>total_size</declname>
        </param>
        <briefdescription>
<para>Updates the total size of a circular buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the circular buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the circular buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_size</parametername>
</parameternamelist>
<parameterdescription>
<para>New total size of the circular buffer in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="146" column="6" declfile="tt_metal/include/tt_metal/program.hpp" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1aa514298587d69bf5490a52ed4ca04d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::UpdateDynamicCircularBufferAddress</definition>
        <argsstring>(ProgramHandle &amp;program, CircularBufferHandle cb_handle, BufferHandle buffer)</argsstring>
        <name>UpdateDynamicCircularBufferAddress</name>
        <qualifiedname>tt::tt_metal::v1::UpdateDynamicCircularBufferAddress</qualifiedname>
        <param>
          <type><ref refid="namespacett_1_1tt__metal_1_1v1_1aeb98f79faee0fc2ac9492dd5d295d126" kindref="member">ProgramHandle</ref> &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CircularBufferHandle" kindref="compound">CircularBufferHandle</ref></type>
          <declname>cb_handle</declname>
        </param>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1BufferHandle" kindref="compound">BufferHandle</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Updates the address of a dynamic circular buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program containing the circular buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the circular buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamically allocated L1 buffer that shares address space with the circular buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/program.hpp" line="155" column="6" declfile="tt_metal/include/tt_metal/program.hpp" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a19dbe074ea7eb58ae2debf7d51fa0234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
        <definition>CommandQueueHandle tt::tt_metal::v1::GetCommandQueue</definition>
        <argsstring>(TraceHandle trace)</argsstring>
        <name>GetCommandQueue</name>
        <qualifiedname>tt::tt_metal::v1::GetCommandQueue</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
          <declname>trace</declname>
        </param>
        <briefdescription>
<para>Obtains the associated command queue from a given trace handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace</parametername>
</parameternamelist>
<parameterdescription>
<para>The trace handle returned by BeginTraceCapture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Command queue handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="22" column="20" declfile="tt_metal/include/tt_metal/trace.hpp" declline="22" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a35c346d8491a7e2162a74e827633802c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
        <definition>TraceHandle tt::tt_metal::v1::BeginTraceCapture</definition>
        <argsstring>(CommandQueueHandle cq)</argsstring>
        <name>BeginTraceCapture</name>
        <qualifiedname>tt::tt_metal::v1::BeginTraceCapture</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1CommandQueueHandle" kindref="compound">CommandQueueHandle</ref></type>
          <declname>cq</declname>
        </param>
        <briefdescription>
<para>Begins capture on a trace. Captured commands will have their execution delayed until the trace is replayed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cq</parametername>
</parameternamelist>
<parameterdescription>
<para>The command queue associated with the trace. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Trace handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="30" column="13" declfile="tt_metal/include/tt_metal/trace.hpp" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1af82f80c6f857daa6981e44e4c51c28c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EndTraceCapture</definition>
        <argsstring>(TraceHandle trace)</argsstring>
        <name>EndTraceCapture</name>
        <qualifiedname>tt::tt_metal::v1::EndTraceCapture</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
          <declname>trace</declname>
        </param>
        <briefdescription>
<para>Ends capture on a trace. The trace can be replayed on the same device command queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace</parametername>
</parameternamelist>
<parameterdescription>
<para>The trace handle returned by BeginTraceCapture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="37" column="6" declfile="tt_metal/include/tt_metal/trace.hpp" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a25a658a690031902c1a8ecd1f0810902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::ReplayTrace</definition>
        <argsstring>(TraceHandle trace, bool blocking)</argsstring>
        <name>ReplayTrace</name>
        <qualifiedname>tt::tt_metal::v1::ReplayTrace</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
          <declname>trace</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Replays a captured trace on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace</parametername>
</parameternamelist>
<parameterdescription>
<para>The trace to replay. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation is blocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="45" column="6" declfile="tt_metal/include/tt_metal/trace.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a8d79e634d906f2aa3a474224b60609fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::ReleaseTrace</definition>
        <argsstring>(TraceHandle trace)</argsstring>
        <name>ReleaseTrace</name>
        <qualifiedname>tt::tt_metal::v1::ReleaseTrace</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
          <declname>trace</declname>
        </param>
        <briefdescription>
<para>Releases a previously captured trace, deallocating associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace</parametername>
</parameternamelist>
<parameterdescription>
<para>The trace to release. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="52" column="6" declfile="tt_metal/include/tt_metal/trace.hpp" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacett_1_1tt__metal_1_1v1_1a52db18e0d55921f7e31df14444bac2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::v1::EnqueueTrace</definition>
        <argsstring>(TraceHandle trace, bool blocking)</argsstring>
        <name>EnqueueTrace</name>
        <qualifiedname>tt::tt_metal::v1::EnqueueTrace</qualifiedname>
        <param>
          <type><ref refid="classtt_1_1tt__metal_1_1v1_1_1TraceHandle" kindref="compound">TraceHandle</ref></type>
          <declname>trace</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Enqueues a trace for execution on the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trace</parametername>
</parameternamelist>
<parameterdescription>
<para>The Trace to enqueue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the operation is blocking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/include/tt_metal/trace.hpp" line="60" column="6" declfile="tt_metal/include/tt_metal/trace.hpp" declline="60" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tt_metal/include/tt_metal/types.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
