<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="bcast_8h" kind="file" language="C++">
    <compoundname>bcast.h</compoundname>
    <includes local="yes">compute_kernel_api/common.h</includes>
    <incdepgraph>
      <node id="1">
        <label>tt_metal/include/compute_kernel_api/bcast.h</label>
        <link refid="bcast_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>compute_kernel_api/common.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceckernel">ckernel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>Â©<sp/>2023<sp/>Tenstorrent<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compute_kernel_api/common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRISC_MATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_math_binary_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_math_matmul_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_math_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRISC_UNPACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_unpack_AB_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_unpack_A_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRISC_PACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_pack.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llk_pack_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ckernel<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_bcast_cols(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWSUB,<sp/>BroadcastType::COL,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_bcast_scalar(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWSUB,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_bcast_cols(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWMUL,<sp/>BroadcastType::COL,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_bcast_rows(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWMUL,<sp/>BroadcastType::ROW,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::ROW&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_bcast_rows(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWADD,<sp/>BroadcastType::ROW,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::ROW&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_bcast_cols(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWADD,<sp/>BroadcastType::COL,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_bcast_scalar(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;EltwiseBinaryType::ELWADD,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;EltwiseBinaryType<sp/>tBcastOp,<sp/>BroadcastType<sp/>tBcastDim&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_bcast(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>ocb<sp/>=<sp/>16)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(tBcastOp<sp/>==<sp/>ELWMUL)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;tBcastOp,<sp/>tBcastDim,<sp/>MATH_FIDELITY&gt;()<sp/>));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;tBcastOp,<sp/>tBcastDim&gt;()<sp/>));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_hw_configure_disaggregated&lt;DST_ACCUM_MODE&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;tBcastDim&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(AP):<sp/>running<sp/>this<sp/>specific<sp/>init<sp/>after<sp/>common<sp/>AB<sp/>init<sp/>causes<sp/>a<sp/>hang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>of<sp/>general<sp/>init<sp/>for<sp/>AB<sp/>TODO(AP):<sp/>commonize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::NONE&gt;()<sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UNPACK((<sp/>llk_unpack_AB_hw_configure_disaggregated&lt;BroadcastType::NONE&gt;(icb0,<sp/>icb1)<sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_hw_configure_disaggregated&lt;false,<sp/>DST_ACCUM_MODE&gt;(ocb)<sp/>));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_init(ocb)<sp/>));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>PACK((<sp/>llk_pack_dest_init&lt;false,<sp/>DST_ACCUM_MODE&gt;()<sp/>));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_pack_sync_init&lt;DST_ACCUM_MODE&gt;()<sp/>));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_hw_configure_disaggregated()<sp/>));</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="128"><highlight class="comment">Internal<sp/>helper<sp/>function<sp/>for<sp/>all<sp/>broadcast<sp/>ops</highlight></codeline>
<codeline lineno="129"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;EltwiseBinaryType<sp/>tBcastOp,<sp/>BroadcastType<sp/>tBcastDim&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>any_tiles_bcast(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;tBcastOp,<sp/>tBcastDim,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;tBcastDim&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;BroadcastType<sp/>tBcastDim&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tiles_bcast(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{<sp/>any_tiles_bcast&lt;EltwiseBinaryType::ELWADD,<sp/>tBcastDim&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1,<sp/>idst);<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;BroadcastType<sp/>tBcastDim&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_bcast(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{<sp/>any_tiles_bcast&lt;EltwiseBinaryType::ELWSUB,<sp/>tBcastDim&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1,<sp/>idst);<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;BroadcastType<sp/>tBcastDim&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_bcast(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{<sp/>any_tiles_bcast&lt;EltwiseBinaryType::ELWMUL,<sp/>tBcastDim&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1,<sp/>idst);<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_bcast_rows_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWADD,<sp/>BroadcastType::ROW,<sp/>MATH_FIDELITY&gt;()<sp/>));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::ROW&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_bcast_cols_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWADD,<sp/>BroadcastType::COL&gt;()<sp/>));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_bcast_scalar_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWADD,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/></highlight><highlight class="comment">//<sp/>TODO(AP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_bcast_scalar_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWMUL,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/></highlight><highlight class="comment">//<sp/>TODO(AP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_tiles_bcast_scalar(uint32_t<sp/>icb0,<sp/>uint32_t<sp/>icb1,<sp/>uint32_t<sp/>itile0,<sp/>uint32_t<sp/>itile1,<sp/>uint32_t<sp/>idst)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary&lt;ELWMUL,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY,<sp/>EltwiseBinaryReuseDestType::NONE,<sp/>DST_ACCUM_MODE&gt;(icb0,<sp/>icb1,<sp/>idst)<sp/>));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1,<sp/>itile0,<sp/>itile1)<sp/>));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_bcast_cols_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWMUL,<sp/>BroadcastType::COL,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/></highlight><highlight class="comment">//<sp/>TODO(AP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mul_bcast_rows_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWMUL,<sp/>BroadcastType::ROW,<sp/>MATH_FIDELITY&gt;()<sp/>));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::ROW&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_bcast_cols_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWSUB,<sp/>BroadcastType::COL,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/></highlight><highlight class="comment">//<sp/>TODO(AP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::COL&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">ALWI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sub_tiles_bcast_scalar_init_short(uint32_t<sp/>icb0<sp/>=<sp/>0,<sp/>uint32_t<sp/>icb1<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>MATH((<sp/>llk_math_eltwise_binary_init&lt;ELWSUB,<sp/>BroadcastType::SCALAR,<sp/>MATH_FIDELITY&gt;()<sp/>));<sp/></highlight><highlight class="comment">//<sp/>TODO(AP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>API<sp/>Update<sp/>needed<sp/>in<sp/>compute<sp/>kernel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACK((<sp/>llk_unpack_AB_init&lt;BroadcastType::SCALAR&gt;(icb0,<sp/>icb1)<sp/>));</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ckernel</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tt_metal/include/compute_kernel_api/bcast.h"/>
  </compounddef>
</doxygen>
