<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespacett_1_1tt__metal" kind="namespace" language="C++">
    <compoundname>tt::tt_metal</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="host__api_8hpp_1af7903406e4338d5e98bdc4afd76b403f" prot="public" static="no">
        <type>std::vector&lt; std::variant&lt; Buffer *, uint32_t &gt; &gt;</type>
        <definition>using tt::tt_metal::RuntimeArgs = typedef std::vector&lt;std::variant&lt;Buffer *, uint32_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>RuntimeArgs</name>
        <qualifiedname>tt::tt_metal::RuntimeArgs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="272" column="1" bodyfile="tt_metal/host_api.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="host__api_8hpp_1a06ba0ab5eeb2da5af625a8b7f95ca48e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tt::tt_metal::GetNumAvailableDevices</definition>
        <argsstring>()</argsstring>
        <name>GetNumAvailableDevices</name>
        <qualifiedname>tt::tt_metal::GetNumAvailableDevices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns number of Tenstorrent devices that can be targeted</para>
<para>Return value: size_t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="50" column="8" declfile="tt_metal/host_api.hpp" declline="50" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1aa18761d248b0a8081c84440f3aeafcfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tt::tt_metal::GetNumPCIeDevices</definition>
        <argsstring>()</argsstring>
        <name>GetNumPCIeDevices</name>
        <qualifiedname>tt::tt_metal::GetNumPCIeDevices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns number of Tenstorrent devices that are connected to host via PCIe and can be targeted</para>
<para>Return value: size_t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="57" column="8" declfile="tt_metal/host_api.hpp" declline="57" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a993783d82827c89b8f233704a7f55b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>chip_id_t</type>
        <definition>chip_id_t tt::tt_metal::GetPCIeDeviceID</definition>
        <argsstring>(chip_id_t device_id)</argsstring>
        <name>GetPCIeDeviceID</name>
        <qualifiedname>tt::tt_metal::GetPCIeDeviceID</qualifiedname>
        <param>
          <type>chip_id_t</type>
          <declname>device_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="59" column="11" declfile="tt_metal/host_api.hpp" declline="59" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1acfbb2695f1ea832a3d12724a54de28e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Device *</type>
        <definition>Device * tt::tt_metal::CreateDevice</definition>
        <argsstring>(chip_id_t device_id, const uint8_t num_hw_cqs=1, const size_t l1_small_size=DEFAULT_L1_SMALL_SIZE, const size_t trace_region_size=DEFAULT_TRACE_REGION_SIZE, DispatchCoreType dispatch_core_type=DispatchCoreType::WORKER, const std::vector&lt; uint32_t &gt; &amp;l1_bank_remap={})</argsstring>
        <name>CreateDevice</name>
        <qualifiedname>tt::tt_metal::CreateDevice</qualifiedname>
        <param>
          <type>chip_id_t</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>num_hw_cqs</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>l1_small_size</declname>
          <defval>DEFAULT_L1_SMALL_SIZE</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>trace_region_size</declname>
          <defval>DEFAULT_TRACE_REGION_SIZE</defval>
        </param>
        <param>
          <type>DispatchCoreType</type>
          <declname>dispatch_core_type</declname>
          <defval>DispatchCoreType::WORKER</defval>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>l1_bank_remap</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiates a device object.</para>
<para>Return value: Device *</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device_id   </para>
</entry><entry thead="no"><para>ID of the device to target   </para>
</entry><entry thead="no"><para>chip_id_t (int)   </para>
</entry><entry thead="no"><para>0 to (GetNumAvailableDevices - 1)   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="70" column="8" declfile="tt_metal/host_api.hpp" declline="70" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a2b65aae891efb62bb5baf5cbfd5e971b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Device *</type>
        <definition>Device * tt::tt_metal::CreateDeviceMinimal</definition>
        <argsstring>(chip_id_t device_id, const uint8_t num_hw_cqs=1, DispatchCoreType dispatch_core_type=DispatchCoreType::WORKER)</argsstring>
        <name>CreateDeviceMinimal</name>
        <qualifiedname>tt::tt_metal::CreateDeviceMinimal</qualifiedname>
        <param>
          <type>chip_id_t</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>num_hw_cqs</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>DispatchCoreType</type>
          <declname>dispatch_core_type</declname>
          <defval>DispatchCoreType::WORKER</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiates a device with minimal setup, used to attach to a device in a bad state.</para>
<para>Return value: Device *</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device_id   </para>
</entry><entry thead="no"><para>ID of the device to target   </para>
</entry><entry thead="no"><para>chip_id_t (int)   </para>
</entry><entry thead="no"><para>0 to (GetNumAvailableDevices - 1)   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="87" column="8" declfile="tt_metal/host_api.hpp" declline="87" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a25ae925200ca85a3274824f1b945ebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tt::tt_metal::CloseDevice</definition>
        <argsstring>(Device *device)</argsstring>
        <name>CloseDevice</name>
        <qualifiedname>tt::tt_metal::CloseDevice</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets device and closes device</para>
<para>Return value: bool</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>Pointer to a device object   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="99" column="6" declfile="tt_metal/host_api.hpp" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a48b1af1b20561d626ff34f39282f1dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Program</type>
        <definition>Program tt::tt_metal::CreateProgram</definition>
        <argsstring>()</argsstring>
        <name>CreateProgram</name>
        <qualifiedname>tt::tt_metal::CreateProgram</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a Program object which is the main container that bundles kernels, circular buffers, and/or semaphores for execution on device</para>
<para>Return value: Program </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="110" column="9" declfile="tt_metal/host_api.hpp" declline="110" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1ae7930dd08bf0ae0c83c8ee55f3f604b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KernelHandle</type>
        <definition>KernelHandle tt::tt_metal::CreateKernel</definition>
        <argsstring>(Program &amp;program, const std::string &amp;file_name, const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;core_spec, const std::variant&lt; DataMovementConfig, ComputeConfig, EthernetConfig &gt; &amp;config)</argsstring>
        <name>CreateKernel</name>
        <qualifiedname>tt::tt_metal::CreateKernel</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const std::variant&lt; DataMovementConfig, ComputeConfig, EthernetConfig &gt; &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a data movement kernel with no compile time arguments and adds it to the program.</para>
<para>Return value: Kernel ID (uintptr_t)</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program to which this kernel will be added to   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>file_name   </para>
</entry><entry thead="no"><para>Path to kernel src. Assumed to be absolute/relative to CWD, but will fall back to relative path from TT_METAL_HOME.   </para>
</entry><entry thead="no"><para>const std::string &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Either a single logical core, a range of logical cores or a set of logical core ranges that indicate which cores kernel is placed on   </para>
</entry><entry thead="no"><para>const std::variant&lt;CoreCoord, CoreRange, CoreRangeSet&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>config   </para>
</entry><entry thead="no"><para>Config for data movement or compute kernel   </para>
</entry><entry thead="no"><para>const std::variant&lt;DataMovementConfig,ComputeConfig,EthernetConfig&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>No   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="124" column="14" declfile="tt_metal/host_api.hpp" declline="124" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a62b10a9d4d6ed91eacaba5d27c9761fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CBHandle</type>
        <definition>CBHandle tt::tt_metal::CreateCircularBuffer</definition>
        <argsstring>(Program &amp;program, const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;core_spec, const CircularBufferConfig &amp;config)</argsstring>
        <name>CreateCircularBuffer</name>
        <qualifiedname>tt::tt_metal::CreateCircularBuffer</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const CircularBufferConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a Circular Buffer (CB) in L1 memory of all cores within core ranges (inclusive) and adds it to the program. There can be a total of NUM_CIRCULAR_BUFFERS (32) circular buffers per core. Circular buffers hold data and have an associated config which indicates usage of the address space. If the config is specified for multiple buffer indices, the circular buffer address space is shared and each buffer index can potentially have a unique view of the shared space.</para>
<para>Circular buffers can be dynamically allocated or program-local allocated. If the config is created with an L1 buffer or sets a globally allocated address it is dynamic and shares the same address space as the L1 buffer. Otherwise, the circular buffer address space is managed by the program. Address space for program-local circular buffers does not persist across programs.</para>
<para>Return value: Circular Buffer ID (uintptr_t)</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program to which buffer will be added to   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Either a single logical core, a range of logical cores or a set of logical core ranges that indicate where the circular buffer will be configured   </para>
</entry><entry thead="no"><para>const std::variant&lt;CoreCoord, CoreRange, CoreRangeSet&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>config   </para>
</entry><entry thead="no"><para>Config for circular buffer   </para>
</entry><entry thead="no"><para>const CircularBufferConfig &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="149" column="10" declfile="tt_metal/host_api.hpp" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a95bdaeb43136c4db864dd95481fa0a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const CircularBufferConfig &amp;</type>
        <definition>const CircularBufferConfig &amp; tt::tt_metal::GetCircularBufferConfig</definition>
        <argsstring>(Program &amp;program, CBHandle cb_handle)</argsstring>
        <name>GetCircularBufferConfig</name>
        <qualifiedname>tt::tt_metal::GetCircularBufferConfig</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>CBHandle</type>
          <declname>cb_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a reference to the config owned by circular buffer at the given circular buffer ID.</para>
<para>Return value: const CircularBufferConfig &amp;</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing the circular buffer   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_handle   </para>
</entry><entry thead="no"><para>ID of the circular buffer, returned by <computeroutput>CreateCircularBuffers</computeroutput>   </para>
</entry><entry thead="no"><para>CBHandle (uintptr_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="164" column="28" declfile="tt_metal/host_api.hpp" declline="164" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a39e124f62d4c172a44abc0c22fa3ee04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::UpdateCircularBufferTotalSize</definition>
        <argsstring>(Program &amp;program, CBHandle cb_handle, uint32_t total_size)</argsstring>
        <name>UpdateCircularBufferTotalSize</name>
        <qualifiedname>tt::tt_metal::UpdateCircularBufferTotalSize</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>CBHandle</type>
          <declname>cb_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>total_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the total size of the circular buffer at the given circular buffer handle. Updating a program-local circular buffer requires all circular buffers in the program to be reallocated.</para>
<para>Return value: void</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing the circular buffer   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
| cb_handle | ID of the circular buffer, returned by <computeroutput>CreateCircularBuffers</computeroutput> | CBHandle (uintptr_t) | | Yes | | | total_size | New size of the circular buffer in bytes | uint32_t | | Yes | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="177" column="6" declfile="tt_metal/host_api.hpp" declline="177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a92e93610eb6b826263eb803608c33889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::UpdateCircularBufferPageSize</definition>
        <argsstring>(Program &amp;program, CBHandle cb_handle, uint8_t buffer_index, uint32_t page_size)</argsstring>
        <name>UpdateCircularBufferPageSize</name>
        <qualifiedname>tt::tt_metal::UpdateCircularBufferPageSize</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>CBHandle</type>
          <declname>cb_handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>buffer_index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the page size at specified <computeroutput>buffer_index</computeroutput> of the circular buffer at the given circular buffer handle.</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing the circular buffer   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_handle   </para>
</entry><entry thead="no"><para>ID of the circular buffer, returned by <computeroutput>CreateCircularBuffers</computeroutput>   </para>
</entry><entry thead="no"><para>CBHandle (uintptr_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer_index   </para>
</entry><entry thead="no"><para>Circular buffer index to update page size. <computeroutput>cb_handle</computeroutput> must be a circular buffer that had previously programmed this index   </para>
</entry><entry thead="no"><para>uint8_t   </para>
</entry><entry thead="no"><para>0 to NUM_CIRCULAR_BUFFERS - 1   </para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>page_size   </para>
</entry><entry thead="no"><para>Updated page size in bytes   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="191" column="6" declfile="tt_metal/host_api.hpp" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1aac851bed71135fa02e28caf0c0ae58b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::UpdateDynamicCircularBufferAddress</definition>
        <argsstring>(Program &amp;program, CBHandle cb_handle, const Buffer &amp;buffer)</argsstring>
        <name>UpdateDynamicCircularBufferAddress</name>
        <qualifiedname>tt::tt_metal::UpdateDynamicCircularBufferAddress</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>CBHandle</type>
          <declname>cb_handle</declname>
        </param>
        <param>
          <type>const Buffer &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the address of a dynamic circular buffer. Dynamic circular buffers share the same address space as L1 buffers.</para>
<para>Return value: void</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing the circular buffer   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
| cb_handle | ID of the circular buffer, returned by <computeroutput>CreateCircularBuffers</computeroutput> | CBHandle (uintptr_t) | | Yes | | | buffer | Dynamically allocated L1 buffer that shares address space of circular buffer <computeroutput>cb_handle</computeroutput> | const Buffer &amp; | L1 buffer | Yes | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="204" column="6" declfile="tt_metal/host_api.hpp" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a8860cbc40324a9cc2e18badc55a77a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t tt::tt_metal::CreateSemaphore</definition>
        <argsstring>(Program &amp;program, const std::variant&lt; CoreRange, CoreRangeSet &gt; &amp;core_spec, uint32_t initial_value, CoreType core_type=CoreType::WORKER)</argsstring>
        <name>CreateSemaphore</name>
        <qualifiedname>tt::tt_metal::CreateSemaphore</qualifiedname>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const std::variant&lt; CoreRange, CoreRangeSet &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>initial_value</declname>
        </param>
        <param>
          <type>CoreType</type>
          <declname>core_type</declname>
          <defval>CoreType::WORKER</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes semaphore on all cores within core range (inclusive). Each core can have up to four 32B semaphores.</para>
<para>Return value: Semaphore address (uint32_t)</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program to which semaphore will be added to   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Range of the Tensix co-ordinates using the semaphore   </para>
</entry><entry thead="no"><para>const std::variant&lt;CoreRange,CoreRangeSet&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>initial_value   </para>
</entry><entry thead="no"><para>Initial value of the semaphore   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_type   </para>
</entry><entry thead="no"><para>Tensix or Ethernet core to create semaphore on.   </para>
</entry><entry thead="no"><para>CoreType   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="218" column="10" declfile="tt_metal/host_api.hpp" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a44f12170a79821c7a1eb7dcad8e9014e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; Buffer &gt;</type>
        <definition>std::shared_ptr&lt; Buffer &gt; tt::tt_metal::CreateBuffer</definition>
        <argsstring>(const InterleavedBufferConfig &amp;config)</argsstring>
        <name>CreateBuffer</name>
        <qualifiedname>tt::tt_metal::CreateBuffer</qualifiedname>
        <param>
          <type>const InterleavedBufferConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates an interleaved DRAM or L1 buffer on device</para>
<para>Return value: std::shared_ptr&lt;Buffer&gt;</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>config   </para>
</entry><entry thead="no"><para>config for buffer   </para>
</entry><entry thead="no"><para>InterleavedBufferConfig   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="233" column="17" declfile="tt_metal/host_api.hpp" declline="233" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a8e5af0183154c8b303d43acec393ec29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; Buffer &gt;</type>
        <definition>std::shared_ptr&lt; Buffer &gt; tt::tt_metal::CreateBuffer</definition>
        <argsstring>(const ShardedBufferConfig &amp;config)</argsstring>
        <name>CreateBuffer</name>
        <qualifiedname>tt::tt_metal::CreateBuffer</qualifiedname>
        <param>
          <type>const ShardedBufferConfig &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a sharded DRAM or L1 buffer on device</para>
<para>Return value: std::shared_ptr&lt;Buffer&gt;</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>config   </para>
</entry><entry thead="no"><para>config for buffer   </para>
</entry><entry thead="no"><para>ShardedBufferConfig   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="244" column="17" declfile="tt_metal/host_api.hpp" declline="244" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a6a064752ab55b4fac953ba8bde7daf52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::DeallocateBuffer</definition>
        <argsstring>(Buffer &amp;buffer)</argsstring>
        <name>DeallocateBuffer</name>
        <qualifiedname>tt::tt_metal::DeallocateBuffer</qualifiedname>
        <param>
          <type>Buffer &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deallocates buffer from device by marking its memory as free.</para>
<para>Return value: void</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The buffer to deallocate from device   </para>
</entry><entry thead="no"><para>Buffer &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="255" column="6" declfile="tt_metal/host_api.hpp" declline="255" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a6af697ab3bfa76d64ebb809d70c287fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::AssignGlobalBufferToProgram</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; buffer, Program &amp;program)</argsstring>
        <name>AssignGlobalBufferToProgram</name>
        <qualifiedname>tt::tt_metal::AssignGlobalBufferToProgram</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives the specified program ownership of the buffer: the buffer will remain on device at least until the program is enqueued. This is required for asynchronous Command Queues.</para>
<para>Return value: void</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The buffer that will be owned by the program   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Buffer&gt; buffer   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program getting ownership of the buffer   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="267" column="6" declfile="tt_metal/host_api.hpp" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a491996adcf69861c22eed34ce1ac68cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::SetRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel, const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;core_spec, const std::vector&lt; uint32_t &gt; &amp;runtime_args)</argsstring>
        <name>SetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::SetRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set runtime args for a kernel that are sent to the core during runtime. This API needs to be called to update the runtime args for the kernel. Maximum of 255 allowed runtime args per core (unique and common runtime args count toward same limit).</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Location of Tensix core(s) where the runtime args will be written   </para>
</entry><entry thead="no"><para>const std::variant&lt;CoreCoord,CoreRange,CoreRangeSet&gt; &amp;   </para>
</entry><entry thead="no"><para>Any logical Tensix core coordinate(s) on which the kernel is placed   </para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>runtime_args   </para>
</entry><entry thead="no"><para>The runtime args to be written   </para>
</entry><entry thead="no"><para>const std::vector&lt;uint32_t&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="286" column="6" declfile="tt_metal/host_api.hpp" declline="286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1af27c6b3f5c79fb792beb4ab2169683b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::SetRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel, const std::vector&lt; CoreCoord &gt; &amp;core_spec, const std::vector&lt; std::vector&lt; uint32_t &gt; &gt; &amp;runtime_args)</argsstring>
        <name>SetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::SetRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const std::vector&lt; CoreCoord &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; uint32_t &gt; &gt; &amp;</type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set multiple runtime arguments of a kernel at once during runtime, each mapping to a specific core. The runtime args for each core may be unique. Maximum of 255 allowed runtime args per core (unique and common runtime args count toward same limit).</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Location of Tensix core(s) where the runtime args will be written   </para>
</entry><entry thead="no"><para>const std::vector&lt;CoreCoord&gt; &amp;   </para>
</entry><entry thead="no"><para>Any set of logical Tensix core coordinates on which the kernel is placed   </para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>runtime_args   </para>
</entry><entry thead="no"><para>The runtime args to be written   </para>
</entry><entry thead="no"><para>const std::vector&lt; vector&lt;uint32_t&gt; &gt; &amp;   </para>
</entry><entry thead="no"><para>Outer vector size must be equal to size of core_spec vector   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="305" column="6" declfile="tt_metal/host_api.hpp" declline="305" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a7c10cd46327ef8693169b3aee8846a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::SetRuntimeArgs</definition>
        <argsstring>(Device *device, const std::shared_ptr&lt; Kernel &gt; kernel, const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;core_spec, std::shared_ptr&lt; RuntimeArgs &gt; runtime_args)</argsstring>
        <name>SetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::SetRuntimeArgs</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Kernel &gt;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const std::variant&lt; CoreCoord, CoreRange, CoreRangeSet &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; RuntimeArgs &gt;</type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set runtime args for a kernel that are sent to the specified cores using the command queue. This API must be used when Asynchronous Command Queue Mode is enabled. Maximum of 255 allowed runtime args per core (unique and common runtime args count toward same limit).</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device that runtime args are being written to.   </para>
</entry><entry thead="no"><para>Device*   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel   </para>
</entry><entry thead="no"><para>The kernel that will recieve these runtime args.   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Kernel&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Location of Tensix core(s) where the runtime args will be written   </para>
</entry><entry thead="no"><para>const std::variant&lt;CoreCoord,CoreRange,CoreRangeSet&gt; &amp;   </para>
</entry><entry thead="no"><para>Any set of logical Tensix core coordinates on which the kernel is placed   </para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>runtime_args   </para>
</entry><entry thead="no"><para>The runtime args to be written   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;RuntimeArgs&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="324" column="6" declfile="tt_metal/host_api.hpp" declline="324" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a5abdf19459659b61a4c2bbcf172f6f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::SetRuntimeArgs</definition>
        <argsstring>(Device *device, const std::shared_ptr&lt; Kernel &gt; kernel, const std::vector&lt; CoreCoord &gt; &amp;core_spec, const std::vector&lt; std::shared_ptr&lt; RuntimeArgs &gt; &gt; runtime_args)</argsstring>
        <name>SetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::SetRuntimeArgs</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Kernel &gt;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const std::vector&lt; CoreCoord &gt; &amp;</type>
          <declname>core_spec</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; RuntimeArgs &gt; &gt;</type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set multiple runtime arguments of a kernel using the command queue. Each core can have distinct arguments. This API must be used when Asynchronous Command Queue Mode is enabled. Maximum of 255 allowed runtime args per core (unique and common runtime args count toward same limit).</para>
<para>Return value: void <table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device that runtime args are being written to.   </para>
</entry><entry thead="no"><para>Device*   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel   </para>
</entry><entry thead="no"><para>The kernel that will recieve these runtime args.   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Kernel&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>core_spec   </para>
</entry><entry thead="no"><para>Location of Tensix core(s) where the runtime args will be written   </para>
</entry><entry thead="no"><para>const std::vector&lt; CoreCoord &gt; &amp;   </para>
</entry><entry thead="no"><para>Any set of logical Tensix core coordinates on which the kernel is placed   </para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>runtime_args   </para>
</entry><entry thead="no"><para>The runtime args to be written   </para>
</entry><entry thead="no"><para>const std::vector&lt;std::shared_ptr&lt;RuntimeArgs&gt;&gt;   </para>
</entry><entry thead="no"><para>Outer vector size must be equal to size of core_spec vector   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="342" column="6" declfile="tt_metal/host_api.hpp" declline="342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a3b4cf7321eea21c21850b447312f02fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::SetCommonRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel_id, const std::vector&lt; uint32_t &gt; &amp;runtime_args)</argsstring>
        <name>SetCommonRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::SetCommonRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>runtime_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set common (shared by all cores) runtime args for a kernel that are sent to all cores during runtime. This API needs to be called to update the common runtime args for the kernel. Maximum of 255 allowed runtime args per core (unique and common runtime args count toward same limit).</para>
<para>Return value: void</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>runtime_args   </para>
</entry><entry thead="no"><para>The runtime args to be written   </para>
</entry><entry thead="no"><para>const std::vector&lt;uint32_t&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="360" column="6" declfile="tt_metal/host_api.hpp" declline="360" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a8dd2e6d874b20a87745ae83cc88afb51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RuntimeArgsData &amp;</type>
        <definition>RuntimeArgsData &amp; tt::tt_metal::GetRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel_id, const CoreCoord &amp;logical_core)</argsstring>
        <name>GetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::GetRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel_id</declname>
        </param>
        <param>
          <type>const CoreCoord &amp;</type>
          <declname>logical_core</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the runtime args for a kernel.</para>
<para>Return value: uint32_t *</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>logical_core   </para>
</entry><entry thead="no"><para>The location of the Tensix core where the runtime args will be written   </para>
</entry><entry thead="no"><para>const CoreCoord &amp;   </para>
</entry><entry thead="no"><para>Any logical Tensix core coordinate   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="373" column="17" declfile="tt_metal/host_api.hpp" declline="373" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a1b62db611a9ad2d24c90c043dae989a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; RuntimeArgsData &gt; &gt; &amp;</type>
        <definition>std::vector&lt; std::vector&lt; RuntimeArgsData &gt; &gt; &amp; tt::tt_metal::GetRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel_id)</argsstring>
        <name>GetRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::GetRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the runtime args for a kernel.</para>
<para>Return value: std::vector&lt; std::vector&lt; RuntimeArgsData &gt; &gt; &amp;</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="385" column="13" declfile="tt_metal/host_api.hpp" declline="385" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a2af22a7fb7c71050de7ec2fc9d487ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RuntimeArgsData &amp;</type>
        <definition>RuntimeArgsData &amp; tt::tt_metal::GetCommonRuntimeArgs</definition>
        <argsstring>(const Program &amp;program, KernelHandle kernel_id)</argsstring>
        <name>GetCommonRuntimeArgs</name>
        <qualifiedname>tt::tt_metal::GetCommonRuntimeArgs</qualifiedname>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>KernelHandle</type>
          <declname>kernel_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the common runtime args for a kernel.</para>
<para>Return value: RuntimeArgsData &amp;</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program containing kernels, circular buffers, semaphores   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>kernel_id   </para>
</entry><entry thead="no"><para>ID of the kernel that will receive the runtime args   </para>
</entry><entry thead="no"><para>KernelHandle (uint64_t)   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="397" column="17" declfile="tt_metal/host_api.hpp" declline="397" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a72bce18ec81347c077fb802271a7c562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueReadBuffer</definition>
        <argsstring>(CommandQueue &amp;cq, std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt; buffer, std::vector&lt; uint32_t &gt; &amp;dst, bool blocking)</argsstring>
        <name>EnqueueReadBuffer</name>
        <qualifiedname>tt::tt_metal::EnqueueReadBuffer</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a buffer from the device</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The device buffer we are reading from   </para>
</entry><entry thead="no"><para>Buffer &amp; or std::shared_ptr&lt;Buffer&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>dst   </para>
</entry><entry thead="no"><para>The vector where the results that are read will be stored   </para>
</entry><entry thead="no"><para>vector&lt;uint32_t&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para>Only blocking mode supported currently   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="411" column="6" declfile="tt_metal/host_api.hpp" declline="411" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a769957ca9a07e91d82cac6fd682a7fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueReadBuffer</definition>
        <argsstring>(CommandQueue &amp;cq, std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt; buffer, void *dst, bool blocking)</argsstring>
        <name>EnqueueReadBuffer</name>
        <qualifiedname>tt::tt_metal::EnqueueReadBuffer</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a buffer from the device</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The device buffer we are reading from   </para>
</entry><entry thead="no"><para>Buffer &amp; or std::shared_ptr&lt;Buffer&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>dst   </para>
</entry><entry thead="no"><para>The memory where the result will be stored   </para>
</entry><entry thead="no"><para>void*   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para>Only blocking mode supported currently   </para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="429" column="6" declfile="tt_metal/host_api.hpp" declline="429" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a41f4ff2e9c7fca0b1287446f57d37e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueWriteBuffer</definition>
        <argsstring>(CommandQueue &amp;cq, std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt; buffer, std::vector&lt; uint32_t &gt; &amp;src, bool blocking)</argsstring>
        <name>EnqueueWriteBuffer</name>
        <qualifiedname>tt::tt_metal::EnqueueWriteBuffer</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a buffer to the device</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The device buffer we are writing to   </para>
</entry><entry thead="no"><para>Buffer &amp; or std::shared_ptr&lt;Buffer&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>src   </para>
</entry><entry thead="no"><para>The vector we are writing to the device   </para>
</entry><entry thead="no"><para>vector&lt;uint32_t&gt; &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="447" column="6" declfile="tt_metal/host_api.hpp" declline="447" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a474bb3622a9e2927298d2a2a70c90774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueWriteBuffer</definition>
        <argsstring>(CommandQueue &amp;cq, std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt; buffer, HostDataType src, bool blocking)</argsstring>
        <name>EnqueueWriteBuffer</name>
        <qualifiedname>tt::tt_metal::EnqueueWriteBuffer</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>std::variant&lt; std::reference_wrapper&lt; Buffer &gt;, std::shared_ptr&lt; Buffer &gt; &gt;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>HostDataType</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a buffer to the device</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>buffer   </para>
</entry><entry thead="no"><para>The device buffer we are writing to   </para>
</entry><entry thead="no"><para>Buffer &amp; or std::shared_ptr&lt;Buffer&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>src   </para>
</entry><entry thead="no"><para>The memory we are writing to the device   </para>
</entry><entry thead="no"><para>HostDataType   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="465" column="6" declfile="tt_metal/host_api.hpp" declline="465" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a6b8642775d1d733d1ae7e2c229efa7ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueProgram</definition>
        <argsstring>(CommandQueue &amp;cq, Program &amp;program, bool blocking)</argsstring>
        <name>EnqueueProgram</name>
        <qualifiedname>tt::tt_metal::EnqueueProgram</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>Program &amp;</type>
          <declname>program</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a program to the device and launches it</para>
<para>Return value: void</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program that will be executed on the device that cq is bound to   </para>
</entry><entry thead="no"><para>Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="482" column="6" declfile="tt_metal/host_api.hpp" declline="482" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1afc3cc77a54213457805a878231ca3643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::Finish</definition>
        <argsstring>(CommandQueue &amp;cq)</argsstring>
        <name>Finish</name>
        <qualifiedname>tt::tt_metal::Finish</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocks until all previously dispatched commands on the device have completed</para>
<para>Return value: void</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="493" column="6" declfile="tt_metal/host_api.hpp" declline="493" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a2bb0ca68f1afddfbefc78b497d21943c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t tt::tt_metal::BeginTraceCapture</definition>
        <argsstring>(Device *device, const uint8_t cq_id)</argsstring>
        <name>BeginTraceCapture</name>
        <qualifiedname>tt::tt_metal::BeginTraceCapture</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>cq_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Begins capture on a trace, when the trace is in capture mode all programs pushed into the trace queue will have their execution delayed until the trace is instantiated and enqueued. The capture must be later ended via EndTraceCapture, and finally scheduled to be executed via ReplayTrace. Beginning a trace capture enabled buffer allocations until capture has ended.</para>
<para>Return value: Trace ID</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device holding being traced.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cq_id   </para>
</entry><entry thead="no"><para>The command queue id associated with the trace.   </para>
</entry><entry thead="no"><para>uint8_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="507" column="10" declfile="tt_metal/host_api.hpp" declline="507" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a3eaf4c5845ee7d8153c6ca9cc250df30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EndTraceCapture</definition>
        <argsstring>(Device *device, const uint8_t cq_id, const uint32_t tid)</argsstring>
        <name>EndTraceCapture</name>
        <qualifiedname>tt::tt_metal::EndTraceCapture</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>cq_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Completes capture on a trace, if captured commands do not conform to the rules of the trace, the trace will be invalidated. This trace can be enqueued for execution via ReplayTrace on the same device command queue. After ending a trace capture, buffer allocations on device are disabled until either a new trace begins capture, or all traces on the device are released</para>
<para>Return value: void</para>
<para><table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device holding being traced.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cq_id   </para>
</entry><entry thead="no"><para>The command queue id associated with the trace.   </para>
</entry><entry thead="no"><para>uint8_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>tid   </para>
</entry><entry thead="no"><para>A unique id from BeginTraceCapture for the trace being captured   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="523" column="6" declfile="tt_metal/host_api.hpp" declline="523" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a12e0b86cbb5a6ef9930562b684898d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::ReplayTrace</definition>
        <argsstring>(Device *device, const uint8_t cq_id, const uint32_t tid, const bool blocking)</argsstring>
        <name>ReplayTrace</name>
        <qualifiedname>tt::tt_metal::ReplayTrace</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>cq_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replay a trace of previously generated commands and data.</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device holding the trace.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cq_id   </para>
</entry><entry thead="no"><para>The command queue id associated with the trace.   </para>
</entry><entry thead="no"><para>uint8_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>trace_id   </para>
</entry><entry thead="no"><para>A unique id representing an existing captured trace.   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="537" column="6" declfile="tt_metal/host_api.hpp" declline="537" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a526ece1a413c039607e2973b97cdfa75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::ReleaseTrace</definition>
        <argsstring>(Device *device, const uint32_t tid)</argsstring>
        <name>ReleaseTrace</name>
        <qualifiedname>tt::tt_metal::ReleaseTrace</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release a previously instantiated trace, deallocating the associated trace buffers on device This operation is not thread-safe, user must ensure that the trace being released is no longer needed by device threads If this releases the last trace on a device, then buffer allocations are re-enabled</para>
<para>Return value: void</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device holding the trace.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>trace_id   </para>
</entry><entry thead="no"><para>A unique id representing an existing captured trace.   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="551" column="6" declfile="tt_metal/host_api.hpp" declline="551" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1ac56da2798d8d1a093846845ff06fd773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueTrace</definition>
        <argsstring>(CommandQueue &amp;cq, uint32_t trace_id, bool blocking)</argsstring>
        <name>EnqueueTrace</name>
        <qualifiedname>tt::tt_metal::EnqueueTrace</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trace_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueues a trace of previously generated commands and data.</para>
<para>Return value: void</para>
<para><table rows="5" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>trace_id   </para>
</entry><entry thead="no"><para>A unique id representing an existing on-device trace, which has been   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>instantiated via InstantiateTrace where the trace_id is returned   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>blocking   </para>
</entry><entry thead="no"><para>Whether or not this is a blocking operation   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="565" column="6" declfile="tt_metal/host_api.hpp" declline="565" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a5087c491b5788ee5878cf049066c355a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::DumpDeviceProfileResults</definition>
        <argsstring>(Device *device, const Program &amp;program)</argsstring>
        <name>DumpDeviceProfileResults</name>
        <qualifiedname>tt::tt_metal::DumpDeviceProfileResults</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const Program &amp;</type>
          <declname>program</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read device side profiler data and dump results into device side CSV log</para>
<para>This function only works in PROFILER builds. Please refer to the &quot;Device Program Profiler&quot; section for more information.</para>
<para>Return value: void</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device holding the program being profiled.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>True    </para>
</entry></row>
<row>
<entry thead="no"><para>program   </para>
</entry><entry thead="no"><para>The program being profiled.   </para>
</entry><entry thead="no"><para>const Program &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="579" column="6" declfile="tt_metal/host_api.hpp" declline="579" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a79a3e18155e12d482114d3c69a5c9168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueRecordEvent</definition>
        <argsstring>(CommandQueue &amp;cq, const std::shared_ptr&lt; Event &gt; &amp;event)</argsstring>
        <name>EnqueueRecordEvent</name>
        <qualifiedname>tt::tt_metal::EnqueueRecordEvent</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Event &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueues a command to record an Event on the device for a given CQ, and updates the Event object for the user. Return value: void <table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>event   </para>
</entry><entry thead="no"><para>An event that will be populated by this function, and inserted in CQ   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Event&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="589" column="6" declfile="tt_metal/host_api.hpp" declline="589" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1ab22345dc8b03b100e45ab58e8b0083fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EnqueueWaitForEvent</definition>
        <argsstring>(CommandQueue &amp;cq, const std::shared_ptr&lt; Event &gt; &amp;event)</argsstring>
        <name>EnqueueWaitForEvent</name>
        <qualifiedname>tt::tt_metal::EnqueueWaitForEvent</qualifiedname>
        <param>
          <type>CommandQueue &amp;</type>
          <declname>cq</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Event &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enqueues a command on the device for a given CQ (non-blocking). The command on device will block and wait for completion of the specified event (which may be in another CQ). Return value: void <table rows="4" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cq   </para>
</entry><entry thead="no"><para>The command queue object which dispatches the command to the hardware   </para>
</entry><entry thead="no"><para>CommandQueue &amp;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para>and waits for the event to complete.   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>event   </para>
</entry><entry thead="no"><para>The event object that this CQ will wait on for completion.   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Event&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="600" column="6" declfile="tt_metal/host_api.hpp" declline="600" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a27acbb08ee24cc2210c6e53386cf13e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::EventSynchronize</definition>
        <argsstring>(const std::shared_ptr&lt; Event &gt; &amp;event)</argsstring>
        <name>EventSynchronize</name>
        <qualifiedname>tt::tt_metal::EventSynchronize</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; Event &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocking function for host to synchronize (wait) on an event completion on device. Return value: void <table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>event   </para>
</entry><entry thead="no"><para>The event object that host will wait on for completion.   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Event&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="609" column="6" declfile="tt_metal/host_api.hpp" declline="609" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1aca41856d8f28ab8f09709a25a13a9f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tt::tt_metal::EventQuery</definition>
        <argsstring>(const std::shared_ptr&lt; Event &gt; &amp;event)</argsstring>
        <name>EventQuery</name>
        <qualifiedname>tt::tt_metal::EventQuery</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; Event &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Host will query an event for completion status on device. Return value: bool. True if event is completed, false otherwise. <table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>event   </para>
</entry><entry thead="no"><para>The event object that host will query for completion.   </para>
</entry><entry thead="no"><para>std::shared_ptr&lt;Event&gt;   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="618" column="6" declfile="tt_metal/host_api.hpp" declline="618" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="host__api_8hpp_1a8a7da70517597db5090819de93f3d75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tt::tt_metal::Synchronize</definition>
        <argsstring>(Device *device, const std::optional&lt; uint8_t &gt; cq_id=std::nullopt)</argsstring>
        <name>Synchronize</name>
        <qualifiedname>tt::tt_metal::Synchronize</qualifiedname>
        <param>
          <type>Device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const std::optional&lt; uint8_t &gt;</type>
          <declname>cq_id</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the device with host by waiting for all operations to complete. If cq_id is provided then only the operations associated with that cq_id are waited for, otherwise operations for all command queues are waited on.</para>
<para>Return value: void</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>device   </para>
</entry><entry thead="no"><para>The device to synchronize.   </para>
</entry><entry thead="no"><para>Device *   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>Yes    </para>
</entry></row>
<row>
<entry thead="no"><para>cq_id   </para>
</entry><entry thead="no"><para>The specific command queue id to synchronize .   </para>
</entry><entry thead="no"><para>uint8_t   </para>
</entry><entry thead="no"><para></para>
</entry><entry thead="no"><para>No   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/host_api.hpp" line="632" column="6" declfile="tt_metal/host_api.hpp" declline="632" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tt_metal/host_api.hpp" line="31" column="1"/>
  </compounddef>
</doxygen>
