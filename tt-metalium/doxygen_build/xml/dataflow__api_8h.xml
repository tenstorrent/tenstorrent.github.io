<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="dataflow__api_8h" kind="file" language="C++">
    <compoundname>dataflow_api.h</compoundname>
    <includes local="no">noc/noc_parameters.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="yes">core_config.h</includes>
    <includes local="yes">circular_buffer.h</includes>
    <includes local="yes">dataflow_cmd_bufs.h</includes>
    <includes local="yes">debug/sanitize_noc.h</includes>
    <includes local="yes">debug/waypoint.h</includes>
    <includes local="yes">eth_l1_address_map.h</includes>
    <includes local="yes">hostdevcommon/common_values.hpp</includes>
    <includes local="yes">risc_attribs.h</includes>
    <includes local="yes">umd/device/tt_silicon_driver_common.hpp</includes>
    <includes local="yes">utils/utils.h</includes>
    <includes local="yes">debug/assert.h</includes>
    <includes local="yes">dev_msgs.h</includes>
    <includedby refid="ethernet_2dataflow__api_8h" local="yes">tt_metal/hw/inc/ethernet/dataflow_api.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>tt_metal/hw/inc/dataflow_api.h</label>
        <link refid="dataflow__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>circular_buffer.h</label>
      </node>
      <node id="4">
        <label>core_config.h</label>
      </node>
      <node id="6">
        <label>dataflow_cmd_bufs.h</label>
      </node>
      <node id="14">
        <label>debug/assert.h</label>
      </node>
      <node id="7">
        <label>debug/sanitize_noc.h</label>
      </node>
      <node id="8">
        <label>debug/waypoint.h</label>
      </node>
      <node id="15">
        <label>dev_msgs.h</label>
      </node>
      <node id="9">
        <label>eth_l1_address_map.h</label>
      </node>
      <node id="10">
        <label>hostdevcommon/common_values.hpp</label>
      </node>
      <node id="2">
        <label>noc/noc_parameters.h</label>
      </node>
      <node id="11">
        <label>risc_attribs.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>umd/device/tt_silicon_driver_common.hpp</label>
      </node>
      <node id="13">
        <label>utils/utils.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>tt_metal/hw/inc/dataflow_api.h</label>
        <link refid="dataflow__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tt_metal/hw/inc/ethernet/dataflow_api.h</label>
        <link refid="ethernet_2dataflow__api_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structInterleavedAddrGen" prot="public">InterleavedAddrGen</innerclass>
    <innerclass refid="structInterleavedPow2AddrGen" prot="public">InterleavedPow2AddrGen</innerclass>
    <innerclass refid="structInterleavedAddrGenFast" prot="public">InterleavedAddrGenFast</innerclass>
    <innerclass refid="structInterleavedPow2AddrGenFast" prot="public">InterleavedPow2AddrGenFast</innerclass>
    <innernamespace refid="namespaceinterleaved__addr__gen">interleaved_addr_gen</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" prot="public" static="no">
        <name>NOC_UNICAST_WRITE_VC</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="59" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" prot="public" static="no">
        <name>NOC_MULTICAST_WRITE_VC</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="60" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a49104913a904db0ef5c642d10a33c923" prot="public" static="no">
        <name>NOC_DISPATCH_MULTICAST_WRITE_VC</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="61" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1afdf0e2f602d799115bb67b144ae7e3f7" prot="public" static="no">
        <name>EXCLUDE_ENABLED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="63" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a21a8a64d9844a79b222a12e5ddf42028" prot="public" static="no">
        <name>EXCLUDE_ENABLED_OFFSET</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="64" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1ad0fae11f46cf5042340264e92008ef07" prot="public" static="no">
        <name>EXCLUDE_DIRECTION_Y_OFFSET</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="65" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1aa3426d319a63d0c7ba70305b4e1dfe31" prot="public" static="no">
        <name>EXCLUDE_DIRECTION_X_OFFSET</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="66" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a3cdfe0cbd91a7e89ec5f265be58d2046" prot="public" static="no">
        <name>EXCLUDE_START_Y_OFFSET</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="67" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a5fa0dd89473ba937f0a6f07ab69fe7dc" prot="public" static="no">
        <name>EXCLUDE_START_X_OFFSET</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="68" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1a25a0d59e125c87ff2f8fe0c9a394626c" prot="public" static="no">
        <name>DYNAMIC_NOC_DIRECTION</name>
        <param><defname>noc</defname></param>
        <param><defname>direction</defname></param>
        <initializer>(noc == 1 ? 1 - direction : direction)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="69" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dataflow__api_8h_1ab97f9dbfbb4150cb324f21520b8e6cfe" prot="public" static="no">
        <name>get_compile_time_arg_val</name>
        <param><defname>arg_idx</defname></param>
        <initializer>KERNEL_COMPILE_TIME_ARG_##arg_idx</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of a constexpr argument from kernel_compile_time_args array provided during kernel creation using CreateKernel calls.</para>
<para>Return value: constexpr uint32_t</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>arg_idx   </para>
</entry><entry thead="no"><para>The index of the argument   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="202" column="9" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dataflow__api_8h_1acef291e41fb571dd8cdf11167e3aeeea" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t proc_type</definition>
        <argsstring></argsstring>
        <name>proc_type</name>
        <initializer>= static_cast&lt;std::underlying_type_t&lt;TensixProcessorTypes&gt;&gt;(TensixProcessorTypes::DM1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="33" column="19" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t noc_index</definition>
        <argsstring></argsstring>
        <name>noc_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="40" column="16" declfile="tt_metal/hw/inc/dataflow_api.h" declline="40" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t noc_mode</definition>
        <argsstring></argsstring>
        <name>noc_mode</name>
        <initializer>= DM_DEDICATED_NOC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="41" column="19" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1aa8529255dbc378d289f61049834e1ba4" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dram_bank_to_noc_xy[NUM_NOCS][NUM_DRAM_BANKS]</definition>
        <argsstring>[NUM_NOCS][NUM_DRAM_BANKS]</argsstring>
        <name>dram_bank_to_noc_xy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="43" column="17" declfile="tt_metal/hw/inc/dataflow_api.h" declline="43" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t bank_to_dram_offset[NUM_DRAM_BANKS]</definition>
        <argsstring>[NUM_DRAM_BANKS]</argsstring>
        <name>bank_to_dram_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="44" column="16" declfile="tt_metal/hw/inc/dataflow_api.h" declline="44" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1ae219168622cfdbefddcbc5eb36eff549" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t l1_bank_to_noc_xy[NUM_NOCS][NUM_L1_BANKS]</definition>
        <argsstring>[NUM_NOCS][NUM_L1_BANKS]</argsstring>
        <name>l1_bank_to_noc_xy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="45" column="17" declfile="tt_metal/hw/inc/dataflow_api.h" declline="45" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1a3d8a3a83201726ee0082488f787e1b89" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t bank_to_l1_offset[NUM_L1_BANKS]</definition>
        <argsstring>[NUM_L1_BANKS]</argsstring>
        <name>bank_to_l1_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="46" column="16" declfile="tt_metal/hw/inc/dataflow_api.h" declline="46" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1a2366e9251332058fa1fa368903d1d760" prot="public" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* rta_l1_base</definition>
        <argsstring></argsstring>
        <name>rta_l1_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="48" column="18" declfile="tt_metal/hw/inc/dataflow_api.h" declline="48" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1a74c5ca11f2fb15c25af4a74db732a5fc" prot="public" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* crta_l1_base</definition>
        <argsstring></argsstring>
        <name>crta_l1_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="49" column="18" declfile="tt_metal/hw/inc/dataflow_api.h" declline="49" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="dataflow__api_8h_1a237705982b987907cbfca699e32a9c64" prot="public" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>uint32_t* sem_l1_base[]</definition>
        <argsstring>[]</argsstring>
        <name>sem_l1_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="50" column="18" declfile="tt_metal/hw/inc/dataflow_api.h" declline="50" declcolumn="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dataflow__api_8h_1a25d62dac426c2869489c6a658de97058" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t get_arg_addr</definition>
        <argsstring>(int arg_idx)</argsstring>
        <name>get_arg_addr</name>
        <param>
          <type>int</type>
          <declname>arg_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the address in L1 for a given runtime argument index for unique (per core) runtime arguments set via SetRuntimeArgs() API.</para>
<para>Return value: Associated L1 address of given unique runtime argument index</para>
<para>| Argument | Description | Type | Valid Range | Required | |-------------<mdash/>|----------------------------------------------------------------------<mdash/>|-------<mdash/>|---------------------------------------------<mdash/>|-------<mdash/>| | arg_idx | Unique Runtime argument index | uint32_t | 0 to 255 | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="135" column="18" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aca9717f94b44990fc7fca49678eda5a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t get_common_arg_addr</definition>
        <argsstring>(int arg_idx)</argsstring>
        <name>get_common_arg_addr</name>
        <param>
          <type>int</type>
          <declname>arg_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the address in L1 for a given runtime argument index for common (all cores) runtime arguments set via SetCommonRuntimeArgs() API.</para>
<para>Return value: Associated L1 address of given common runtime argument index</para>
<para>| Argument | Description | Type | Valid Range | Required | |-------------<mdash/>|----------------------------------------------------------------------<mdash/>|-------<mdash/>|---------------------------------------------<mdash/>|-------<mdash/>| | arg_idx | Common Runtime argument index | uint32_t | 0 to 255 | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="152" column="18" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a6a5074e8cd2732fcecab57fced3ebd1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T get_arg_val</definition>
        <argsstring>(int arg_idx)</argsstring>
        <name>get_arg_val</name>
        <param>
          <type>int</type>
          <declname>arg_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value at a given runtime argument index for unique (per-core) runtime arguments set via SetRuntimeArgs() API.</para>
<para>Return value: The value associated with the unique runtime argument index</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------------------<mdash/>|---------------------------------------------<mdash/>|--------------------<mdash/>|------------------------<mdash/>|-------<mdash/>| | arg_idx | Unique Runtime argument index | uint32_t | 0 to 255 | True | | T (template argument) | Data type of the returned argument | Any 4-byte sized type | N/A | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="167" column="4" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1abba486e3732fb5ea715651f92234e60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T get_common_arg_val</definition>
        <argsstring>(int arg_idx)</argsstring>
        <name>get_common_arg_val</name>
        <param>
          <type>int</type>
          <declname>arg_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value at a given runtime argument index for common (all cores) runtime arguments set via SetCommonRuntimeArgs() API.</para>
<para>Return value: The value associated with the common runtime argument index</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------------------<mdash/>|---------------------------------------------<mdash/>|--------------------<mdash/>|------------------------<mdash/>|-------<mdash/>| | arg_idx | Common Runtime argument index | uint32_t | 0 to 255 | True | | T (template argument) | Data type of the returned argument | Any 4-byte sized type | N/A | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="186" column="4" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a4f3db5f995cef4fca051fe50ba763889" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::int32_t</type>
        <definition>static constexpr std::int32_t GET_TILE_SIZE</definition>
        <argsstring>(uint format)</argsstring>
        <name>GET_TILE_SIZE</name>
        <param>
          <type>uint</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="205" column="31" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="205" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aaac92d8e3952ed1c95ceb82071305b08" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
            <declname>tile_hw</declname>
            <defname>tile_hw</defname>
            <defval>1024</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::uint32_t</type>
        <definition>static constexpr std::uint32_t MUL_WITH_TILE_SIZE</definition>
        <argsstring>(uint format, uint index)</argsstring>
        <name>MUL_WITH_TILE_SIZE</name>
        <param>
          <type>uint</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="230" column="33" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="230" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a81357224b88562601b42833eec676ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cb_push_back</definition>
        <argsstring>(const int32_t operand, const int32_t num_pages)</argsstring>
        <name>cb_push_back</name>
        <param>
          <type>const int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes a given number of tiles in the back of the specified CB’s queue. Decreases the available space in the circular buffer by this number of tiles. This call is used by the producer to make the tiles visible to the consumer of the CB.</para>
<para>We use the convention that the producer pushes tiles into the “back” of the CB queue and the consumer consumes tiles from the “front” of the CB queue.</para>
<para>Note that the act of writing the tile data into the CB does not make the tiles visible to the consumer. Writing of the tiles and pushing is separated to allow the producer to: 1) write the tile data to the CB via multiple writes of sub-tiles 2) modify tiles (or sub-tiles) by random access of the valid section of the CB</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of tiles to be pushed | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="291" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="291" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aa3daf8e5e7299140cf2607be1a8656b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cb_pop_front</definition>
        <argsstring>(int32_t operand, int32_t num_pages)</argsstring>
        <name>cb_pop_front</name>
        <param>
          <type>int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops a specified number of tiles from the front of the specified CB. This also frees this number of tiles in the circular buffer. This call is used by the consumer to free up the space in the CB.</para>
<para>We use the convention that the producer pushes tiles into the “back” of the CB queue and the consumer consumes tiles from the “front” of the CB queue.</para>
<para>Note that the act of reading of the tile data from the CB does not free up the space in the CB. Waiting on available tiles and popping them is separated in order to allow the consumer to: 1) read the tile data from the CB via multiple reads of sub-tiles 2) access the tiles (or their sub-tiles) that are visible to the consumer by random access of the valid section of the CB</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of tiles to be popped | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="332" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="332" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af4a1a9478a83ad216d826dc5f783d1f8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::int32_t</type>
        <definition>constexpr std::int32_t get_tile_size</definition>
        <argsstring>(const std::int32_t operand)</argsstring>
        <name>get_tile_size</name>
        <param>
          <type>const std::int32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="353" column="31" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="353" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a8ccecfafffbcaa5ab433f25cec7fbd72" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t get_tile_hw</definition>
        <argsstring>(const std::int32_t operand)</argsstring>
        <name>get_tile_hw</name>
        <param>
          <type>const std::int32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="363" column="27" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a84cc2ffdf430e95ad915cca719f5fa2a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t get_tile_num_faces</definition>
        <argsstring>(const std::int32_t operand)</argsstring>
        <name>get_tile_num_faces</name>
        <param>
          <type>const std::int32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="368" column="27" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ae214b6c2f978e745f9c24d397dad906d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataFormat</type>
        <definition>constexpr DataFormat get_dataformat</definition>
        <argsstring>(const std::int32_t operand)</argsstring>
        <name>get_dataformat</name>
        <param>
          <type>const std::int32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="373" column="29" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a593e43aff0c85e4b3f86d13f1d7350dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t get_write_ptr</definition>
        <argsstring>(uint32_t operand)</argsstring>
        <name>get_write_ptr</name>
        <param>
          <type>uint32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the beginning of a memory block previously reserved by cb_reserve_back. Note that this call is only valid between calls to cb_reserve_back and cb_push_back. The amount of valid memory is equal to the number of tiles requested in a prior cb_reserve_back call.</para>
<para>CB total size must be an even multiple of this call.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>operand   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="394" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="394" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a66a31715a14cea1a63cbdca8c99b0827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t get_read_ptr</definition>
        <argsstring>(uint32_t operand)</argsstring>
        <name>get_read_ptr</name>
        <param>
          <type>uint32_t</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the beginning of a memory block previously received by cb_wait_front. Note that this call is only valid between calls to cb_wait_front and cb_pop_front. The amount of valid memory is equal to the number of tiles requested in a prior cb_wait_front call.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>operand   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="413" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="413" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af2384f3c7d9784e3e662093136cbed25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void wait_for_sync_register_value</definition>
        <argsstring>(uint32_t addr, int32_t val)</argsstring>
        <name>wait_for_sync_register_value</name>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="419" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="419" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aa465b4c6c7d0c83c7d27823ef3f97199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cb_pages_reservable_at_back</definition>
        <argsstring>(int32_t operand, int32_t num_pages)</argsstring>
        <name>cb_pages_reservable_at_back</name>
        <param>
          <type>int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A non-blocking call that checks if the specified number of pages are available for reservation at the back of the circular buffer. This call is used by the producer to see if the consumer has freed up the desired space (in pages).</para>
<para>CB total size must be an even multiple of the argument passed to this call.</para>
<para>Return value: true if the specified number of pages are available</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of free tiles to wait for | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="444" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="444" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a29521dee07b0070674a988f66c01ffed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cb_reserve_back</definition>
        <argsstring>(int32_t operand, int32_t num_pages)</argsstring>
        <name>cb_reserve_back</name>
        <param>
          <type>int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits for the specified number of tiles to be free in the specified circular buffer. This call is used by the producer to wait for the consumer to consume (ie. free up) the specified number of tiles.</para>
<para>CB total size must be an even multiple of the argument passed to this call.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of free tiles to wait for | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="479" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="479" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a579e354d124dd292ebf624551fb6f6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cb_pages_available_at_front</definition>
        <argsstring>(int32_t operand, int32_t num_pages)</argsstring>
        <name>cb_pages_available_at_front</name>
        <param>
          <type>int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A non-blocking call that tells the caller if the specified number of pages are available in the specified circular buffer (CB). This call is used by the consumer of the CB to see if the prodcuers has fill the CB with at least the specified number of tiles. Important note: in case multiple calls of cb_wait_front(n) are issued without a paired <ref refid="dataflow__api_8h_1aa3daf8e5e7299140cf2607be1a8656b0" kindref="member">cb_pop_front()</ref> call, n is expected to be incremented by the user to be equal to a cumulative total of tiles. Example: 4 calls of cb_wait_front(8) followed by a cb_pop_front(32) would produce incorrect behavior. Instead 4 calls of <ref refid="dataflow__api_8h_1af6d8057bd05a650c3501c5208f7d9f8a" kindref="member">cb_wait_front()</ref> waiting on 8, 16, 24, 32 tiles should be issued.</para>
<para>Important note: number of tiles used in all cb_* calls must evenly divide the cb size and must be the same number in all cb_wait_front calls in the same kernel. Example 1: cb_wait_front(32), cb_wait_front(40), cb_pop_front(32+8) tiles on a CB of size 64 would produce incorrect behavior. Example 2: cb_wait_front(3) on a cb of size 32 would also produce incorrect behavior. These limitations are due to performance optimizations in the CB implementation.</para>
<para>Important note: CB total size must be an even multiple of the argument passed to this call.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of tiles to check for | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="529" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="529" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af6d8057bd05a650c3501c5208f7d9f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cb_wait_front</definition>
        <argsstring>(int32_t operand, int32_t num_pages)</argsstring>
        <name>cb_wait_front</name>
        <param>
          <type>int32_t</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits for the specified number of tiles to be available in the specified circular buffer (CB). This call is used by the consumer of the CB to wait for the producer to fill the CB with at least the specified number of tiles. Important note: in case multiple calls of cb_wait_front(n) are issued without a paired <ref refid="dataflow__api_8h_1aa3daf8e5e7299140cf2607be1a8656b0" kindref="member">cb_pop_front()</ref> call, n is expected to be incremented by the user to be equal to a cumulative total of tiles. Example: 4 calls of cb_wait_front(8) followed by a cb_pop_front(32) would produce incorrect behavior. Instead 4 calls of <ref refid="dataflow__api_8h_1af6d8057bd05a650c3501c5208f7d9f8a" kindref="member">cb_wait_front()</ref> waiting on 8, 16, 24, 32 tiles should be issued.</para>
<para>Important note: number of tiles used in all cb_* calls must evenly divide the cb size and must be the same number in all cb_wait_front calls in the same kernel. Example 1: cb_wait_front(32), cb_wait_front(40), cb_pop_front(32+8) tiles on a CB of size 64 would produce incorrect behavior. Example 2: cb_wait_front(3) on a cb of size 32 would also produce incorrect behavior. These limitations are due to performance optimizations in the CB implementation.</para>
<para>Important note: CB total size must be an even multiple of the argument passed to this call.</para>
<para>Return value: None</para>
<para><table rows="2" cols="5"><row>
<entry thead="yes"><para>Argument   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Type   </para>
</entry><entry thead="yes"><para>Valid Range   </para>
</entry><entry thead="yes"><para>Required    </para>
</entry></row>
<row>
<entry thead="no"><para>cb_id   </para>
</entry><entry thead="no"><para>The index of the circular buffer (CB)   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>0 to 31   </para>
</entry><entry thead="no"><para>True   </para>
</entry></row>
</table>
| num_tiles | The number of tiles to wait for | uint32_t | It must be less or equal than the size of the CB (the total number of tiles that fit into the CB) | | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="561" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="561" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af404b93ad6dbb9393b882bbf936a75d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_multicast_addr</definition>
        <argsstring>(std::uint32_t noc_x_start, std::uint32_t noc_y_start, std::uint32_t noc_x_end, std::uint32_t noc_y_end, std::uint32_t addr, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_multicast_addr</name>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_x_start</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_y_start</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_x_end</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_y_end</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="579" column="15" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="579" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(std::uint32_t noc_x, std::uint32_t noc_y, std::uint32_t addr, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_x</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_y</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="599" column="15" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="599" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr_helper</definition>
        <argsstring>(std::uint32_t noc_xy, std::uint32_t addr)</argsstring>
        <name>get_noc_addr_helper</name>
        <param>
          <type>std::uint32_t</type>
          <declname>noc_xy</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="613" column="15" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="613" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ae8e59d5056ed48344b94e314fa8bd92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_noc_exclude_region</definition>
        <argsstring>(std::uint32_t exclude_start_x, std::uint32_t exclude_start_y, std::uint32_t exclude_dir_x, std::uint32_t exclude_dir_y, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_exclude_region</name>
        <param>
          <type>std::uint32_t</type>
          <declname>exclude_start_x</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>exclude_start_y</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>exclude_dir_x</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>exclude_dir_y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="622" column="15" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="622" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ae6cc2abf3ea7ef206891ca06b1174122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_dram_noc_addr</definition>
        <argsstring>(const uint32_t id, const uint32_t page_size, const uint32_t bank_base_address, const uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_dram_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>page_size</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bank_base_address</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="639" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="639" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a31a2b40a6884c495ec14250c528a4dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_l1_noc_addr</definition>
        <argsstring>(const uint32_t id, const uint32_t page_size, const uint32_t bank_base_address, const uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_l1_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>page_size</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bank_base_address</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="654" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="654" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1abe9291a1484765db08b61bb0be52135c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_system_memory_noc_addr</definition>
        <argsstring>(const uint32_t id, const uint32_t page_size, const uint32_t base_addr, const uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_system_memory_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>page_size</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>base_addr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="669" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="669" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a9e17f34cbfaaf63b2479e4f755aaa12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(std::uint32_t addr, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>std::uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="683" column="15" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="683" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a8aef5fd38ffe71fe3ec4a453aa39053b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_one_packet</definition>
        <argsstring>(std::uint64_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_one_packet</name>
        <param>
          <type>std::uint64_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="694" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="694" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af81638126b7666b792269be373577241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
            <declname>max_page_size</declname>
            <defname>max_page_size</defname>
            <defval>NOC_MAX_BURST_SIZE + 1</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_read</definition>
        <argsstring>(std::uint64_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read</name>
        <param>
          <type>std::uint64_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous read from a specified source node located at NOC coordinates (x,y) at a local address (encoded as a uint64_t using <emphasis>get_noc_addr</emphasis> function). The destination is in L1 memory on the Tensix core executing this function call. Also, see <emphasis>noc_async_read_barrier</emphasis>.</para>
<para>The source node can be either a DRAM bank, a Tensix core or a PCIe controller.</para>
<para>Return value: None</para>
<para>| Argument | Description | Data type | Valid range | required | |----------------<mdash/>|-------------------------------------------------<mdash/>|--------<mdash/>|---------------------------------------<mdash/>|-------<mdash/>| | src_noc_addr | Encoding of the source NOC location (x,y)+address | uint64_t | DOX-TODO(ref to explain valid coords) | Yes | | dst_local_l1_addr | Address in local L1 memory | uint32_t | 0..1MB | Yes | | size | Size of data transfer in bytes | uint32_t | 0..1MB | Yes | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="743" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="743" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a3070e5dc8b9ed311b89d154643c4f8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_one_packet_set_state</definition>
        <argsstring>(std::uint64_t src_noc_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_one_packet_set_state</name>
        <param>
          <type>std::uint64_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="762" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="762" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a4031bdbfa690ceee630ad17f8ca99fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>inc_num_issued</declname>
            <defname>inc_num_issued</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_read_one_packet_with_state</definition>
        <argsstring>(std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_one_packet_with_state</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="791" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="791" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a60d8bc61e237ad566538149901b548ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_set_state</definition>
        <argsstring>(std::uint64_t src_noc_addr, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_set_state</name>
        <param>
          <type>std::uint64_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="820" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="820" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aa006454ec0ae734836c80ecc0a4cfe18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>inc_num_issued</declname>
            <defname>inc_num_issued</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_read_with_state</definition>
        <argsstring>(std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_with_state</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="847" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="847" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a8894085f35db86f5dd1b884d5168c166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_inc_num_issued</definition>
        <argsstring>(std::uint32_t num_issued_reads_inc, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_inc_num_issued</name>
        <param>
          <type>std::uint32_t</type>
          <declname>num_issued_reads_inc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="892" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="892" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a0fff80388ddc749f68da0a8e72320a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_write_one_packet</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_one_packet</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="899" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="899" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ae99484885c567e016e23899f0408bd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_write_multicast_one_packet</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr_multicast, std::uint32_t size, std::uint32_t num_dests, bool linked=false, bool multicast_path_reserve=true, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_multicast_one_packet</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr_multicast</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>num_dests</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multicast_path_reserve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="936" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="936" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a107fbfba5c58e08da38918af048c8bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>non_posted</declname>
            <defname>non_posted</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_write_one_packet_set_state</definition>
        <argsstring>(std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc=noc_index, uint8_t vc=NOC_UNICAST_WRITE_VC)</argsstring>
        <name>noc_async_write_one_packet_set_state</name>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>vc</declname>
          <defval><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="979" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="979" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a47736387eba0f8f4d5523a504508636d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>non_posted</declname>
            <defname>non_posted</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_write_one_packet_with_state</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint32_t dst_noc_addr, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_one_packet_with_state</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_noc_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1006" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1006" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ac41af911427b28e8d8e87869679f27c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(const uint32_t id, const InterleavedAddrGen&lt; DRAM &gt; &amp;s, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen</ref>&lt; DRAM &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1297" column="16" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1297" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ae6c97b5ef900963ae9c3a5d87a7ef1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(const uint32_t id, const InterleavedPow2AddrGen&lt; DRAM &gt; &amp;s, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedPow2AddrGen" kindref="compound">InterleavedPow2AddrGen</ref>&lt; DRAM &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1314" column="16" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1314" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a6c2101cd8c2aec4bec53247d732a956c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>tile_hw</declname>
            <defname>tile_hw</defname>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(const uint32_t id, const InterleavedAddrGenFast&lt; DRAM, tile_hw &gt; &amp;s, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast</ref>&lt; DRAM, tile_hw &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1331" column="16" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1331" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a8f9a8e66a0842dcf7ed45aff4231ad9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>std::uint64_t get_noc_addr</definition>
        <argsstring>(const uint32_t id, const InterleavedPow2AddrGenFast&lt; DRAM &gt; &amp;s, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedPow2AddrGenFast" kindref="compound">InterleavedPow2AddrGenFast</ref>&lt; DRAM &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1348" column="16" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1348" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a3a4948036d7191e294716b03d68b9d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_read_page</definition>
        <argsstring>(const uint32_t id, const InterleavedAddrGen&lt; DRAM &gt; &amp;s, std::uint32_t dst_local_l1_addr, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_page</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen</ref>&lt; DRAM &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1365" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1365" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a94f6b951ebf9742b2bea80741ff47d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>tile_hw</declname>
            <defname>tile_hw</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_read_tile</definition>
        <argsstring>(const uint32_t id, const InterleavedAddrGenFast&lt; DRAM, tile_hw &gt; &amp;s, std::uint32_t dst_local_l1_addr, uint32_t offset=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_tile</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast</ref>&lt; DRAM, tile_hw &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>dst_local_l1_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1379" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1379" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a188eeb8f8c1f14b173ebe8c406133600" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
            <declname>max_page_size</declname>
            <defname>max_page_size</defname>
            <defval>NOC_MAX_BURST_SIZE + 1</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_write</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the Tensix core executing this function call. The destination is specified using a uint64_t encoding referencing an on-chip node located at NOC coordinates (x,y) and a local address created using get_noc_addr function. Also, see <emphasis>noc_async_write_barrier</emphasis>.</para>
<para>The destination node can be either a DRAM bank, Tensix core+L1 memory address or a PCIe controller.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |----------------<mdash/>|------------------------------------------------------<mdash/>|-------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>| | src_local_l1_addr | Source address in local L1 memory | uint32_t | 0..1MB | True | | dst_noc_addr | Encoding of the destination NOC location (x,y)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | size | Size of data transfer in bytes | uint32_t | 0..1MB | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1412" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1412" bodyend="1423"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a4f6b5afaf9a9f9f4d9692dcd59fc62a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>tile_hw</declname>
            <defname>tile_hw</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_write_tile</definition>
        <argsstring>(const uint32_t id, const InterleavedAddrGenFast&lt; DRAM, tile_hw &gt; &amp;s, std::uint32_t src_local_l1_addr, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_tile</name>
        <param>
          <type>const uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast</ref>&lt; DRAM, tile_hw &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1426" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1426" bodyend="1432"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aad24ffd7fc05b797ce38e6072c2f0eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ProgrammableCoreType</type>
            <declname>type</declname>
            <defname>type</defname>
            <defval>ProgrammableCoreType::TENSIX</defval>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t get_semaphore</definition>
        <argsstring>(uint32_t semaphore_id)</argsstring>
        <name>get_semaphore</name>
        <param>
          <type>uint32_t</type>
          <declname>semaphore_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1435" column="11" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1435" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1aa85bbb469e6f0aaeabed92f4aeb6fc71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_set_remote</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, uint8_t noc=noc_index)</argsstring>
        <name>noc_semaphore_set_remote</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1439" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1439" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ab5abf4783385b9983021c773f47e3874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
            <declname>max_page_size</declname>
            <defname>max_page_size</defname>
            <defval>NOC_MAX_BURST_SIZE + 1</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void noc_async_write_multicast</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr_multicast, std::uint32_t size, std::uint32_t num_dests, bool linked=false, bool multicast_path_reserve=true, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_multicast</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr_multicast</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>num_dests</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multicast_path_reserve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the Tensix core executing this function call to a rectangular destination grid. The destinations are specified using a uint64_t encoding referencing an on-chip grid of nodes located at NOC coordinate range (x_start,y_start,x_end,y_end) and a local address created using <emphasis>get_noc_multicast_addr</emphasis> function. Also, <emphasis>see noc_async_write_barrier</emphasis>.</para>
<para>The destination nodes can only be a set of Tensix cores + L1 memory address. The destination nodes must form a rectangular grid. The destination L1 memory address must be the same on all destination nodes.</para>
<para>With this API, the multicast sender cannot be part of the multicast destinations. If the multicast sender has to be in the multicast destinations (i.e. must perform a local L1 write), the other API variant <emphasis>noc_async_write_multicast_loopback_src</emphasis> can be used.</para>
<para>Note: The number of destinations needs to be non-zero. Besides that, there is no restriction on the number of destinations, i.e. the multicast destinations can span the full chip. However, as mentioned previously, the multicast source cannot be part of the destinations. So, the maximum number of destinations is number of cores - 1.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |---------------------<mdash/>|-----------------------------------------------------------------------<mdash/>|-------<mdash/>|------------------------------------------------------------<mdash/>|-------<mdash/>| | src_local_l1_addr | Source address in local L1 memory | uint32_t | 0..1MB | True | | dst_noc_addr_multicast | Encoding of the destinations nodes (x_start,y_start,x_end,y_end)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | size | Size of data transfer in bytes | uint32_t | 0..1MB | True | | num_dests | Number of destinations that the multicast source is targetting | uint32_t | 0..(number of cores -1) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1493" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1493" bodyend="1520"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a125909749e0596744b6b27c288d566ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_set_multicast</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr_multicast, std::uint32_t num_dests, bool linked=false, bool multicast_path_reserve=true, uint8_t noc=noc_index)</argsstring>
        <name>noc_semaphore_set_multicast</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr_multicast</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>num_dests</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multicast_path_reserve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the Tensix core executing this function call to a rectangular destination grid. The destinations are specified using a uint64_t encoding referencing an on-chip grid of nodes located at NOC coordinate range (x_start,y_start,x_end,y_end) and a local address created using <emphasis>get_noc_multicast_addr</emphasis> function. The size of data that is sent is 4 Bytes. This is usually used to set a semaphore value at the destination nodes, as a way of a synchronization mechanism. The same as <emphasis>noc_async_write_multicast</emphasis> with preset size of 4 Bytes.</para>
<para>With this API, the multicast sender cannot be part of the multicast destinations. If the multicast sender has to be in the multicast destinations (i.e. must perform a local L1 write), the other API variant <emphasis>noc_semaphore_set_multicast_loopback_src</emphasis> can be used.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |---------------------<mdash/>|-----------------------------------------------------------------------<mdash/>|-------<mdash/>|--------------------------------------------------------<mdash/>|-------<mdash/>| | src_local_l1_addr | Source address in local L1 memory | uint32_t | 0..1MB | True | | dst_noc_addr_multicast | Encoding of the destinations nodes (x_start,y_start,x_end,y_end)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | num_dests | Number of destinations that the multicast source is targetting | uint32_t | 0..(number of cores - 1) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1549" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1549" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ac0375e12b7323fe5f3e8c25a800b7882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_set_multicast_loopback_src</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr_multicast, std::uint32_t num_dests, bool linked=false, bool multicast_path_reserve=true, uint8_t noc=noc_index)</argsstring>
        <name>noc_semaphore_set_multicast_loopback_src</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr_multicast</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>num_dests</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multicast_path_reserve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the Tensix core executing this function call to a rectangular destination grid. The destinations are specified using a uint64_t encoding referencing an on-chip grid of nodes located at NOC coordinate range (x_start,y_start,x_end,y_end) and a local address created using <emphasis>get_noc_multicast_addr</emphasis> function. The size of data that is sent is 4 Bytes. This is usually used to set a semaphore value at the destination nodes, as a way of a synchronization mechanism. The same as <emphasis>noc_async_write_multicast</emphasis> with preset size of 4 Bytes.</para>
<para>Note: With this API, sending data only to the source node (when num_dests is 1) may result in unexpected behaviour. For some parameters, hangs have been observed. For some other parameters, nothing may happen. Consider using regular non multicast operations such as <emphasis>noc_async_write</emphasis> in this case.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |---------------------<mdash/>|-----------------------------------------------------------------------<mdash/>|-------<mdash/>|--------------------------------------------------------<mdash/>|-------<mdash/>| | src_local_l1_addr | Source address in local L1 memory | uint32_t | 0..1MB | True | | dst_noc_addr_multicast | Encoding of the destinations nodes (x_start,y_start,x_end,y_end)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | num_dests | Number of destinations that the multicast source is targetting | uint32_t | 0..(number of cores) | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1598" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1598" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a378aa2e8c1468ef8ef71ad74c70315a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_write_multicast_loopback_src</definition>
        <argsstring>(std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr_multicast, std::uint32_t size, std::uint32_t num_dests, bool linked=false, bool multicast_path_reserve=true, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_multicast_loopback_src</name>
        <param>
          <type>std::uint32_t</type>
          <declname>src_local_l1_addr</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dst_noc_addr_multicast</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>num_dests</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linked</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>multicast_path_reserve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1621" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1621" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a2326e9e29ea607bc865e50b614f197dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_barrier</definition>
        <argsstring>(uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_barrier</name>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write from a source address in L1 memory on the Tensix core executing this function call to an L-shaped destination which is defined by a grid and an exclusion zone. The destinations are specified using a uint64_t encoding referencing an on-chip grid of nodes located at NOC coordinate range (x_start,y_start,x_end,y_end) and a local address created using <emphasis>get_noc_multicast_addr</emphasis> function. Also, <emphasis>see noc_async_write_barrier</emphasis>. Similarly, the exclusion zone is specified using uint32_t encoding referencing an on-chip core and directions relative to it created using <emphasis>get_noc_exclude_region</emphasis> function.</para>
<para>The destination nodes can only be a set of Tensix cores + L1 memory address. The destination nodes must form an L-shaped grid (where dst_noc_addr_multicast defines a grid and exclude_region define a subgrid to exclude, the inner part of the L). The destination L1 memory address must be the same on all destination nodes.</para>
<para>With this API, the multicast sender cannot be part of the multicast destinations.</para>
<para>Note: The number of destinations needs to be non-zero. Besides that, there is no restriction on the number of destinations, i.e. the multicast destinations can span the full chip. However, as mentioned previously, the multicast source cannot be part of the destinations. So, the maximum number of destinations is number of cores - 1.</para>
<para>Return value: None</para>
<para>NOTE: only supported on Blackhole</para>
<para>| Argument | Description | Type | Valid Range | Required | |---------------------<mdash/>|-----------------------------------------------------------------------<mdash/>|-------<mdash/>|------------------------------------------------------------<mdash/>|-------<mdash/>| | src_local_l1_addr | Source address in local L1 memory | uint32_t | 0..1MB | True | | dst_noc_addr_multicast | Encoding of the destinations nodes (x_start,y_start,x_end,y_end)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | size | Size of data transfer in bytes | uint32_t | 0..1MB | True | | num_dests | Number of destinations that the multicast source is targetting | uint32_t | 0..(number of cores - 1) | True | | exclude_region | Encoding of the excluded regin (x_start,y_start,x_direction,y_direction) | uint32_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | This blocking call waits for all the outstanding enqueued <emphasis>noc_async_read</emphasis> calls issued on the current Tensix core to complete. After returning from this call the <emphasis>noc_async_read</emphasis> queue will be empty for the current Tensix core.</para>
<para>Return value: None </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1722" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1722" bodyend="1728"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a57f29294fed4616943f1592452706467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_write_barrier</definition>
        <argsstring>(uint8_t noc=noc_index)</argsstring>
        <name>noc_async_write_barrier</name>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This blocking call waits for all the outstanding enqueued <emphasis>noc_async_write</emphasis> calls issued on the current Tensix core to complete. After returning from this call the <emphasis>noc_async_write</emphasis> queue will be empty for the current Tensix core.</para>
<para>Return value: None </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1739" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1739" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a7075995d85a7119a04ad734bd34a4bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_writes_flushed</definition>
        <argsstring>(uint8_t noc=noc_index)</argsstring>
        <name>noc_async_writes_flushed</name>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This blocking call waits for all outstanding enqueued <emphasis>noc_async_write</emphasis> calls issued on the current Tensix core to depart, but will not wait for them to complete </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1755" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1755" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a13a74d46d62931d19a406414db103c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_atomic_barrier</definition>
        <argsstring>(uint8_t noc_idx=noc_index)</argsstring>
        <name>noc_async_atomic_barrier</name>
        <param>
          <type>uint8_t</type>
          <declname>noc_idx</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This blocking call waits for all the outstanding enqueued <emphasis>noc_async_write</emphasis> calls issued on the current Tensix core to complete. After returning from this call the <emphasis>noc_async_write</emphasis> queue will be empty for the current Tensix core.</para>
<para>Return value: None </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1770" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1770" bodyend="1774"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a4f714cc4a08a2eaac5e3f7fae9d1383a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_wait</definition>
        <argsstring>(volatile uint32_t *sem_addr, uint32_t val)</argsstring>
        <name>noc_semaphore_wait</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>sem_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits until the value of a local L1 memory address on the Tensix core executing this function becomes equal to a target value. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism. Also, see <emphasis>noc_semaphore_set</emphasis>.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>|-----------------<mdash/>|-------<mdash/>| | sem_addr | Semaphore address in local L1 memory | uint32_t | 0..1MB | True | | val | The target value of the semaphore | uint32_t | Any uint32_t value | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1791" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1791" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a84a965a61b65152c42835f35dca007af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_wait_min</definition>
        <argsstring>(volatile uint32_t *sem_addr, uint32_t val)</argsstring>
        <name>noc_semaphore_wait_min</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>sem_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A blocking call that waits until the value of a local L1 memory address on the Tensix core executing this function becomes equal or greater than a target value. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism. Also, see <emphasis>noc_semaphore_set</emphasis>.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>|-----------------<mdash/>|-------<mdash/>| | sem_addr | Semaphore address in local L1 memory | uint32_t | 0..1MB | True | | val | The target value of the semaphore | uint32_t | Any uint32_t value | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1814" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1814" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1af02a9af640679b00da874318535aa397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_set</definition>
        <argsstring>(volatile uint32_t *sem_addr, uint32_t val)</argsstring>
        <name>noc_semaphore_set</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>sem_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the value of a local L1 memory address on the Tensix core executing this function to a specific value. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism. Also, see <emphasis>noc_semaphore_wait</emphasis>.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>|-----------------<mdash/>|-------<mdash/>| | sem_addr | Semaphore address in local L1 memory | uint32_t | 0..1MB | True | | val | Value to set the semaphore to | uint32_t | Any uint32_t value | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1837" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1837" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1ab5f779ea1675acf61c46613048ce96e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_inline_dw_write</definition>
        <argsstring>(uint64_t addr, uint32_t val, uint8_t be=0xF, uint8_t noc=noc_index)</argsstring>
        <name>noc_inline_dw_write</name>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>be</declname>
          <defval>0xF</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initiates an asynchronous write of a 32-bit value to a NOC destination. Typically used for writing registers, but can be used for memory locations as well. The destination is specified as a 64-bit NOC address (see <emphasis>noc_async_write</emphasis>). The advantage over using <emphasis>noc_async_write</emphasis> is that we don&apos;t a Tensix L1 memory source location; the write value is written directly into a register. Unlike using <emphasis>noc_async_write</emphasis>, there are also no address alignment concerns. Also, see <emphasis>noc_async_write_barrier</emphasis>.</para>
<para>The destination node can be either a DRAM bank, Tensix core+L1 memory address or a PCIe controller.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>|------------------------------------------------------------<mdash/>|-------<mdash/>| | addr | Encoding of the destination location (x,y)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | val | The value to be written | uint32_t | Any uint32_t value | True | | be | Byte-enable | uint8_t | 0x1-0xF | False | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1864" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1864" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a962d804ce21d1d26ccb4241e2eb6ac9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_semaphore_inc</definition>
        <argsstring>(uint64_t addr, uint32_t incr, uint8_t noc_id=noc_index)</argsstring>
        <name>noc_semaphore_inc</name>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>incr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc_id</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Tensix core executing this function call initiates an atomic increment (with 32-bit wrap) of a remote Tensix core L1 memory address. This L1 memory address is used as a semaphore of size 4 Bytes, as a synchronization mechanism.</para>
<para>Return value: None</para>
<para>| Argument | Description | Type | Valid Range | Required | |--------<mdash/>|-------------------------------------------------------------<mdash/>|-------<mdash/>|------------------------------------------------------------<mdash/>|-------<mdash/>| | addr | Encoding of the destination location (x,y)+address | uint64_t | DOX-TODO(insert a reference to what constitutes valid coords) | True | | incr | The value to increment by | uint32_t | Any uint32_t value | True | </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1895" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1895" bodyend="1914"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a9e9618b5b64ed1ae0d0a747ac0f10745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RISC_POST_HEARTBEAT</definition>
        <argsstring>(uint32_t &amp;heartbeat)</argsstring>
        <name>RISC_POST_HEARTBEAT</name>
        <param>
          <type>uint32_t &amp;</type>
          <declname>heartbeat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1916" column="13" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1916" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a29bd290aaee1b41529717b029dc14952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t min</definition>
        <argsstring>(uint32_t a, uint32_t b)</argsstring>
        <name>min</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1924" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1924" bodyend="1924"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a009e28764f70f39d1a2ccaaba8681973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>use_vc</declname>
            <defname>use_vc</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t noc_async_read_tile_dram_sharded_set_state</definition>
        <argsstring>(uint32_t bank_base_address, uint32_t page_size, uint32_t bank_id=0, const uint32_t vc=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_tile_dram_sharded_set_state</name>
        <param>
          <type>uint32_t</type>
          <declname>bank_base_address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bank_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>vc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1927" column="11" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1927" bodyend="1953"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a61cf808450c0213bcdc180a038aac523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_tile_dram_sharded_with_state</definition>
        <argsstring>(uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_tile_dram_sharded_with_state</name>
        <param>
          <type>uint32_t</type>
          <declname>src_base_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trid</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1956" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1956" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a10ff412712df6c4f9f4e557ace59c1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_tile_dram_sharded_with_state_with_trid</definition>
        <argsstring>(uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_tile_dram_sharded_with_state_with_trid</name>
        <param>
          <type>uint32_t</type>
          <declname>src_base_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trid</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1973" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1973" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a905d1234815d8abd8aa72460d34386ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_tile_dram_sharded_set_trid</definition>
        <argsstring>(uint32_t trid=0, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_tile_dram_sharded_set_trid</name>
        <param>
          <type>uint32_t</type>
          <declname>trid</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1983" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1983" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a98abddb8e88027a5299d2124b3953d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noc_async_read_barrier_with_trid</definition>
        <argsstring>(uint32_t trid, uint8_t noc=noc_index)</argsstring>
        <name>noc_async_read_barrier_with_trid</name>
        <param>
          <type>uint32_t</type>
          <declname>trid</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="1992" column="6" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="1992" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1afc3f8b4dc67a0610cafdafd77d70ee69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t get_noc_addr_from_bank_id</definition>
        <argsstring>(uint32_t bank_id, uint32_t bank_address_offset, uint8_t noc=noc_index)</argsstring>
        <name>get_noc_addr_from_bank_id</name>
        <param>
          <type>uint32_t</type>
          <declname>bank_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bank_address_offset</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>noc</declname>
          <defval><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="2004" column="10" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="2004" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="dataflow__api_8h_1a89bd02fcd6c82d77fa51b346b6a97d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>DRAM</declname>
            <defname>DRAM</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>page_size</declname>
            <defname>page_size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_interleaved_addr_gen</definition>
        <argsstring>(uint32_t base_addr)</argsstring>
        <name>get_interleaved_addr_gen</name>
        <param>
          <type>uint32_t</type>
          <declname>base_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tt_metal/hw/inc/dataflow_api.h" line="2017" column="7" bodyfile="tt_metal/hw/inc/dataflow_api.h" bodystart="2017" bodyend="2031"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>©<sp/>2023<sp/>Tenstorrent<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&quot;chlkc_unpack_data_format.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chlkc_pack_data_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chlkc_unpack_data_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chlkc_unpack_tile_dims.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_FORMATS_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;noc/noc_parameters.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;circular_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dataflow_cmd_bufs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug/sanitize_noc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug/waypoint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eth_l1_address_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hostdevcommon/common_values.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;risc_attribs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;umd/device/tt_silicon_driver_common.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug/assert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dev_msgs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMPILE_FOR_BRISC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1acef291e41fb571dd8cdf11167e3aeeea" kindref="member">proc_type</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type_t&lt;TensixProcessorTypes&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TensixProcessorTypes::DM0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="dataflow__api_8h_1acef291e41fb571dd8cdf11167e3aeeea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1acef291e41fb571dd8cdf11167e3aeeea" kindref="member">proc_type</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type_t&lt;TensixProcessorTypes&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TensixProcessorTypes::DM1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(KERNEL_BUILD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref><sp/>=<sp/>NOC_INDEX;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>=<sp/>NOC_MODE;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>;</highlight></codeline>
<codeline lineno="41" refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>=<sp/>DM_DEDICATED_NOC;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="dataflow__api_8h_1aa8529255dbc378d289f61049834e1ba4" kindref="member">dram_bank_to_noc_xy</ref>[NUM_NOCS][NUM_DRAM_BANKS];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[NUM_DRAM_BANKS];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="dataflow__api_8h_1ae219168622cfdbefddcbc5eb36eff549" kindref="member">l1_bank_to_noc_xy</ref>[NUM_NOCS][NUM_L1_BANKS];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="dataflow__api_8h_1a3d8a3a83201726ee0082488f787e1b89" kindref="member">bank_to_l1_offset</ref>[NUM_L1_BANKS];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>tt_l1_ptr*<sp/><ref refid="dataflow__api_8h_1a2366e9251332058fa1fa368903d1d760" kindref="member">rta_l1_base</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>tt_l1_ptr*<sp/><ref refid="dataflow__api_8h_1a74c5ca11f2fb15c25af4a74db732a5fc" kindref="member">crta_l1_base</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>tt_l1_ptr*<sp/><ref refid="dataflow__api_8h_1a237705982b987907cbfca699e32a9c64" kindref="member">sem_l1_base</ref>[];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>VC<sp/>1<sp/>for<sp/>unicast<sp/>writes,<sp/>and<sp/>VC<sp/>4<sp/>for<sp/>mcast<sp/>writes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOC_UNICAST_WRITE_VC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOC_MULTICAST_WRITE_VC<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="dataflow__api_8h_1a49104913a904db0ef5c642d10a33c923" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOC_DISPATCH_MULTICAST_WRITE_VC<sp/>5<sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>dispatch<sp/>cores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="dataflow__api_8h_1afdf0e2f602d799115bb67b144ae7e3f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_ENABLED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="dataflow__api_8h_1a21a8a64d9844a79b222a12e5ddf42028" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_ENABLED_OFFSET<sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="dataflow__api_8h_1ad0fae11f46cf5042340264e92008ef07" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_DIRECTION_Y_OFFSET<sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="dataflow__api_8h_1aa3426d319a63d0c7ba70305b4e1dfe31" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_DIRECTION_X_OFFSET<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="dataflow__api_8h_1a3cdfe0cbd91a7e89ec5f265be58d2046" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_START_Y_OFFSET<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="dataflow__api_8h_1a5fa0dd89473ba937f0a6f07ab69fe7dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXCLUDE_START_X_OFFSET<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="dataflow__api_8h_1a25a0d59e125c87ff2f8fe0c9a394626c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNAMIC_NOC_DIRECTION(noc,<sp/>direction)<sp/>(noc<sp/>==<sp/>1<sp/>?<sp/>1<sp/>-<sp/>direction<sp/>:<sp/>direction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(NUM_NOCS<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Scratch&quot;<sp/>in<sp/>L1<sp/>has<sp/>space<sp/>allocated<sp/>for<sp/>256<sp/>DRAM<sp/>and<sp/>L1<sp/>enteries,<sp/>to<sp/>store<sp/>offsets<sp/>and<sp/>NOC<sp/>XY<sp/>data.<sp/>(MEM_BANK_TO_NOC_XY_SCRATCH<sp/>and<sp/>MEM_BANK_OFFSET_SCRATCH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">((NUM_DRAM_BANKS<sp/>+<sp/>NUM_L1_BANKS)<sp/>&lt;=<sp/>256);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="namespaceinterleaved__addr__gen" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinterleaved__addr__gen" kindref="compound">interleaved_addr_gen</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="78" refid="namespaceinterleaved__addr__gen_1a4018be9d6302207fdc0dac085663e184" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="namespaceinterleaved__addr__gen_1a4018be9d6302207fdc0dac085663e184" kindref="member">get_bank_offset_index</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(DRAM)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>DRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IS_NOT_POW2_NUM_DRAM_BANKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>udivsi3_const_divisor&lt;NUM_DRAM_BANKS&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>LOG_BASE_2_OF_NUM_DRAM_BANKS;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>L1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IS_NOT_POW2_NUM_L1_BANKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>udivsi3_const_divisor&lt;NUM_L1_BANKS&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>LOG_BASE_2_OF_NUM_L1_BANKS;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="95" refid="namespaceinterleaved__addr__gen_1a63194c761e19c2a9d096f91c9e9be63c" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="namespaceinterleaved__addr__gen_1a63194c761e19c2a9d096f91c9e9be63c" kindref="member">get_bank_index</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint32_t<sp/>bank_offset_index)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(DRAM)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>DRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>-<sp/>bank_offset_index<sp/>*<sp/>NUM_DRAM_BANKS;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>L1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>-<sp/>bank_offset_index<sp/>*<sp/>NUM_L1_BANKS;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="104" refid="namespaceinterleaved__addr__gen_1a5a9ecce3a6a35846d19425e4b193d37e" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="namespaceinterleaved__addr__gen_1a5a9ecce3a6a35846d19425e4b193d37e" kindref="member">get_noc_xy</ref>(uint32_t<sp/>bank_index,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(DRAM)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>DRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1aa8529255dbc378d289f61049834e1ba4" kindref="member">dram_bank_to_noc_xy</ref>[noc][bank_index];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>L1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ae219168622cfdbefddcbc5eb36eff549" kindref="member">l1_bank_to_noc_xy</ref>[noc][bank_index];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="113" refid="namespaceinterleaved__addr__gen_1a593eecf4e9f53608d0c5c82e54b36b03" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="namespaceinterleaved__addr__gen_1a593eecf4e9f53608d0c5c82e54b36b03" kindref="member">get_bank_offset</ref>(uint32_t<sp/>bank_index)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(DRAM)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>DRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[bank_index];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>L1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a3d8a3a83201726ee0082488f787e1b89" kindref="member">bank_to_l1_offset</ref>[bank_index];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>interleaved_addr_gen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCE_INLINE<sp/>uint32_t<sp/>get_arg_addr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_idx)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)&amp;<ref refid="dataflow__api_8h_1a2366e9251332058fa1fa368903d1d760" kindref="member">rta_l1_base</ref>[arg_idx];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCE_INLINE<sp/>uint32_t<sp/>get_common_arg_addr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)&amp;<ref refid="dataflow__api_8h_1a74c5ca11f2fb15c25af4a74db732a5fc" kindref="member">crta_l1_base</ref>[arg_idx];<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="167" refid="dataflow__api_8h_1a6a5074e8cd2732fcecab57fced3ebd1f" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>T<sp/><ref refid="dataflow__api_8h_1a6a5074e8cd2732fcecab57fced3ebd1f" kindref="member">get_arg_val</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_idx)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>4B<sp/>args<sp/>are<sp/>supported<sp/>(eg<sp/>int32,<sp/>uint32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Error:<sp/>only<sp/>4B<sp/>args<sp/>are<sp/>supported&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((tt_l1_ptr<sp/>T*)(get_arg_addr(arg_idx)));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="186" refid="dataflow__api_8h_1abba486e3732fb5ea715651f92234e60a" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>T<sp/><ref refid="dataflow__api_8h_1abba486e3732fb5ea715651f92234e60a" kindref="member">get_common_arg_val</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_idx)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>4B<sp/>args<sp/>are<sp/>supported<sp/>(eg<sp/>int32,<sp/>uint32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Error:<sp/>only<sp/>4B<sp/>args<sp/>are<sp/>supported&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>T*)(get_common_arg_addr(arg_idx)));</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="dataflow__api_8h_1ab97f9dbfbb4150cb324f21520b8e6cfe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>get_compile_time_arg_val(arg_idx)<sp/>KERNEL_COMPILE_TIME_ARG_##arg_idx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::int32_t<sp/>GET_TILE_SIZE(uint<sp/>format)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(format<sp/>&amp;<sp/>0x1F)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float16_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((2048));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float16):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((2048));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt8):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((1024));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt16):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((2048));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp8):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp8_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((1024)<sp/>+<sp/>(64));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Int32):</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt32):</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float32):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((4096));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp4):</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp4_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((512)<sp/>+<sp/>(64));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp2):</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp2_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((256)<sp/>+<sp/>(64));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((1024)<sp/>+<sp/>(64));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>tile_hw<sp/>=<sp/>1024&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::uint32_t<sp/>MUL_WITH_TILE_SIZE(uint<sp/>format,<sp/>uint<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/>datum_shift<sp/>=<sp/>(tile_hw<sp/>==<sp/>1024)<sp/><sp/>?<sp/>10</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>512)<sp/>?<sp/>9</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>256)<sp/>?<sp/>8</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>128)<sp/>?<sp/>7</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>64)<sp/><sp/>?<sp/>6</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>32)<sp/><sp/>?<sp/>5</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>16)<sp/><sp/>?<sp/>4</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>10;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint8_t<sp/>exp_shift<sp/>=<sp/>(tile_hw<sp/>==<sp/>1024)<sp/><sp/>?<sp/>6</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>512)<sp/>?<sp/>5</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>256)<sp/>?<sp/>4</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>128)<sp/>?<sp/>4</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>64)<sp/><sp/>?<sp/>4</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>32)<sp/><sp/>?<sp/>4</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(tile_hw<sp/>==<sp/>16)<sp/><sp/>?<sp/>4</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(format<sp/>&amp;<sp/>0x1F)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt8):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(index<sp/>&lt;&lt;<sp/>datum_shift);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt16):</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float16):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float16_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(index<sp/>&lt;&lt;<sp/>(datum_shift<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Int32):</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::UInt32):</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Float32):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(index<sp/>&lt;&lt;<sp/>(datum_shift<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp2):</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp2_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((index<sp/>&lt;&lt;<sp/>(datum_shift<sp/>-<sp/>2))<sp/>+<sp/>(index<sp/>&lt;&lt;<sp/>(exp_shift)));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp4):</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp4_b):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((index<sp/>&lt;&lt;<sp/>(datum_shift<sp/>-<sp/>1))<sp/>+<sp/>(index<sp/>&lt;&lt;<sp/>(exp_shift)));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp8):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>((uint8_t)DataFormat::Bfp8_b):</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>default<sp/>as<sp/>Bfp8?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((index<sp/>&lt;&lt;<sp/>datum_shift)<sp/>+<sp/>(index<sp/>&lt;&lt;<sp/>(exp_shift)));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="291" refid="dataflow__api_8h_1a81357224b88562601b42833eec676ffb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a81357224b88562601b42833eec676ffb" kindref="member">cb_push_back</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>operand,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_words<sp/>=<sp/>num_pages<sp/>*<sp/>get_local_cb_interface(operand).fifo_page_size;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_reg_ptr<sp/>uint32_t*<sp/>pages_received_ptr<sp/>=<sp/>get_cb_tiles_received_ptr(operand);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>pages_received_ptr[0]<sp/>+=<sp/>num_pages;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>get_local_cb_interface(operand).fifo_wr_ptr<sp/>+=<sp/>num_words;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>basically<sp/>reset<sp/>fifo_wr_ptr<sp/>to<sp/>fifo_addr<sp/>--<sp/>no<sp/>other<sp/>wrap<sp/>is<sp/>legal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>producer<sp/>always<sp/>writes<sp/>into<sp/>contiguous<sp/>memory,<sp/>it<sp/>cannot<sp/>wrap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(get_local_cb_interface(operand).fifo_wr_ptr<sp/>&lt;=<sp/>get_local_cb_interface(operand).fifo_limit);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_local_cb_interface(operand).fifo_wr_ptr<sp/>==<sp/>get_local_cb_interface(operand).fifo_limit)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>change<sp/>this<sp/>to<sp/>fifo_wr_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_local_cb_interface(operand).fifo_wr_ptr<sp/>-=<sp/>get_local_cb_interface(operand).fifo_size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="332" refid="dataflow__api_8h_1aa3daf8e5e7299140cf2607be1a8656b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1aa3daf8e5e7299140cf2607be1a8656b0" kindref="member">cb_pop_front</ref>(int32_t<sp/>operand,<sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_reg_ptr<sp/>uint32_t*<sp/>pages_acked_ptr<sp/>=<sp/>get_cb_tiles_acked_ptr(operand);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>pages_acked_ptr[0]<sp/>+=<sp/>num_pages;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_words<sp/>=<sp/>num_pages<sp/>*<sp/>get_local_cb_interface(operand).fifo_page_size;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>get_local_cb_interface(operand).fifo_rd_ptr<sp/>+=<sp/>num_words;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>basically<sp/>reset<sp/>fifo_rd_ptr<sp/>to<sp/>fifo_addr<sp/>--<sp/>no<sp/>other<sp/>wrap<sp/>is<sp/>legal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consumer<sp/>always<sp/>reads<sp/>from<sp/>contiguous<sp/>memory,<sp/>it<sp/>cannot<sp/>wrap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(get_local_cb_interface(operand).fifo_rd_ptr<sp/>&lt;=<sp/>get_local_cb_interface(operand).fifo_limit);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_local_cb_interface(operand).fifo_rd_ptr<sp/>==<sp/>get_local_cb_interface(operand).fifo_limit)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>change<sp/>this<sp/>to<sp/>fifo_wr_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_local_cb_interface(operand).fifo_rd_ptr<sp/>-=<sp/>get_local_cb_interface(operand).fifo_size;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DATA_FORMATS_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>API<sp/>is<sp/>used<sp/>by<sp/>both<sp/>the<sp/>reader<sp/>and<sp/>writer<sp/>side<sp/>of<sp/>the<sp/>CB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>uses<sp/>unpack_src_format,<sp/>but<sp/>because<sp/>unpack_src_format<sp/>==<sp/>pack_dst_format,<sp/>we<sp/>can<sp/>use<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="dataflow__api_8h_1af4a1a9478a83ad216d826dc5f783d1f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::int32_t<sp/><ref refid="dataflow__api_8h_1af4a1a9478a83ad216d826dc5f783d1f8" kindref="member">get_tile_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>input<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>L1<sp/>16B<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_words<sp/>=<sp/>(uint)unpack_tile_size[input];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_words;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="dataflow__api_8h_1a8ccecfafffbcaa5ab433f25cec7fbd72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="dataflow__api_8h_1a8ccecfafffbcaa5ab433f25cec7fbd72" kindref="member">get_tile_hw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>input<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)unpack_tile_r_dim[input]<sp/>*<sp/>(uint32_t)unpack_tile_c_dim[input];</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="dataflow__api_8h_1a84cc2ffdf430e95ad915cca719f5fa2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="dataflow__api_8h_1a84cc2ffdf430e95ad915cca719f5fa2a" kindref="member">get_tile_num_faces</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>input<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)unpack_tile_num_faces[input];</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="dataflow__api_8h_1ae214b6c2f978e745f9c24d397dad906d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DataFormat<sp/><ref refid="dataflow__api_8h_1ae214b6c2f978e745f9c24d397dad906d" kindref="member">get_dataformat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DataFormat</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((uint)unpack_src_format[operand]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="394" refid="dataflow__api_8h_1a593e43aff0c85e4b3f86d13f1d7350dd" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="dataflow__api_8h_1a593e43aff0c85e4b3f86d13f1d7350dd" kindref="member">get_write_ptr</ref>(uint32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>byte<sp/>address<sp/>(fifo_wr_ptr<sp/>is<sp/>16B<sp/>address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>wr_ptr_bytes<sp/>=<sp/>get_local_cb_interface(operand).fifo_wr_ptr;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wr_ptr_bytes;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="413" refid="dataflow__api_8h_1a66a31715a14cea1a63cbdca8c99b0827" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="dataflow__api_8h_1a66a31715a14cea1a63cbdca8c99b0827" kindref="member">get_read_ptr</ref>(uint32_t<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>byte<sp/>address<sp/>(fifo_rd_ptr<sp/>is<sp/>16B<sp/>address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rd_ptr_bytes<sp/>=<sp/>get_local_cb_interface(operand).fifo_rd_ptr;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rd_ptr_bytes;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="dataflow__api_8h_1af2384f3c7d9784e3e662093136cbed25" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1af2384f3c7d9784e3e662093136cbed25" kindref="member">wait_for_sync_register_value</ref>(uint32_t<sp/>addr,<sp/>int32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_reg_ptr<sp/>uint32_t*<sp/>reg_ptr<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*)addr;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>reg_value;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;SW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>reg_ptr[0];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(reg_value<sp/>!=<sp/>val);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;SD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="444" refid="dataflow__api_8h_1aa465b4c6c7d0c83c7d27823ef3f97199" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1aa465b4c6c7d0c83c7d27823ef3f97199" kindref="member">cb_pages_reservable_at_back</ref>(int32_t<sp/>operand,<sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_acked_ptr<sp/>=<sp/>(uint32_t)get_cb_tiles_acked_ptr(operand);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>the<sp/>producer<sp/>(write-side<sp/>interface)<sp/>is<sp/>waiting<sp/>for<sp/>space<sp/>to<sp/>free<sp/>up<sp/>&quot;tiles_pushed&quot;<sp/>is<sp/>not<sp/>changing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;tiles_pushed&quot;<sp/>is<sp/>updated<sp/>by<sp/>the<sp/>producer<sp/>only<sp/>when<sp/>the<sp/>tiles<sp/>are<sp/>pushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_received<sp/>=<sp/>get_cb_tiles_received_ptr(operand)[0];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint16_t&apos;s<sp/>here<sp/>because<sp/>Tensix<sp/>updates<sp/>the<sp/>val<sp/>at<sp/>tiles_acked_ptr<sp/>as<sp/>uint16<sp/>in<sp/>llk_pop_tiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>I<sp/>think<sp/>we<sp/>could<sp/>have<sp/>TRISC<sp/>update<sp/>tiles_acked_ptr,<sp/>and<sp/>we<sp/>wouldn&apos;t<sp/>need<sp/>uint16<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>pages_acked<sp/>=<sp/>(uint16_t)reg_read(pages_acked_ptr);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_GRAYSKULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>test<sp/>slows<sp/>down<sp/>by<sp/>5%<sp/>when<sp/>removing<sp/>the<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(pgk)<sp/>investigate<sp/>GS<sp/>arbiter<sp/>WAR<sp/>in<sp/>compiler,<sp/>is<sp/>this<sp/>fixing<sp/>an<sp/>issue<sp/>there?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>models/experimental/stable_diffusion/tests/test_perf_unbatched_stable_diffusion.py::test_perf_bare_metal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>local_mem_barrier<sp/>=<sp/>pages_acked;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>free_space_pages_wrap<sp/>=<sp/>get_local_cb_interface(operand).fifo_num_pages<sp/>-<sp/>(pages_received<sp/>-<sp/>pages_acked);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_pages<sp/>&lt;=<sp/>static_cast&lt;int32_t&gt;(free_space_pages_wrap);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="479" refid="dataflow__api_8h_1a29521dee07b0070674a988f66c01ffed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a29521dee07b0070674a988f66c01ffed" kindref="member">cb_reserve_back</ref>(int32_t<sp/>operand,<sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_acked_ptr<sp/>=<sp/>(uint32_t)get_cb_tiles_acked_ptr(operand);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>the<sp/>producer<sp/>(write-side<sp/>interface)<sp/>is<sp/>waiting<sp/>for<sp/>space<sp/>to<sp/>free<sp/>up<sp/>&quot;tiles_pushed&quot;<sp/>is<sp/>not<sp/>changing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;tiles_pushed&quot;<sp/>is<sp/>updated<sp/>by<sp/>the<sp/>producer<sp/>only<sp/>when<sp/>the<sp/>tiles<sp/>are<sp/>pushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_received<sp/>=<sp/>get_cb_tiles_received_ptr(operand)[0];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>free_space_pages;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;CRBW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint16_t&apos;s<sp/>here<sp/>because<sp/>Tensix<sp/>updates<sp/>the<sp/>val<sp/>at<sp/>tiles_acked_ptr<sp/>as<sp/>uint16<sp/>in<sp/>llk_pop_tiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>I<sp/>think<sp/>we<sp/>could<sp/>have<sp/>TRISC<sp/>update<sp/>tiles_acked_ptr,<sp/>and<sp/>we<sp/>wouldn&apos;t<sp/>need<sp/>uint16<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>pages_acked<sp/>=<sp/>(uint16_t)reg_read(pages_acked_ptr);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_GRAYSKULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>test<sp/>slows<sp/>down<sp/>by<sp/>5%<sp/>when<sp/>removing<sp/>the<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(pgk)<sp/>investigate<sp/>GS<sp/>arbiter<sp/>WAR<sp/>in<sp/>compiler,<sp/>is<sp/>this<sp/>fixing<sp/>an<sp/>issue<sp/>there?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>models/experimental/stable_diffusion/tests/test_perf_unbatched_stable_diffusion.py::test_perf_bare_metal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>local_mem_barrier<sp/>=<sp/>pages_acked;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>free_space_pages_wrap<sp/>=</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_local_cb_interface(operand).fifo_num_pages<sp/>-<sp/>(pages_received<sp/>-<sp/>pages_acked);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_space_pages<sp/>=<sp/>(int32_t)free_space_pages_wrap;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(free_space_pages<sp/>&lt;<sp/>num_pages);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;CRBD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="529" refid="dataflow__api_8h_1a579e354d124dd292ebf624551fb6f6cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a579e354d124dd292ebf624551fb6f6cf" kindref="member">cb_pages_available_at_front</ref>(int32_t<sp/>operand,<sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_acked<sp/>=<sp/>get_cb_tiles_acked_ptr(operand)[0];</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_received_ptr<sp/>=<sp/>(uint32_t)get_cb_tiles_received_ptr(operand);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>pages_received<sp/>=<sp/>((uint16_t)reg_read(pages_received_ptr))<sp/>-<sp/>pages_acked;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_pages<sp/>&lt;=<sp/>pages_received;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="561" refid="dataflow__api_8h_1af6d8057bd05a650c3501c5208f7d9f8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1af6d8057bd05a650c3501c5208f7d9f8a" kindref="member">cb_wait_front</ref>(int32_t<sp/>operand,<sp/>int32_t<sp/>num_pages)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_acked<sp/>=<sp/>get_cb_tiles_acked_ptr(operand)[0];</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pages_received_ptr<sp/>=<sp/>(uint32_t)get_cb_tiles_received_ptr(operand);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>pages_received;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;CWFW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pages_received<sp/>=<sp/>((uint16_t)reg_read(pages_received_ptr))<sp/>-<sp/>pages_acked;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pages_received<sp/>&lt;<sp/>num_pages);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;CWFD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOC<sp/>transfers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>APIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="579" refid="dataflow__api_8h_1af404b93ad6dbb9393b882bbf936a75d9" refkind="member"><highlight class="normal">std::uint64_t<sp/><ref refid="dataflow__api_8h_1af404b93ad6dbb9393b882bbf936a75d9" kindref="member">get_noc_multicast_addr</ref>(</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>noc_x_start,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>noc_y_start,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>noc_x_end,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>noc_y_end,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>addr,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>encoding<sp/>which<sp/>contains<sp/>tensix<sp/>core<sp/>and<sp/>address<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read<sp/>from/write<sp/>to<sp/>via<sp/>the<sp/>noc</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOC_MULTICAST_ADDR(</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_X(noc,<sp/>noc_x_start),</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_Y(noc,<sp/>noc_y_start),</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_X(noc,<sp/>noc_x_end),</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_Y(noc,<sp/>noc_y_end),</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="599" refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" refkind="member"><highlight class="normal">std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(std::uint32_t<sp/>noc_x,<sp/>std::uint32_t<sp/>noc_y,<sp/>std::uint32_t<sp/>addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>encoding<sp/>which<sp/>contains<sp/>tensix<sp/>core<sp/>and<sp/>address<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>to<sp/>via<sp/>the<sp/>noc<sp/>multicast</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOC_XY_ADDR(DYNAMIC_NOC_X(noc,<sp/>noc_x),<sp/>DYNAMIC_NOC_Y(noc,<sp/>noc_y),<sp/>addr);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/>Need<sp/>an<sp/>alias<sp/>to<sp/>get_noc_addr<sp/>so<sp/>that<sp/>the<sp/>structs<sp/>below<sp/>don&apos;t<sp/>confuse<sp/>the<sp/>above<sp/>get_noc_addr<sp/>with</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>struct<sp/>variant</highlight></codeline>
<codeline lineno="611"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="613" refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" refkind="member"><highlight class="normal">std::uint64_t<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(std::uint32_t<sp/>noc_xy,<sp/>std::uint32_t<sp/>addr)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>encoding<sp/>which<sp/>contains<sp/>tensix<sp/>core<sp/>and<sp/>address<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>to<sp/>via<sp/>the<sp/>noc<sp/>multicast</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint64_t)(noc_xy)<sp/>&lt;&lt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>|<sp/>addr;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="622" refid="dataflow__api_8h_1ae8e59d5056ed48344b94e314fa8bd92c" refkind="member"><highlight class="normal">std::uint32_t<sp/><ref refid="dataflow__api_8h_1ae8e59d5056ed48344b94e314fa8bd92c" kindref="member">get_noc_exclude_region</ref>(</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>exclude_start_x,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>exclude_start_y,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>exclude_dir_x,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>exclude_dir_y,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>encoding<sp/>which<sp/>contians<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>exclusion<sp/>area</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1afdf0e2f602d799115bb67b144ae7e3f7" kindref="member">EXCLUDE_ENABLED</ref><sp/>&lt;&lt;<sp/><ref refid="dataflow__api_8h_1a21a8a64d9844a79b222a12e5ddf42028" kindref="member">EXCLUDE_ENABLED_OFFSET</ref><sp/>|</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a25a0d59e125c87ff2f8fe0c9a394626c" kindref="member">DYNAMIC_NOC_DIRECTION</ref>(noc,<sp/>exclude_dir_y)<sp/>&lt;&lt;<sp/><ref refid="dataflow__api_8h_1ad0fae11f46cf5042340264e92008ef07" kindref="member">EXCLUDE_DIRECTION_Y_OFFSET</ref><sp/>|</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a25a0d59e125c87ff2f8fe0c9a394626c" kindref="member">DYNAMIC_NOC_DIRECTION</ref>(noc,<sp/>exclude_dir_x)<sp/>&lt;&lt;<sp/><ref refid="dataflow__api_8h_1aa3426d319a63d0c7ba70305b4e1dfe31" kindref="member">EXCLUDE_DIRECTION_X_OFFSET</ref><sp/>|</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_Y(noc,<sp/>exclude_start_y)<sp/>&lt;&lt;<sp/><ref refid="dataflow__api_8h_1a3cdfe0cbd91a7e89ec5f265be58d2046" kindref="member">EXCLUDE_START_Y_OFFSET</ref><sp/>|</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAMIC_NOC_X(noc,<sp/>exclude_start_x)<sp/>&lt;&lt;<sp/><ref refid="dataflow__api_8h_1a5fa0dd89473ba937f0a6f07ab69fe7dc" kindref="member">EXCLUDE_START_X_OFFSET</ref>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="dataflow__api_8h_1ae6cc2abf3ea7ef206891ca06b1174122" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="dataflow__api_8h_1ae6cc2abf3ea7ef206891ca06b1174122" kindref="member">get_dram_noc_addr</ref>(</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>page_size,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_base_address,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;true&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;true&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>(bank_offset_index<sp/>*<sp/>align(page_size,<sp/>ALLOCATOR_ALIGNMENT))<sp/>+<sp/>bank_base_address<sp/>+<sp/>offset<sp/>+</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[bank_index];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;true&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="dataflow__api_8h_1a31a2b40a6884c495ec14250c528a4dd7" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="dataflow__api_8h_1a31a2b40a6884c495ec14250c528a4dd7" kindref="member">get_l1_noc_addr</ref>(</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>page_size,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_base_address,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;false&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;false&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>(bank_offset_index<sp/>*<sp/>align(page_size,<sp/>ALLOCATOR_ALIGNMENT))<sp/>+<sp/>bank_base_address<sp/>+<sp/>offset<sp/>+</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[bank_index];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;false&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="dataflow__api_8h_1abe9291a1484765db08b61bb0be52135c" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="dataflow__api_8h_1abe9291a1484765db08b61bb0be52135c" kindref="member">get_system_memory_noc_addr</ref>(</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>page_size,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>base_addr,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pcie_core_noc_encoding<sp/>=</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t(NOC_XY_PCIE_ENCODING(DYNAMIC_NOC_X(noc,<sp/>PCIE_NOC_X),<sp/>DYNAMIC_NOC_Y(noc,<sp/>PCIE_NOC_Y)));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>base_addr<sp/>+<sp/>page_size<sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/>pcie_core_noc_encoding<sp/>|<sp/>addr;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="683" refid="dataflow__api_8h_1a9e17f34cbfaaf63b2479e4f755aaa12c" refkind="member"><highlight class="normal">std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(std::uint32_t<sp/>addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>encoding<sp/>which<sp/>contains<sp/>the<sp/>address<sp/>in<sp/>L1<sp/>on<sp/>the<sp/>current<sp/>core<sp/>that<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read<sp/>from/write<sp/>to<sp/>via<sp/>the<sp/>noc</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOC_XY_ADDR(my_x[noc],<sp/>my_y[noc],<sp/>addr);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="694" refid="dataflow__api_8h_1a8aef5fd38ffe71fe3ec4a453aa39053b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a8aef5fd38ffe71fe3ec4a453aa39053b" kindref="member">noc_async_read_one_packet</ref>(</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>src_noc_addr,<sp/>std::uint32_t<sp/>dst_local_l1_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP2W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP2D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAOW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION(noc,<sp/>src_noc_addr,<sp/>dst_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dst_local_l1_addr);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>(uint32_t)src_noc_addr);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>reading<sp/>from<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_MID,<sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_cmd_buf,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_TARG_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAOD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>max_page_size<sp/>=<sp/>NOC_MAX_BURST_SIZE<sp/>+<sp/>1&gt;</highlight></codeline>
<codeline lineno="743" refid="dataflow__api_8h_1af81638126b7666b792269be373577241" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1af81638126b7666b792269be373577241" kindref="member">noc_async_read</ref>(</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>src_noc_addr,<sp/>std::uint32_t<sp/>dst_local_l1_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(max_page_size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a8aef5fd38ffe71fe3ec4a453aa39053b" kindref="member">noc_async_read_one_packet</ref>(src_noc_addr,<sp/>dst_local_l1_addr,<sp/>size,<sp/>noc);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NARW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION(noc,<sp/>src_noc_addr,<sp/>dst_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncrisc_noc_fast_read_any_len(noc,<sp/>read_cmd_buf,<sp/>src_noc_addr,<sp/>dst_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NARD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="762" refid="dataflow__api_8h_1a3070e5dc8b9ed311b89d154643c4f8fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a3070e5dc8b9ed311b89d154643c4f8fd" kindref="member">noc_async_read_one_packet_set_state</ref>(std::uint64_t<sp/>src_noc_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP3W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP3D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NASW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>reading<sp/>from<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_MID,<sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_cmd_buf,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_TARG_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NASD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inc_num_issued<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="791" refid="dataflow__api_8h_1a4031bdbfa690ceee630ad17f8ca99fdb" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a4031bdbfa690ceee630ad17f8ca99fdb" kindref="member">noc_async_read_one_packet_with_state</ref>(</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_noc_addr,<sp/>std::uint32_t<sp/>dst_local_l1_addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP4W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP4D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NATW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>sanitize,<sp/>need<sp/>to<sp/>grab<sp/>full<sp/>noc<sp/>addr<sp/>+<sp/>xfer<sp/>size<sp/>from<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION_WITH_ADDR_AND_SIZE_STATE(noc,<sp/>src_noc_addr,<sp/>dst_local_l1_addr);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dst_local_l1_addr);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_noc_addr);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(inc_num_issued)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NATD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="820" refid="dataflow__api_8h_1a60d8bc61e237ad566538149901b548ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a60d8bc61e237ad566538149901b548ad" kindref="member">noc_async_read_set_state</ref>(std::uint64_t<sp/>src_noc_addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP5W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP5D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAUW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>reading<sp/>from<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_MID,<sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_cmd_buf,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_TARG_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(src_noc_addr<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAUD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inc_num_issued<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="847" refid="dataflow__api_8h_1aa006454ec0ae734836c80ecc0a4cfe18" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1aa006454ec0ae734836c80ecc0a4cfe18" kindref="member">noc_async_read_with_state</ref>(</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_noc_addr,<sp/>std::uint32_t<sp/>dst_local_l1_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAVW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>sanitize,<sp/>need<sp/>to<sp/>grab<sp/>full<sp/>noc<sp/>addr<sp/>+<sp/>xfer<sp/>size<sp/>from<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION_WITH_ADDR_STATE(noc,<sp/>src_noc_addr,<sp/>dst_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>NOC_MAX_BURST_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP6W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP6D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dst_local_l1_addr);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_noc_addr);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>NOC_MAX_BURST_SIZE);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>NOC_MAX_BURST_SIZE;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_noc_addr<sp/>+=<sp/>NOC_MAX_BURST_SIZE;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_local_l1_addr<sp/>+=<sp/>NOC_MAX_BURST_SIZE;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(inc_num_issued)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>left-over<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP7W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP7D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dst_local_l1_addr);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_noc_addr);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(inc_num_issued)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAVD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="892" refid="dataflow__api_8h_1a8894085f35db86f5dd1b884d5168c166" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a8894085f35db86f5dd1b884d5168c166" kindref="member">noc_async_read_inc_num_issued</ref>(std::uint32_t<sp/>num_issued_reads_inc,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>num_issued_reads_inc;</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="899" refid="dataflow__api_8h_1a0fff80388ddc749f68da0a8e72320a89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a0fff80388ddc749f68da0a8e72320a89" kindref="member">noc_async_write_one_packet</ref>(</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,<sp/>std::uint64_t<sp/>dst_noc_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_cmd_field<sp/>=<sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_WR<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|<sp/>NOC_CMD_STATIC_VC(<ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>)<sp/>|</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(linked<sp/>?<sp/>NOC_CMD_VC_LINKED<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(mcast<sp/>?<sp/>(NOC_CMD_PATH_RESERVE<sp/>|<sp/>NOC_CMD_BRCST_PACKET)<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_RESP_MARKED;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_cmd_field);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_local_l1_addr);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>(uint32_t)dst_noc_addr);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>writing<sp/>to<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_MID,<sp/>(uint32_t)(dst_noc_addr<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_RET_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(dst_noc_addr<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_noc_nonposted_writes_acked&lt;proc_type&gt;(noc);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_acked[noc]<sp/>+=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>num_dests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="936" refid="dataflow__api_8h_1ae99484885c567e016e23899f0408bd57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ae99484885c567e016e23899f0408bd57" kindref="member">noc_async_write_multicast_one_packet</ref>(</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_cmd_field<sp/>=<sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_WR<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|<sp/>NOC_CMD_STATIC_VC(<ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>)<sp/>|</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(linked<sp/>?<sp/>NOC_CMD_VC_LINKED<sp/>:<sp/>0x0)<sp/>|</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((multicast_path_reserve<sp/>?<sp/>NOC_CMD_PATH_RESERVE<sp/>:<sp/>0)<sp/>|<sp/>NOC_CMD_BRCST_PACKET)<sp/>|</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_RESP_MARKED;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_cmd_field);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_local_l1_addr);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>(uint32_t)dst_noc_addr_multicast);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>writing<sp/>to<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_MID,<sp/>(uint32_t)(dst_noc_addr_multicast<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_RET_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(dst_noc_addr_multicast<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_noc_nonposted_writes_acked&lt;proc_type&gt;(noc,<sp/>num_dests);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_acked[noc]<sp/>+=<sp/>num_dests;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>sets<sp/>the<sp/>state<sp/>for<sp/>issuing<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_posted<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="979" refid="dataflow__api_8h_1a107fbfba5c58e08da38918af048c8bc7" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a107fbfba5c58e08da38918af048c8bc7" kindref="member">noc_async_write_one_packet_set_state</ref>(</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>,<sp/>uint8_t<sp/>vc<sp/>=<sp/><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_cmd_field<sp/>=<sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_WR<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|<sp/>NOC_CMD_STATIC_VC(vc)<sp/>|</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(linked<sp/>?<sp/>NOC_CMD_VC_LINKED<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(mcast<sp/>?<sp/>(NOC_CMD_PATH_RESERVE<sp/>|<sp/>NOC_CMD_BRCST_PACKET)<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(non_posted<sp/>?<sp/>NOC_CMD_RESP_MARKED<sp/>:<sp/>0x0);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_cmd_field);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>writing<sp/>to<sp/>PCIe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_MID,<sp/>(uint32_t)(dst_noc_addr<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x1000000F);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_RET_ADDR_COORDINATE,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(dst_noc_addr<sp/>&gt;&gt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>&amp;<sp/>NOC_COORDINATE_MASK);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>issues<sp/>only<sp/>a<sp/>single<sp/>packet<sp/>with<sp/>cmd<sp/>buf<sp/>state<sp/>with<sp/>size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE<sp/>(ie<sp/>maximum<sp/>packet<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_posted<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="1006" refid="dataflow__api_8h_1a47736387eba0f8f4d5523a504508636d" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a47736387eba0f8f4d5523a504508636d" kindref="member">noc_async_write_one_packet_with_state</ref>(</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,<sp/>std::uint32_t<sp/>dst_noc_addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>sanitize,<sp/>need<sp/>to<sp/>grab<sp/>full<sp/>noc<sp/>addr<sp/>+<sp/>xfer<sp/>size<sp/>from<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION_WITH_ADDR_AND_SIZE_STATE(noc,<sp/>dst_noc_addr,<sp/>src_local_l1_addr);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_local_l1_addr);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dst_noc_addr);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(non_posted)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_noc_nonposted_writes_acked&lt;proc_type&gt;(noc);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_acked[noc]<sp/>+=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>num_dests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1030" refid="structInterleavedAddrGen" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen</ref><sp/>{</highlight></codeline>
<codeline lineno="1031" refid="structInterleavedAddrGen_1a9a6b4336c1f9059c48f7dd38d3c223ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGen_1a9a6b4336c1f9059c48f7dd38d3c223ba" kindref="member">bank_base_address</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>address<sp/>for<sp/>the<sp/>whole<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="structInterleavedAddrGen_1ae87a663744676dd0bda03190f2258213" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGen_1ae87a663744676dd0bda03190f2258213" kindref="member">page_size</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Num<sp/>bytes<sp/>in<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033" refid="structInterleavedAddrGen_1a35965eeb3ca9036dd89a46ac81c435b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGen_1a35965eeb3ca9036dd89a46ac81c435b7" kindref="member">aligned_page_size</ref><sp/>=<sp/>align(<ref refid="structInterleavedAddrGen_1ae87a663744676dd0bda03190f2258213" kindref="member">page_size</ref>,<sp/>ALLOCATOR_ALIGNMENT);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1036" refid="structInterleavedAddrGen_1a49558fb0a925773898f8e32ed14d3fe8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGen_1a49558fb0a925773898f8e32ed14d3fe8" kindref="member">get_addr</ref>(</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_offset_index,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_index,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bank_offset_index<sp/>*<sp/>this-&gt;aligned_page_size)<sp/>+<sp/>this-&gt;bank_base_address<sp/>+<sp/>offset<sp/>+</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interleaved_addr_gen::get_bank_offset&lt;DRAM&gt;(bank_index);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1046" refid="structInterleavedAddrGen_1ad6b00d5f98bd8bd1945bda54d8340104" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/><ref refid="structInterleavedAddrGen_1ad6b00d5f98bd8bd1945bda54d8340104" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedAddrGen_1a49558fb0a925773898f8e32ed14d3fe8" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1057" refid="structInterleavedAddrGen_1a5fcc74ae538bc06c73f7ae33737c13b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGen_1a5fcc74ae538bc06c73f7ae33737c13b6" kindref="member">noc_async_read_page</ref>(</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>dest_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1af81638126b7666b792269be373577241" kindref="member">noc_async_read</ref>(this-&gt;<ref refid="structInterleavedAddrGen_1ad6b00d5f98bd8bd1945bda54d8340104" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>offset),<sp/>dest_addr,<sp/><ref refid="structInterleavedAddrGen_1ae87a663744676dd0bda03190f2258213" kindref="member">page_size</ref>,<sp/>noc);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1064" refid="structInterleavedPow2AddrGen" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInterleavedPow2AddrGen" kindref="compound">InterleavedPow2AddrGen</ref><sp/>{</highlight></codeline>
<codeline lineno="1065" refid="structInterleavedPow2AddrGen_1a9966522b70ca72090ad65cbec56a3aa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGen_1a9966522b70ca72090ad65cbec56a3aa6" kindref="member">bank_base_address</ref>;</highlight></codeline>
<codeline lineno="1066" refid="structInterleavedPow2AddrGen_1a1bdda07b2df9e236c3b18683de154d96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGen_1a1bdda07b2df9e236c3b18683de154d96" kindref="member">log_base_2_of_page_size</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>This<sp/>struct<sp/>is<sp/>used<sp/>for<sp/>optimized<sp/>get_noc_addr<sp/>in<sp/>which<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>know<sp/>that<sp/>bank_unit_size<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068" refid="structInterleavedPow2AddrGen_1a4302cce27635310c3dc29c6ea2dc151e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGen_1a4302cce27635310c3dc29c6ea2dc151e" kindref="member">aligned_log_base_2_of_page_size</ref><sp/>=<sp/>this-&gt;log_base_2_of_page_size<sp/>&gt;<sp/>LOG_BASE_2_OF_ALLOCATOR_ALIGNMENT</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGen_1a1bdda07b2df9e236c3b18683de154d96" kindref="member">log_base_2_of_page_size</ref></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>LOG_BASE_2_OF_ALLOCATOR_ALIGNMENT;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1073" refid="structInterleavedPow2AddrGen_1adbfd08ae3ae989af1e447d97320a76fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGen_1adbfd08ae3ae989af1e447d97320a76fa" kindref="member">get_addr</ref>(</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_offset_index,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_index,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bank_offset_index<sp/>&lt;&lt;<sp/>this-&gt;aligned_log_base_2_of_page_size)<sp/>+<sp/>this-&gt;bank_base_address<sp/>+<sp/>offset<sp/>+</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interleaved_addr_gen::get_bank_offset&lt;DRAM&gt;(bank_index);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1083" refid="structInterleavedPow2AddrGen_1adf3ff9132dc2355a43889bcbd36a3a15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/><ref refid="structInterleavedPow2AddrGen_1adf3ff9132dc2355a43889bcbd36a3a15" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGen_1adbfd08ae3ae989af1e447d97320a76fa" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>tile_hw<sp/>=<sp/>1024&gt;</highlight></codeline>
<codeline lineno="1095" refid="structInterleavedAddrGenFast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast</ref><sp/>{</highlight></codeline>
<codeline lineno="1096" refid="structInterleavedAddrGenFast_1a75f8e84dc2ed014494e27a9a66d08da0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGenFast_1a75f8e84dc2ed014494e27a9a66d08da0" kindref="member">bank_base_address</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>address<sp/>for<sp/>the<sp/>whole<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Remove<sp/>page_size<sp/>from<sp/>argument<sp/>list.<sp/>This<sp/>can<sp/>be<sp/>derived<sp/>from<sp/>data_format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098" refid="structInterleavedAddrGenFast_1aa28ff99f21ae59113e530e7ada1e7db4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGenFast_1aa28ff99f21ae59113e530e7ada1e7db4" kindref="member">page_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Num<sp/>bytes<sp/>in<sp/>bank<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099" refid="structInterleavedAddrGenFast_1a99a3860f937c77a3443ef7f4f81c3868" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>DataFormat<sp/><ref refid="structInterleavedAddrGenFast_1a99a3860f937c77a3443ef7f4f81c3868" kindref="member">data_format</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1102" refid="structInterleavedAddrGenFast_1ae9e86548f004368f621fefc309352b68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedAddrGenFast_1ae9e86548f004368f621fefc309352b68" kindref="member">get_addr</ref>(</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_offset_index,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_index,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MUL_WITH_TILE_SIZE&lt;tile_hw&gt;((uint)this-&gt;data_format,<sp/>bank_offset_index)<sp/>+<sp/>this-&gt;bank_base_address<sp/>+</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+<sp/>interleaved_addr_gen::get_bank_offset&lt;DRAM&gt;(bank_index);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1112" refid="structInterleavedAddrGenFast_1a3093c8318703ed28c1de8ae69f81f066" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/><ref refid="structInterleavedAddrGenFast_1a3093c8318703ed28c1de8ae69f81f066" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedAddrGenFast_1ae9e86548f004368f621fefc309352b68" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1123" refid="structInterleavedAddrGenFast_1a6b8754cfefa3b0a98de891459fcce786" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGenFast_1a6b8754cfefa3b0a98de891459fcce786" kindref="member">noc_async_read_tile</ref>(</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint32_t<sp/>dest_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedAddrGenFast_1ae9e86548f004368f621fefc309352b68" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION(noc,<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(src_noc_xy,<sp/>src_addr),<sp/>dest_addr,<sp/>this-&gt;page_size);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)src_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_COORDINATE,<sp/>src_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>src_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>this-&gt;page_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1144" refid="structInterleavedAddrGenFast_1a03073c2fbb753af33ee13ca95deecab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGenFast_1a03073c2fbb753af33ee13ca95deecab7" kindref="member">noc_async_write_tile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint32_t<sp/>src_addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dest_addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedAddrGenFast_1ae9e86548f004368f621fefc309352b68" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dest_noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION(</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(dest_noc_xy,<sp/>dest_addr),<sp/>src_addr,<sp/>this-&gt;page_size);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>noc_cmd_field<sp/>=<sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_WR<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_STATIC_VC(<ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>)<sp/>|</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(linked<sp/>?<sp/>NOC_CMD_VC_LINKED<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(mcast<sp/>?<sp/>(NOC_CMD_PATH_RESERVE<sp/>|<sp/>NOC_CMD_BRCST_PACKET)<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_RESP_MARKED;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_cmd_field);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)dest_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_COORDINATE,<sp/>dest_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>dest_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>this-&gt;page_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_noc_nonposted_writes_acked&lt;proc_type&gt;(noc);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_acked[noc]<sp/>+=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>num_dests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>noc_async_write_page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>need<sp/>static<sp/>assert<sp/>+<sp/>host<sp/>assert<sp/>that<sp/>page<sp/>size<sp/>&lt;=<sp/>8192,<sp/>hard<sp/>constraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1180" refid="structInterleavedPow2AddrGenFast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structInterleavedPow2AddrGenFast" kindref="compound">InterleavedPow2AddrGenFast</ref><sp/>{</highlight></codeline>
<codeline lineno="1181" refid="structInterleavedPow2AddrGenFast_1ac18418a3bb8b3b3b424b8394ba20936f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGenFast_1ac18418a3bb8b3b3b424b8394ba20936f" kindref="member">bank_base_address</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>address<sp/>for<sp/>the<sp/>whole<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182" refid="structInterleavedPow2AddrGenFast_1ad7ca2d8d5c158d35f460261f5dc09054" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGenFast_1ad7ca2d8d5c158d35f460261f5dc09054" kindref="member">log_base_2_of_page_size</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Num<sp/>bytes<sp/>in<sp/>bank<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183" refid="structInterleavedPow2AddrGenFast_1a3224a2e3ac1ee4f310032d79f75d21b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGenFast_1a3224a2e3ac1ee4f310032d79f75d21b3" kindref="member">aligned_log_base_2_of_page_size</ref><sp/>=<sp/>this-&gt;log_base_2_of_page_size<sp/>&gt;<sp/>LOG_BASE_2_OF_ALLOCATOR_ALIGNMENT</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGenFast_1ad7ca2d8d5c158d35f460261f5dc09054" kindref="member">log_base_2_of_page_size</ref></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>LOG_BASE_2_OF_ALLOCATOR_ALIGNMENT;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1188" refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" kindref="member">get_addr</ref>(</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_offset_index,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bank_index,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bank_offset_index<sp/>&lt;&lt;<sp/>this-&gt;aligned_log_base_2_of_page_size)<sp/>+<sp/>this-&gt;bank_base_address<sp/>+<sp/>offset<sp/>+</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interleaved_addr_gen::get_bank_offset&lt;DRAM&gt;(bank_index);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1198" refid="structInterleavedPow2AddrGenFast_1acfc173d368553cf15cc595db0e77e387" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/><ref refid="structInterleavedPow2AddrGenFast_1acfc173d368553cf15cc595db0e77e387" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(noc_xy,<sp/>addr);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noc_addr;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1209" refid="structInterleavedPow2AddrGenFast_1ac2fd5942af869242940686d04fe6f84d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGenFast_1ac2fd5942af869242940686d04fe6f84d" kindref="member">noc_async_read_page</ref>(</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint32_t<sp/>dest_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION(</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(src_noc_xy,<sp/>src_addr),<sp/>dest_addr,<sp/>1<sp/>&lt;&lt;<sp/>this-&gt;aligned_log_base_2_of_page_size);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)src_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_COORDINATE,<sp/>src_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>src_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>1<sp/>&lt;&lt;<sp/>this-&gt;aligned_log_base_2_of_page_size);<sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1232" refid="structInterleavedPow2AddrGenFast_1a5799172827d92ec97f5ec3f9928489a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGenFast_1a5799172827d92ec97f5ec3f9928489a4" kindref="member">noc_async_read_partial_page</ref>(</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dest_addr,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP1W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;RP1D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_READ_TRANSACTION(noc,<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(src_noc_xy,<sp/>src_addr),<sp/>dest_addr,<sp/>size);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)src_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_COORDINATE,<sp/>src_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>src_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_INLINE</highlight></codeline>
<codeline lineno="1257" refid="structInterleavedPow2AddrGenFast_1a7c27898893344aa8f08fb3d7c64daa8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGenFast_1a7c27898893344aa8f08fb3d7c64daa8c" kindref="member">noc_async_write_page</ref>(</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr,</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>write_size_bytes,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_offset_index<sp/>=<sp/>interleaved_addr_gen::get_bank_offset_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_index<sp/>=<sp/>interleaved_addr_gen::get_bank_index&lt;DRAM&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dest_addr<sp/>=<sp/>this-&gt;<ref refid="structInterleavedPow2AddrGenFast_1a631a54e1f98535b32539a8b6e63b400b" kindref="member">get_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bank_offset_index,<sp/>bank_index,<sp/>offset);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dest_noc_xy<sp/>=<sp/>interleaved_addr_gen::get_noc_xy&lt;DRAM&gt;(bank_index,<sp/>noc);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION(</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,<sp/><ref refid="dataflow__api_8h_1aa850145f50aafa428c0d257cfed4fb8c" kindref="member">get_noc_addr_helper</ref>(dest_noc_xy,<sp/>dest_addr),<sp/>src_addr,<sp/>write_size_bytes);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>write_cmd_buf));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWPD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>noc_cmd_field<sp/>=<sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_WR<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_STATIC_VC(<ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>)<sp/>|</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(linked<sp/>?<sp/>NOC_CMD_VC_LINKED<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>|<sp/><sp/></highlight><highlight class="comment">//<sp/>(mcast<sp/>?<sp/>(NOC_CMD_PATH_RESERVE<sp/>|<sp/>NOC_CMD_BRCST_PACKET)<sp/>:<sp/>0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_RESP_MARKED;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_cmd_field);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)dest_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_RET_ADDR_COORDINATE,<sp/>dest_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>dest_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>write_size_bytes);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>write_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_noc_nonposted_writes_acked&lt;proc_type&gt;(noc);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_nonposted_writes_acked[noc]<sp/>+=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>num_dests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1297" refid="dataflow__api_8h_1ac41af911427b28e8d8e87869679f27c4" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen&lt;DRAM&gt;</ref>&amp;<sp/>s,<sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative<sp/>API<sp/>for<sp/>getting<sp/>the<sp/>noc<sp/>address<sp/>when<sp/>we<sp/>are<sp/>reading<sp/>using<sp/>a<sp/>swizzled</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.<sp/>This<sp/>version<sp/>assumes<sp/>bank<sp/>unit<sp/>size<sp/>can<sp/>be<sp/>arbitrary<sp/>size.<sp/>Use</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_noc_addr(const<sp/>uint32_t<sp/>id,<sp/>InterleavedPow2AddrGen<sp/>s)<sp/>for<sp/>optimized<sp/>algorithm<sp/>in<sp/>which<sp/>stick<sp/>size</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>a<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"></highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id:<sp/>Unique<sp/>id<sp/>for<sp/>the<sp/>bank_unit<sp/>you<sp/>want<sp/>to<sp/>read,<sp/>assuming<sp/>row<sp/>major<sp/>order.<sp/>We<sp/>use<sp/>this<sp/>to<sp/>compute<sp/>the</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bank<sp/>for<sp/>this<sp/>unit<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterleavedAddrGen:<sp/>Check<sp/>struct<sp/>for<sp/>attribute<sp/>definitions.</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="structInterleavedAddrGen_1ad6b00d5f98bd8bd1945bda54d8340104" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1314" refid="dataflow__api_8h_1ae6c97b5ef900963ae9c3a5d87a7ef1ff" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGen" kindref="compound">InterleavedPow2AddrGen&lt;DRAM&gt;</ref>&amp;<sp/>s,<sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative<sp/>API<sp/>for<sp/>getting<sp/>the<sp/>noc<sp/>address<sp/>when<sp/>we<sp/>are<sp/>reading<sp/>using<sp/>a<sp/>swizzled</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.<sp/>This<sp/>version<sp/>assumes<sp/>bank<sp/>unit<sp/>size<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2.<sp/>For<sp/>arbitrary<sp/>bank</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit<sp/>size,<sp/>use<sp/>get_noc_addr(const<sp/>uint32_t<sp/>id,<sp/>const<sp/>InterleavedOffset<sp/>s)</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"></highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id:<sp/>Unique<sp/>id<sp/>for<sp/>the<sp/>bank_unit<sp/>you<sp/>want<sp/>to<sp/>read,<sp/>assuming<sp/>row<sp/>major<sp/>order.<sp/>We<sp/>use<sp/>this<sp/>to<sp/>compute<sp/>the</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bank<sp/>for<sp/>this<sp/>unit<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"></highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterleavedPow2AddrGen:<sp/>Check<sp/>struct<sp/>for<sp/>attribute<sp/>definitions.</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="structInterleavedPow2AddrGen_1adf3ff9132dc2355a43889bcbd36a3a15" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>tile_hw&gt;</highlight></codeline>
<codeline lineno="1331" refid="dataflow__api_8h_1a6c2101cd8c2aec4bec53247d732a956c" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast&lt;DRAM, tile_hw&gt;</ref>&amp;<sp/>s,<sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative<sp/>API<sp/>for<sp/>getting<sp/>the<sp/>noc<sp/>address<sp/>when<sp/>we<sp/>are<sp/>reading<sp/>using<sp/>a<sp/>swizzled</highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.<sp/>This<sp/>version<sp/>assumes<sp/>bank<sp/>unit<sp/>size<sp/>can<sp/>be<sp/>arbitrary<sp/>size.<sp/>Use</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_noc_addr(const<sp/>uint32_t<sp/>id,<sp/>InterleavedPow2AddrGen<sp/>s)<sp/>for<sp/>optimized<sp/>algorithm<sp/>in<sp/>which<sp/>stick<sp/>size</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>a<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"></highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id:<sp/>Unique<sp/>id<sp/>for<sp/>the<sp/>bank_unit<sp/>you<sp/>want<sp/>to<sp/>read,<sp/>assuming<sp/>row<sp/>major<sp/>order.<sp/>We<sp/>use<sp/>this<sp/>to<sp/>compute<sp/>the</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bank<sp/>for<sp/>this<sp/>unit<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="1341"><highlight class="comment"></highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterleavedAddrGen:<sp/>Check<sp/>struct<sp/>for<sp/>attribute<sp/>definitions.</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="structInterleavedAddrGenFast_1a3093c8318703ed28c1de8ae69f81f066" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1348" refid="dataflow__api_8h_1a8f9a8e66a0842dcf7ed45aff4231ad9e" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>std::uint64_t<sp/><ref refid="dataflow__api_8h_1aeec74feed8e1fce53c5561c28021eb63" kindref="member">get_noc_addr</ref>(</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGenFast" kindref="compound">InterleavedPow2AddrGenFast&lt;DRAM&gt;</ref>&amp;<sp/>s,<sp/>uint32_t<sp/>offset<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative<sp/>API<sp/>for<sp/>getting<sp/>the<sp/>noc<sp/>address<sp/>when<sp/>we<sp/>are<sp/>reading<sp/>using<sp/>a<sp/>swizzled</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.<sp/>This<sp/>version<sp/>assumes<sp/>bank<sp/>unit<sp/>size<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2<sp/>and<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>NOC_MAX_BURST_SIZE.</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>arbitrary<sp/>bank<sp/>unit<sp/>size,<sp/>use<sp/>get_noc_addr(const<sp/>uint32_t<sp/>id,<sp/>const<sp/>InterleavedOffset<sp/>s)</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"></highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id:<sp/>Unique<sp/>id<sp/>for<sp/>the<sp/>bank_unit<sp/>you<sp/>want<sp/>to<sp/>read,<sp/>assuming<sp/>row<sp/>major<sp/>order.<sp/>We<sp/>use<sp/>this<sp/>to<sp/>compute<sp/>the</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bank<sp/>for<sp/>this<sp/>unit<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"></highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterleavedPow2AddrGenFast:<sp/>Check<sp/>struct<sp/>for<sp/>attribute<sp/>definitions.</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.<ref refid="structInterleavedPow2AddrGenFast_1acfc173d368553cf15cc595db0e77e387" kindref="member">get_noc_addr</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="1365" refid="dataflow__api_8h_1a3a4948036d7191e294716b03d68b9d8a" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a3a4948036d7191e294716b03d68b9d8a" kindref="member">noc_async_read_page</ref>(</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen&lt;DRAM&gt;</ref>&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>dst_local_l1_addr,</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structInterleavedAddrGen_1a5fcc74ae538bc06c73f7ae33737c13b6" kindref="member">noc_async_read_page</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>dst_local_l1_addr,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>tile_hw&gt;</highlight></codeline>
<codeline lineno="1379" refid="dataflow__api_8h_1a94f6b951ebf9742b2bea80741ff47d27" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a94f6b951ebf9742b2bea80741ff47d27" kindref="member">noc_async_read_tile</ref>(</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast&lt;DRAM, tile_hw&gt;</ref>&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>dst_local_l1_addr,</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>requests<sp/>-<sp/>use<sp/>static<sp/>VC</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>responses<sp/>-<sp/>assigned<sp/>VCs<sp/>dynamically</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structInterleavedAddrGenFast_1a6b8754cfefa3b0a98de891459fcce786" kindref="member">noc_async_read_tile</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>dst_local_l1_addr,<sp/>offset,<sp/>noc);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>max_page_size<sp/>=<sp/>NOC_MAX_BURST_SIZE<sp/>+<sp/>1&gt;</highlight></codeline>
<codeline lineno="1412" refid="dataflow__api_8h_1a188eeb8f8c1f14b173ebe8c406133600" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a188eeb8f8c1f14b173ebe8c406133600" kindref="member">noc_async_write</ref>(</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,<sp/>std::uint64_t<sp/>dst_noc_addr,<sp/>std::uint32_t<sp/>size,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(max_page_size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a0fff80388ddc749f68da0a8e72320a89" kindref="member">noc_async_write_one_packet</ref>(src_local_l1_addr,<sp/>dst_noc_addr,<sp/>size,<sp/>noc);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAWW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,<sp/>write_cmd_buf,<sp/>src_local_l1_addr,<sp/>dst_noc_addr,<sp/>size,<sp/><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NAWD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>tile_hw&gt;</highlight></codeline>
<codeline lineno="1426" refid="dataflow__api_8h_1a4f6b5afaf9a9f9f4d9692dcd59fc62a0" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a4f6b5afaf9a9f9f4d9692dcd59fc62a0" kindref="member">noc_async_write_tile</ref>(</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGenFast" kindref="compound">InterleavedAddrGenFast&lt;DRAM, tile_hw&gt;</ref>&amp;<sp/>s,</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="structInterleavedAddrGenFast_1a03073c2fbb753af33ee13ca95deecab7" kindref="member">noc_async_write_tile</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>src_local_l1_addr,<sp/>noc);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ProgrammableCoreType<sp/>type<sp/>=<sp/>ProgrammableCoreType::TENSIX&gt;</highlight></codeline>
<codeline lineno="1435" refid="dataflow__api_8h_1aad24ffd7fc05b797ce38e6072c2f0eab" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="dataflow__api_8h_1aad24ffd7fc05b797ce38e6072c2f0eab" kindref="member">get_semaphore</ref>(uint32_t<sp/>semaphore_id)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)<ref refid="dataflow__api_8h_1a237705982b987907cbfca699e32a9c64" kindref="member">sem_l1_base</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type)]<sp/>+<sp/>semaphore_id<sp/>*<sp/>L1_ALIGNMENT;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439" refid="dataflow__api_8h_1aa85bbb469e6f0aaeabed92f4aeb6fc71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1aa85bbb469e6f0aaeabed92f4aeb6fc71" kindref="member">noc_semaphore_set_remote</ref>(</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,<sp/>std::uint64_t<sp/>dst_noc_addr,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSSW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr,<sp/>src_local_l1_addr,<sp/>4);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_reg_cmd_buf,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSSD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>max_page_size<sp/>=<sp/>NOC_MAX_BURST_SIZE<sp/>+<sp/>1&gt;</highlight></codeline>
<codeline lineno="1493" refid="dataflow__api_8h_1ab5abf4783385b9983021c773f47e3874" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ab5abf4783385b9983021c773f47e3874" kindref="member">noc_async_write_multicast</ref>(</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(max_page_size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1ae99484885c567e016e23899f0408bd57" kindref="member">noc_async_write_multicast_one_packet</ref>(</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,<sp/>dst_noc_addr_multicast,<sp/>size,<sp/>num_dests,<sp/>linked,<sp/>multicast_path_reserve);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMWW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linked,</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dests,</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multicast_path_reserve);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMWD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549" refid="dataflow__api_8h_1a125909749e0596744b6b27c288d566ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a125909749e0596744b6b27c288d566ce" kindref="member">noc_semaphore_set_multicast</ref>(</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSNW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>4);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_reg_cmd_buf,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/></highlight><highlight class="comment">/*size<sp/>in<sp/>bytes*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linked,</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dests,</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multicast_path_reserve);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSND&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598" refid="dataflow__api_8h_1ac0375e12b7323fe5f3e8c25a800b7882" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ac0375e12b7323fe5f3e8c25a800b7882" kindref="member">noc_semaphore_set_multicast_loopback_src</ref>(</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSLW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>4);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len_loopback_src&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_reg_cmd_buf,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/></highlight><highlight class="comment">/*size<sp/>in<sp/>bytes*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linked,</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dests,</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multicast_path_reserve);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSLD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="dataflow__api_8h_1a378aa2e8c1468ef8ef71ad74c70315a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a378aa2e8c1468ef8ef71ad74c70315a9" kindref="member">noc_async_write_multicast_loopback_src</ref>(</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMLW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len_loopback_src&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linked,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dests,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multicast_path_reserve);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMLD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARCH_BLACKHOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noc_async_write_multicast_exclude_region(</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint64_t<sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>size,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>num_dests,</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>exclude_region,</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>linked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multicast_path_reserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMEW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_MULTI_WRITE_TRANSACTION(noc,<sp/>dst_noc_addr_multicast,<sp/>src_local_l1_addr,<sp/>size);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_write_any_len_exclude_region&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_cmd_buf,</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_local_l1_addr,</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_noc_addr_multicast,</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a5fb39d71d6c419e9ad7aa0f43e5a91d8" kindref="member">NOC_MULTICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linked,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dests,</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multicast_path_reserve,</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exclude_region);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NMED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722" refid="dataflow__api_8h_1a2326e9e29ea607bc865e50b614f197dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a2326e9e29ea607bc865e50b614f197dd" kindref="member">noc_async_read_barrier</ref>(uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRBW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidate_l1_cache();</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_reads_flushed(noc));</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRBD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1739" refid="dataflow__api_8h_1a57f29294fed4616943f1592452706467" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a57f29294fed4616943f1592452706467" kindref="member">noc_async_write_barrier</ref>(uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWBW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dataflow__api_8h_1abfbb1273e3f29964043f4660b5c5bc1d" kindref="member">noc_mode</ref><sp/>==<sp/>DM_DYNAMIC_NOC)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_dynamic_noc_nonposted_writes_flushed&lt;proc_type&gt;(noc));</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_nonposted_writes_flushed(noc));</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWBD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1755" refid="dataflow__api_8h_1a7075995d85a7119a04ad734bd34a4bf5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a7075995d85a7119a04ad734bd34a4bf5" kindref="member">noc_async_writes_flushed</ref>(uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWFW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_nonposted_writes_sent(noc));</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWFD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1770" refid="dataflow__api_8h_1a13a74d46d62931d19a406414db103c4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a13a74d46d62931d19a406414db103c4b" kindref="member">noc_async_atomic_barrier</ref>(uint8_t<sp/>noc_idx<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NABW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_nonposted_atomics_flushed(noc_idx));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NABD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1791" refid="dataflow__api_8h_1a4f714cc4a08a2eaac5e3f7fae9d1383a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a4f714cc4a08a2eaac5e3f7fae9d1383a" kindref="member">noc_semaphore_wait</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>uint32_t*<sp/>sem_addr,<sp/>uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidate_l1_cache();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*sem_addr)<sp/>!=<sp/>val);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1814" refid="dataflow__api_8h_1a84a965a61b65152c42835f35dca007af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a84a965a61b65152c42835f35dca007af" kindref="member">noc_semaphore_wait_min</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>uint32_t*<sp/>sem_addr,<sp/>uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSMW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidate_l1_cache();</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*sem_addr)<sp/>&lt;<sp/>val);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSMD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1837" refid="dataflow__api_8h_1af02a9af640679b00da874318535aa397" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1af02a9af640679b00da874318535aa397" kindref="member">noc_semaphore_set</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>tt_l1_ptr<sp/>uint32_t*<sp/>sem_addr,<sp/>uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>semaphore<sp/>value<sp/>to<sp/>val</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>(*sem_addr)<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1864" refid="dataflow__api_8h_1ab5f779ea1675acf61c46613048ce96e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1ab5f779ea1675acf61c46613048ce96e1" kindref="member">noc_inline_dw_write</ref>(uint64_t<sp/>addr,<sp/>uint32_t<sp/>val,<sp/>uint8_t<sp/>be<sp/>=<sp/>0xF,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWIW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_ADDR(noc,<sp/>addr,<sp/>4);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>noc_fast_write_dw_inline&lt;proc_type,<sp/>noc_mode&gt;(</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_reg_cmd_buf,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val,</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be,<sp/><sp/></highlight><highlight class="comment">//<sp/>byte-enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>mcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>posted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NWID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1895" refid="dataflow__api_8h_1a962d804ce21d1d26ccb4241e2eb6ac9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a962d804ce21d1d26ccb4241e2eb6ac9f" kindref="member">noc_semaphore_inc</ref>(uint64_t<sp/>addr,<sp/>uint32_t<sp/>incr,<sp/>uint8_t<sp/>noc_id<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/><sp/><sp/>[REFER<sp/>TO<sp/>grayskull/noc/noc.h<sp/>for<sp/>the<sp/>documentation<sp/>of<sp/>noc_atomic_increment()]</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/><sp/><sp/><sp/>Generic<sp/>increment<sp/>with<sp/>32-bit<sp/>wrap.</highlight></codeline>
<codeline lineno="1899"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSIW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_SANITIZE_NOC_ADDR(noc_id,<sp/>addr,<sp/>4);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_INSERT_DELAY(TransactionAtomic);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>noc_fast_atomic_increment&lt;noc_mode&gt;(</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_id,</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_at_cmd_buf,</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dataflow__api_8h_1a56cf50350ff87477df00fb899480ff2d" kindref="member">NOC_UNICAST_WRITE_VC</ref>,</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incr,</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31<sp/></highlight><highlight class="comment">/*wrap*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*linked*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*posted*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MEM_NOC_ATOMIC_RET_VAL_ADDR);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916" refid="dataflow__api_8h_1a9e9618b5b64ed1ae0d0a747ac0f10745" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a9e9618b5b64ed1ae0d0a747ac0f10745" kindref="member">RISC_POST_HEARTBEAT</ref>(uint32_t&amp;<sp/>heartbeat)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>invalidate_l1_cache();</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*<sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*)(0x1C);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>heartbeat++;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr[0]<sp/>=<sp/>0xAABB0000<sp/>|<sp/>(heartbeat<sp/>&amp;<sp/>0xFFFF);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1924" refid="dataflow__api_8h_1a29bd290aaee1b41529717b029dc14952" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="dataflow__api_8h_1a29bd290aaee1b41529717b029dc14952" kindref="member">min</ref>(uint32_t<sp/>a,<sp/>uint32_t<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)<sp/>?<sp/>a<sp/>:<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_vc&gt;</highlight></codeline>
<codeline lineno="1927" refid="dataflow__api_8h_1a009e28764f70f39d1a2ccaaba8681973" refkind="member"><highlight class="normal">FORCE_INLINE<sp/>uint32_t<sp/><ref refid="dataflow__api_8h_1a009e28764f70f39d1a2ccaaba8681973" kindref="member">noc_async_read_tile_dram_sharded_set_state</ref>(</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_base_address,</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>page_size,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bank_id<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>vc<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr_;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_noc_xy;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>src_addr_<sp/>=<sp/>bank_base_address<sp/>+<sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[bank_id];</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>src_noc_xy<sp/>=<sp/><ref refid="dataflow__api_8h_1aa8529255dbc378d289f61049834e1ba4" kindref="member">dram_bank_to_noc_xy</ref>[noc][bank_id];</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(use_vc)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>noc_rd_cmd_field<sp/>=</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_CPY<sp/>|<sp/>NOC_CMD_RD<sp/>|<sp/>NOC_CMD_RESP_MARKED<sp/>|<sp/>NOC_CMD_VC_STATIC<sp/>|<sp/>NOC_CMD_STATIC_VC(vc);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CTRL,<sp/>noc_rd_cmd_field);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_COORDINATE,<sp/>src_noc_xy);<sp/><sp/></highlight><highlight class="comment">//<sp/>src_addr<sp/>&gt;&gt;<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_AT_LEN_BE,<sp/>page_size);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src_addr_;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1956" refid="dataflow__api_8h_1a61cf808450c0213bcdc180a038aac523" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a61cf808450c0213bcdc180a038aac523" kindref="member">noc_async_read_tile_dram_sharded_with_state</ref>(</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_base_addr,<sp/>uint32_t<sp/>src_addr,<sp/>uint32_t<sp/>dest_addr,<sp/>uint32_t<sp/>trid<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_addr_;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>src_addr_<sp/>=<sp/>src_base_addr<sp/>+<sp/>src_addr;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!noc_cmd_buf_ready(noc,<sp/>read_cmd_buf));</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_RET_ADDR_LO,<sp/>dest_addr);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_TARG_ADDR_LO,<sp/>src_addr_);<sp/><sp/></highlight><highlight class="comment">//<sp/>(uint32_t)src_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>NOC_CMD_BUF_WRITE_REG(noc,<sp/>read_cmd_buf,<sp/>NOC_CMD_CTRL,<sp/>NOC_CTRL_SEND_REQ);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>noc_reads_num_issued[noc]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1973" refid="dataflow__api_8h_1a10ff412712df6c4f9f4e557ace59c1ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a10ff412712df6c4f9f4e557ace59c1ec" kindref="member">noc_async_read_tile_dram_sharded_with_state_with_trid</ref>(</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_base_addr,<sp/>uint32_t<sp/>src_addr,<sp/>uint32_t<sp/>dest_addr,<sp/>uint32_t<sp/>trid<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRDW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARCH_GRAYSKULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_fast_read_with_transaction_id(noc,<sp/>read_cmd_buf,<sp/>src_base_addr,<sp/>src_addr,<sp/>dest_addr,<sp/>trid);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NRDD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1983" refid="dataflow__api_8h_1a905d1234815d8abd8aa72460d34386ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a905d1234815d8abd8aa72460d34386ed" kindref="member">noc_async_read_tile_dram_sharded_set_trid</ref>(uint32_t<sp/>trid<sp/>=<sp/>0,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARCH_GRAYSKULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>ncrisc_noc_set_transaction_id(noc,<sp/>read_cmd_buf,<sp/>trid);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NSTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="1992" refid="dataflow__api_8h_1a98abddb8e88027a5299d2124b3953d19" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a98abddb8e88027a5299d2124b3953d19" kindref="member">noc_async_read_barrier_with_trid</ref>(uint32_t<sp/>trid,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NBTW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARCH_GRAYSKULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidate_l1_cache();</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ncrisc_noc_read_with_transaction_id_flushed(noc,<sp/>trid));</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>WAYPOINT(</highlight><highlight class="stringliteral">&quot;NBTD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM&gt;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">FORCE_INLINE</highlight></codeline>
<codeline lineno="2004" refid="dataflow__api_8h_1afc3f8b4dc67a0610cafdafd77d70ee69" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="dataflow__api_8h_1afc3f8b4dc67a0610cafdafd77d70ee69" kindref="member">get_noc_addr_from_bank_id</ref>(uint32_t<sp/>bank_id,<sp/>uint32_t<sp/>bank_address_offset,<sp/>uint8_t<sp/>noc<sp/>=<sp/><ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>addrgen<sp/>tables<sp/>to<sp/>convert<sp/>bank_ids<sp/>to<sp/>physical<sp/>NOC<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>noc_addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(DRAM)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1aa8529255dbc378d289f61049834e1ba4" kindref="member">dram_bank_to_noc_xy</ref>[<ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>][bank_id];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bank_address_offset<sp/>+=<sp/><ref refid="dataflow__api_8h_1ab2a05116b7869524949b9a8bbf0997db" kindref="member">bank_to_dram_offset</ref>[bank_id];</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noc_addr<sp/>=<sp/><ref refid="dataflow__api_8h_1ae219168622cfdbefddcbc5eb36eff549" kindref="member">l1_bank_to_noc_xy</ref>[<ref refid="dataflow__api_8h_1a58bc3a01e945dbd421fce21906e94441" kindref="member">noc_index</ref>][bank_id];</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(noc_addr<sp/>&lt;&lt;<sp/>NOC_ADDR_COORD_SHIFT)<sp/>|<sp/>(bank_address_offset);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DRAM,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>page_size&gt;</highlight></codeline>
<codeline lineno="2017" refid="dataflow__api_8h_1a89bd02fcd6c82d77fa51b346b6a97d20" refkind="member"><highlight class="normal">FORCE_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dataflow__api_8h_1a89bd02fcd6c82d77fa51b346b6a97d20" kindref="member">get_interleaved_addr_gen</ref>(uint32_t<sp/>base_addr)<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_pow_2<sp/>=<sp/>is_power_of_2(page_size);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(is_pow_2)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>log2_page_size<sp/>=<sp/>__builtin_ctz(page_size);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(page_size<sp/>&lt;=<sp/>NOC_MAX_BURST_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGenFast" kindref="compound">InterleavedPow2AddrGenFast&lt;DRAM&gt;</ref>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structInterleavedPow2AddrGenFast_1ac18418a3bb8b3b3b424b8394ba20936f" kindref="member">bank_base_address</ref><sp/>=<sp/>base_addr,<sp/>.log_base_2_of_page_size<sp/>=<sp/>log2_page_size};</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structInterleavedPow2AddrGen" kindref="compound">InterleavedPow2AddrGen&lt;DRAM&gt;</ref>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structInterleavedPow2AddrGen_1a9966522b70ca72090ad65cbec56a3aa6" kindref="member">bank_base_address</ref><sp/>=<sp/>base_addr,<sp/>.log_base_2_of_page_size<sp/>=<sp/>log2_page_size};</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structInterleavedAddrGen" kindref="compound">InterleavedAddrGen&lt;DRAM&gt;</ref>{.<ref refid="structInterleavedAddrGen_1a9a6b4336c1f9059c48f7dd38d3c223ba" kindref="member">bank_base_address</ref><sp/>=<sp/>base_addr,<sp/>.page_size<sp/>=<sp/>page_size};</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tt_metal/hw/inc/dataflow_api.h"/>
  </compounddef>
</doxygen>
